include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Built-In
//--------------------------------------------------------------------------------------------------
// Variables
bool libNtve_gv__CineModeGlobalOn;
playergroup libNtve_gv__PlayersInCineMode;
bool[33] libNtve_gv__CineModeSavedSettingFog;
bool[33] libNtve_gv__CineModeSavedSettingMask;
int libNtve_gv__CineModeSavedSpeed;
trigger[51] libNtve_gv_screenButtonCallbacks;
int[51] libNtve_gv_screenButtonDialogs;
const int libNtve_gv_c_ScreenButtonMaxCount = 50;
int[51] libNtve_gv_screenButtons;
bool[51] libNtve_gv_screenButtonsFlashing;
bool[51] libNtve_gv_screenButtonsFlashStopping;
int[51] libNtve_gv_screenButtonsBorderType;
string[51] libNtve_gv_screenButtonsBorderImage;
string[51] libNtve_gv_screenButtonsHoverImage;
int[51] libNtve_gv_screenButtonsFlashingBorderType;
string[51] libNtve_gv_screenButtonsFlashingBorderImage;
string[51] libNtve_gv_screenButtonsFlashingHoverImage;
int libNtve_gv_tP_FlashScreenButtonID;
fixed libNtve_gv_tP_FlashScreenButtonFlashTime;
color libNtve_gv_tP_FlashScreenButtonColor1;
color libNtve_gv_tP_FlashScreenButtonColor2;
const int libNtve_gv_c_ScreenImageMaxCount = 50;
int[51] libNtve_gv_screenImageDialogs;
int[51] libNtve_gv_screenImageDialogImages;
bool[51] libNtve_gv_screenImagePulsing;
int libNtve_gv_tP_PulseScreenImageID;
fixed libNtve_gv_tP_PulseScreenImagePeriod;
fixed libNtve_gv_tP_PulseScreenImageTransparency1;
fixed libNtve_gv_tP_PulseScreenImageTransparency2;
timer[33] libNtve_gv__GameTimer;
const int libNtve_gv_pLAYERMAX = 32;
int[8] libNtve_gv_portraits;
unitgroup[34] libNtve_gv_unitSelectionStored;
playergroup libNtve_gv__PlayersInStoryMode;
bool[33] libNtve_gv__StoryModeSavedSettingUI_Resource;
bool[33] libNtve_gv__StoryModeSavedSettingUI_Supply;
const int libNtve_gv__BBC_BossBarMaxCount = 50;
playergroup[51] libNtve_gv__BB_Players;
int[51] libNtve_gv__BB_Race;
string[51] libNtve_gv__BB_Portraits;
text[51] libNtve_gv__BB_Title;
unit[51] libNtve_gv__BB_Boss;
fixed[51] libNtve_gv__BB_MaxValue;
fixed[51] libNtve_gv__BB_CurrentValue;
int[51] libNtve_gv__BB_HPOldWidth;
int[51] libNtve_gv__BB_Dialog;
int[51] libNtve_gv__BB_BGImgBar;
int[51] libNtve_gv__BB_BGImgPortrait;
int[51] libNtve_gv__BB_PortraitImage;
int[51] libNtve_gv__BB_TitleLabel;
int[51] libNtve_gv__BB_HpBorderImage;
int[51] libNtve_gv__BB_HpLabel;
int[51] libNtve_gv__BB_HpFullImage;
int[51] libNtve_gv__BB_HpCurrentImage;
int[51] libNtve_gv__BB_BarWidth;
int[51] libNtve_gv__BB_BarHeight;
bool[33][31] libNtve_gv__GameUIVisible;
unit libNtve_gv_lastReplacedUnit;

void libNtve_InitVariables () {
    int init_i;
    int init_j;

    libNtve_gv__CineModeGlobalOn = false;
    libNtve_gv__PlayersInCineMode = PlayerGroupEmpty();
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__CineModeSavedSettingFog[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__CineModeSavedSettingMask[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonCallbacks[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonDialogs[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtons[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashing[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashStopping[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsBorderType[init_i] = c_triggerImageTypeEndCap;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsBorderImage[init_i] = "Assets\\Textures\\ui_mission_hackingbuttonglow_normalpressed.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsHoverImage[init_i] = "Assets\\Textures\\ui_mission_hackingbuttonglow_normaloverpressedover.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingBorderType[init_i] = c_triggerImageTypeEndCap;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingBorderImage[init_i] = "Assets\\Textures\\ui_mission_hackingbuttonglow_anim.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingHoverImage[init_i] = "Assets\\Textures\\ui_mission_hackingbuttonglow_anim.dds";
        init_i = init_i + 1;
    }
    libNtve_gv_tP_FlashScreenButtonID = 0;
    libNtve_gv_tP_FlashScreenButtonFlashTime = 0.0;
    libNtve_gv_tP_FlashScreenButtonColor1 = Color(0,0,0);
    libNtve_gv_tP_FlashScreenButtonColor2 = Color(0,0,0);
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImageDialogs[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImageDialogImages[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImagePulsing[init_i] = false;
        init_i = init_i + 1;
    }
    libNtve_gv_tP_PulseScreenImageID = 0;
    libNtve_gv_tP_PulseScreenImagePeriod = 0.0;
    libNtve_gv_tP_PulseScreenImageTransparency1 = 0.0;
    libNtve_gv_tP_PulseScreenImageTransparency2 = 0.0;
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__GameTimer[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 33) {
        libNtve_gv_unitSelectionStored[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    libNtve_gv__PlayersInStoryMode = PlayerGroupEmpty();
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__StoryModeSavedSettingUI_Resource[init_i] = true;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__StoryModeSavedSettingUI_Supply[init_i] = true;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Players[init_i] = PlayerGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Race[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Portraits[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Title[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Boss[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_MaxValue[init_i] = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_CurrentValue[init_i] = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HPOldWidth[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Dialog[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BGImgBar[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BGImgPortrait[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_PortraitImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_TitleLabel[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpBorderImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpLabel[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpFullImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpCurrentImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BarWidth[init_i] = 520;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BarHeight[init_i] = 120;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        init_j = 0;
        while (init_j <= 30) {
            libNtve_gv__GameUIVisible[init_i][init_j] = true;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    libNtve_gv_lastReplacedUnit = null;
}

// Function Declarations
actor libNtve_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint);
actorscope libNtve_gf_ActorScopeLastCreated ();
actorscope libNtve_gf_ActorScopeLastCreatedSend ();
actor libNtve_gf_ActorLastCreated ();
actor libNtve_gf_ActorLastCreatedSend ();
actor libNtve_gf_AttachActorToUnit (unit lp_unit, string lp_actor, string lp_attachPoint);
actor libNtve_gf_CreateActorAtPoint (string lp_actor, point lp_position);
actor libNtve_gf_CreateModelAtPoint (string lp_model, point lp_position);
void libNtve_gf_SendActorMessageToUnit (unit lp_unit, string lp_message);
void libNtve_gf_ActorRegionSendSimple (actor lp_region, string lp_message);
void libNtve_gf_SendActorMessageToGameRegion (region lp_region, string lp_message);
void libNtve_gf_SendActorMessageToGameRegionWithFilters (region lp_region, int lp_intersectType, string lp_message, string lp_classFilters, string lp_terms);
string libNtve_gf_ActorMsg1 (string lp_msgName, string lp_param1);
string libNtve_gf_ActorMsg2 (string lp_msgName, string lp_param1, string lp_param2);
string libNtve_gf_ActorMsg3 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3);
string libNtve_gf_ActorMsg4 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3, string lp_param4);
string libNtve_gf_ActionDamage ();
string libNtve_gf_ActionImpact ();
string libNtve_gf_AliasAdd (string lp_alias);
string libNtve_gf_AliasRemove (string lp_alias);
string libNtve_gf_AnimBaselineStart ();
string libNtve_gf_AnimBaselineStop ();
string libNtve_gf_AnimBlendTimeApply (fixed lp_blendTime);
string libNtve_gf_AnimBlendTimeRemove ();
string libNtve_gf_AnimClear (string lp_animName, fixed lp_blendTime);
string libNtve_gf_AnimClearAllBut (string lp_animName, fixed lp_blendTime);
string libNtve_gf_AnimDumpDB ();
string libNtve_gf_AnimGroupRemoveAll ();
string libNtve_gf_AnimPlaySequence (string lp_animName, string lp_sequenceList);
string libNtve_gf_AnimSetCompletion (string lp_animName, fixed lp_percent);
string libNtve_gf_AnimSetDuration (string lp_animName, fixed lp_duration);
string libNtve_gf_AnimSetPaused (bool lp_pause);
string libNtve_gf_AnimSetTime (string lp_animName, fixed lp_time, bool lp_scaled);
string libNtve_gf_AnimSetTimeScale (string lp_animName, fixed lp_scale);
string libNtve_gf_AnimSetTimeScaleGlobal (fixed lp_value);
string libNtve_gf_AttachSetBearings (string lp_attachMethods, string lp_bearings);
string libNtve_gf_AttachSetBearingsFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_AttachSetPosition (string lp_attachMethods, string lp_position);
string libNtve_gf_AttachSetPositionFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_AttachSetRotation (string lp_attachMethods, fixed lp_rotation);
string libNtve_gf_AttachSetRotationFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_Create (string lp_actor, string lp_content);
string libNtve_gf_CreateCopy (string lp_createKey, string lp_sourceKey);
string libNtve_gf_DeathCustomize (string lp_subname);
string libNtve_gf_Destroy ();
string libNtve_gf_HostSiteOpsSet (string lp_hostName, string lp_ops, int lp_holdPosition, int lp_holdRotation);
string libNtve_gf_ListAdd (string lp_actorRefName);
string libNtve_gf_ListRemove (string lp_actorRefName);
string libNtve_gf_MissileTentacleReturn ();
string libNtve_gf_ModelEventSuppress (int lp_value, string lp_event);
string libNtve_gf_ModelSwap (string lp_model, int lp_variation);
string libNtve_gf_MoverSetAcceleration (fixed lp_value);
string libNtve_gf_MoverSetDeceleration (fixed lp_value);
string libNtve_gf_MoverSetDestination2D (fixed lp_x, fixed lp_y);
string libNtve_gf_MoverSetDestinationFrom (string lp_actorRefName);
string libNtve_gf_MoverSetDestinationH (fixed lp_value);
string libNtve_gf_MoverSetDestinationZ (fixed lp_value);
string libNtve_gf_MoverSetSpeed (fixed lp_value);
string libNtve_gf_MoverSetSpeedMax (fixed lp_value);
string libNtve_gf_MoverSetSpeedFromDuration (fixed lp_value);
string libNtve_gf_MoverMove ();
string libNtve_gf_MoverStop ();
string libNtve_gf_MoverStopNow ();
string libNtve_gf_MultiplyScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_duration);
string libNtve_gf_Print (string lp_string);
string libNtve_gf_QueryPersistent (string lp_enterResponseActor, string lp_leaveResponeActor);
string libNtve_gf_QueryRadius (fixed lp_radius, string lp_responseActor);
string libNtve_gf_QueryRegion (string lp_regionActor, string lp_responseActor);
string libNtve_gf_RefClear (string lp_actorRefName);
string libNtve_gf_RefDestroy (string lp_actorRefName);
string libNtve_gf_RefDump (string lp_actorRefName);
string libNtve_gf_RefNotify (string lp_actorRefName, string lp_subName);
string libNtve_gf_RefSet (string lp_actorRefName, string lp_refSource);
string libNtve_gf_RefSetFromMsg (string lp_actorRefName, string lp_message);
string libNtve_gf_RefSetFromActor (string lp_actorRefName, string lp_refPrimary, string lp_refSecondary);
string libNtve_gf_RefSetRefreshName (string lp_actorRefName, string lp_refreshName);
string libNtve_gf_SetBearings (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetBearingsFrom (string lp_actor);
string libNtve_gf_SetBearingsH (fixed lp_positionX, fixed lp_positionY, fixed lp_height, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetFacing (fixed lp_facing);
string libNtve_gf_SetHeight (fixed lp_height);
string libNtve_gf_SetOpacity (fixed lp_opacity, fixed lp_blendDuration);
string libNtve_gf_SetPosition (fixed lp_x, fixed lp_y, fixed lp_z);
string libNtve_gf_SetPosition2D (fixed lp_x, fixed lp_y);
string libNtve_gf_SetPosition2DH (fixed lp_x, fixed lp_y);
string libNtve_gf_SetPositionFrom (string lp_actor);
string libNtve_gf_SetPositionH (fixed lp_x, fixed lp_y, fixed lp_height);
string libNtve_gf_SetRenderToTextureEnabled (bool lp_enabled);
string libNtve_gf_SetRotation (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetRotationFrom (string lp_actor);
string libNtve_gf_SetScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration);
string libNtve_gf_SetScaleAbsolute (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration);
string libNtve_gf_SetTeamColor (color lp_diffuseColor, color lp_emissiveColor);
string libNtve_gf_SetLocalTintColor (color lp_color);
string libNtve_gf_SetTintColor (color lp_color, fixed lp_hdr, fixed lp_duration);
string libNtve_gf_SetVisibility (bool lp_visible);
string libNtve_gf_SetWalkAnimMoveSpeed (fixed lp_value);
string libNtve_gf_SetZ (fixed lp_z);
string libNtve_gf_Signal (string lp_signal);
string libNtve_gf_SoundAddDSP (string lp_effect);
string libNtve_gf_SoundSetMuted (bool lp_mutedState, bool lp_fade);
string libNtve_gf_SoundSetOffset (int lp_offset);
string libNtve_gf_SoundSetPaused (bool lp_pausedState, bool lp_fade);
string libNtve_gf_StatusDecrement (string lp_statusVariable);
string libNtve_gf_StatusIncrement (string lp_statusVariable);
string libNtve_gf_TextureDump ();
string libNtve_gf_TextureDumpDB ();
string libNtve_gf_TextureGroupApply (string lp_textureProps);
string libNtve_gf_TextureGroupRemove (string lp_textureProps);
string libNtve_gf_TextureSelectByID (string lp_texture);
string libNtve_gf_TextureVideoSetFrame (string lp_texture, int lp_frame);
string libNtve_gf_TextureVideoSetPaused (string lp_texture, bool lp_pauseState);
string libNtve_gf_TextureVideoSetTime (string lp_texture, fixed lp_time);
string libNtve_gf_TextureVideoStop (string lp_texture);
string libNtve_gf_TextureVideoStopAll ();
string libNtve_gf_TimerSet (fixed lp_duration, string lp_timerName);
string libNtve_gf_TimerKill (string lp_timerName);
void libNtve_gf_KillModel (actor lp_model);
void libNtve_gf_RemoveDoodadsinRegion (region lp_target, string lp_doodadType);
void libNtve_gf_RemoveDeathModelsinRegion (region lp_region);
actor libNtve_gf_LookAtTargetFromPointWithZOffset (point lp_point, fixed lp_z);
actor libNtve_gf_LookAtTargetFromUnitAttachPoint (unit lp_unit, string lp_attachPoint);
void libNtve_gf_CreateLookAtTargetAtPoint (point lp_point);
void libNtve_gf_CreateLookAtTargetAtUnitAttachPoint (unit lp_unit, string lp_attachPoint);
void libNtve_gf_SimpleLookAtStart (unit lp_unit, string lp_type, actor lp_lookAtTarget);
void libNtve_gf_MakeUnitLookAtPoint (unit lp_unit, string lp_type, point lp_point);
void libNtve_gf_MakeUnitLookAtUnit (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void libNtve_gf_SimpleLookAtStop (unit lp_unit, string lp_type);
actor libNtve_gf_MainActorofUnit (unit lp_unit);
void libNtve_gf_MakeModelFaceAngle (actor lp_model, fixed lp_angle);
void libNtve_gf_PlayMovieTextureOnUnitActor (unit lp_unit, string lp_movieTexture);
void libNtve_gf_StopAllVideoTexturesOnUnit (unit lp_unit);
int libNtve_gf_DifficultyValueInt (int lp_easy, int lp_normal, int lp_advanced, int lp_expert);
fixed libNtve_gf_DifficultyValueFixed (fixed lp_easy, fixed lp_normal, fixed lp_advanced, fixed lp_expert);
string libNtve_gf_DifficultyValueUnitType (string lp_easy, string lp_normal, string lp_advanced, string lp_expert);
void libNtve_gf_AICast (unit lp_unit, order lp_order);
void libNtve_gf_DeclareNextTown (int lp_player, point lp_center);
void libNtve_gf_SetTacticalAIRange (int lp_player, string lp_unitType, int lp_distance);
void libNtve_gf_SetTacticalAIThink (int lp_player, string lp_unitType, string lp_target, bool lp_isNative);
void libNtve_gf_PlayAnimation (actor lp_target, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime);
void libNtve_gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime);
void libNtve_gf_KillDoodadsInRegion (region lp_target, string lp_doodadType);
void libNtve_gf_ClearAnimation (actor lp_target, string lp_identifier);
void libNtve_gf_ClearAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier);
void libNtve_gf_TurnAnimationPropertiesOn (actor lp_target, string lp_prop);
void libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut (actor lp_target, string lp_prop, string lp_blendInAnimation, string lp_blendOutAnimation);
void libNtve_gf_TurnAnimationPropertiesOff (actor lp_target, string lp_prop);
void libNtve_gf_TurnAllAnimationPropertiesOff (actor lp_target);
void libNtve_gf_SetAnimationTime (actor lp_target, string lp_identifier, fixed lp_time, bool lp_scaled);
void libNtve_gf_SetAnimationTimeScale (actor lp_target, string lp_identifier, fixed lp_scale);
void libNtve_gf_SetAnimationCompletion (actor lp_target, string lp_identifier, fixed lp_percent);
void libNtve_gf_SetAnimationDuration (actor lp_target, string lp_identifier, fixed lp_duration);
void libNtve_gf_SwooshCamera (int lp_player, fixed lp_distance1, fixed lp_distance2, point lp_location, fixed lp_duration);
camerainfo libNtve_gf_CopyOfCameraObject (camerainfo lp_cam);
fixed libNtve_gf_CostOfAbility (string lp_ability, string lp_costType);
void libNtve_gf__CineModeTurnOnOffForPlayer (int lp_player, bool lp_onOff);
void libNtve_gf__CineModeTurnOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff);
bool libNtve_gf__CineModeFogSetting (int lp_player);
void libNtve_gf__CineModeChangeFogSettingForPlayer (int lp_player, bool lp_fog);
void libNtve_gf__CineModeChangeFogSettingForPlayerGroup (playergroup lp_players, bool lp_fog);
bool libNtve_gf__CineModeMaskSetting (int lp_player);
void libNtve_gf__CineModeChangeMaskSettingForPlayer (int lp_player, bool lp_mask);
void libNtve_gf__CineModeChangeMaskSettingForPlayerGroup (playergroup lp_players, bool lp_mask);
void libNtve_gf__CineModeHideUI (playergroup lp_players);
void libNtve_gf__CineModeRestoreUI (playergroup lp_players);
void libNtve_gf_CinematicMode (bool lp_onOff, playergroup lp_players, fixed lp_duration);
void libNtve_gf_GlobalCinematicSetting (bool lp_onOff);
bool libNtve_gf_PlayerInCinematicMode (int lp_player);
void libNtve_gf_MovieDynamicSubtitlesandDuration (string lp_soundFile);
text libNtve_gf_ConvertBooleanToText (bool lp_value);
string libNtve_gf_ConvertBooleanToString (bool lp_value);
color libNtve_gf_ConvertPlayerColorToColor (int lp_playerColor);
string libNtve_gf_ConvertColorToString (color lp_color);
string libNtve_gf_ConvertBearingsToString (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_ConvertXYToString (fixed lp_x, fixed lp_y);
string libNtve_gf_Convert3DVectorToString (fixed lp_x, fixed lp_y, fixed lp_z);
string libNtve_gf_Convert3DRotationToString (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
void libNtve_gf_SaveDataTableValueDialogItem (bool lp_scope, string lp_name, int lp_value);
void libNtve_gf_SaveDataTableValueDifficultyLevel (bool lp_scope, string lp_name, int lp_value);
void libNtve_gf_SaveDataTableValuePlayerColor (bool lp_scope, string lp_name, int lp_value);
int libNtve_gf_ValueFromDataTableDialogItem (bool lp_scope, string lp_name);
int libNtve_gf_ValueFromDataTableDifficultyLevel (bool lp_scope, string lp_name);
int libNtve_gf_ValueFromDataTablePlayerColor (bool lp_scope, string lp_name);
void libNtve_gf_SetDialogItemText (int lp_dialogItem, text lp_text, playergroup lp_players);
text libNtve_gf_DialogItemText (int lp_dialogItem, int lp_player);
int libNtve_gf_CreateDialogItemAchievement (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_achievement);
int libNtve_gf_CreateDialogItemButton (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_hoverImage);
int libNtve_gf_CreateDialogItemCheckBox (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, bool lp_checked);
int libNtve_gf_CreateDialogItemImage (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode);
int libNtve_gf_CreateDialogItemLabel (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration);
void libNtve_gf_SetDialogItemRotation (int lp_dialogItem, int lp_rotation, playergroup lp_players);
void libNtve_gf_SetDialogItemCurrentValue (int lp_dialogItem, fixed lp_currentValue, playergroup lp_players);
void libNtve_gf_SetDialogItemMinimumValue (int lp_dialogItem, fixed lp_minValue, playergroup lp_players);
void libNtve_gf_SetDialogItemMaximumValue (int lp_dialogItem, fixed lp_maxValue, playergroup lp_players);
void libNtve_gf_SetDialogItemChecked (int lp_dialogItem, bool lp_checked, playergroup lp_players);
void libNtve_gf_SetDialogItemEditorValue (int lp_dialogItem, string lp_value, playergroup lp_players);
fixed libNtve_gf_DialogItemValue (int lp_dialogItem, int lp_player);
fixed libNtve_gf_DialogItemMaximumValue (int lp_dialogItem, int lp_player);
fixed libNtve_gf_DialogItemMinimumValue (int lp_dialogItem, int lp_player);
bool libNtve_gf_DialogItemIsChecked (int lp_dialogItem, int lp_player);
string libNtve_gf_DialogItemEditValue (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemColor (int lp_dialogItem, color lp_color, playergroup lp_players);
void libNtve_gf_SetDialogItemStyle (int lp_dialogItem, string lp_style, playergroup lp_players);
void libNtve_gf_SetDialogItemTextWriteout (int lp_dialogItem, bool lp_writeout, playergroup lp_players);
void libNtve_gf_SetDialogItemTextWriteoutDuration (int lp_dialogItem, fixed lp_duration, playergroup lp_players);
void libNtve_gf_SetDialogItemTooltip (int lp_dialogItem, text lp_tooltip, playergroup lp_players);
color libNtve_gf_DialogItemColor (int lp_dialogItem, int lp_player);
string libNtve_gf_DialogItemStyle (int lp_dialogItem, int lp_player);
text libNtve_gf_DialogItemTooltip (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemImage (int lp_dialogItem, string lp_image, playergroup lp_players);
void libNtve_gf_SetDialogItemImage2 (int lp_dialogItem, string lp_image, playergroup lp_players);
void libNtve_gf_SetDialogItemImageType (int lp_dialogItem, int lp_imageType, playergroup lp_players);
void libNtve_gf_SetDialogItemBlendMode (int lp_dialogItem, int lp_blendMode, playergroup lp_players);
void libNtve_gf_SetDialogItemImageType2 (int lp_dialogItem, bool lp_tiled, playergroup lp_players);
string libNtve_gf_DialogItemImage (int lp_dialogItem, int lp_player);
int libNtve_gf_DialogItemImageType (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemFlash (int lp_dialogItem, string lp_flash, playergroup lp_players);
void libNtve_gf_SetDialogItemAchievement (int lp_dialogItem, string lp_achievement, playergroup lp_players);
void libNtve_gf_SetDialogItemRenderPriority (int lp_dialogItem, int lp_renderPriority, playergroup lp_players);
void libNtve_gf_DisplayScreenButton (int lp_screenButtonID, text lp_text, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, trigger lp_callback);
void libNtve_gf_HideScreenButton (bool lp_showHide, int lp_screenButtonID);
void libNtve_gf_FlashScreenButton (int lp_screenButtonID, fixed lp_flashTime, color lp_color1, color lp_color2);
void libNtve_gf_StopFlashingScreenButton (int lp_screenButtonID);
void libNtve_gf_SetScreenButtonBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType);
void libNtve_gf_SetScreenButtonFlashingBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType);
int libNtve_gf_ScreenButtonDialog (int lp_screenButtonID);
int libNtve_gf_ScreenButton (int lp_screenButtonID);
void libNtve_gf_DisplayScreenImage (int lp_screenImageID, string lp_image, int lp_blendMode, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY);
void libNtve_gf_HideScreenImage (bool lp_showHideOption, int lp_screenImageID);
void libNtve_gf_PulseScreenImage (int lp_screenImageID, fixed lp_period, fixed lp_transparency1, fixed lp_transparency2);
void libNtve_gf_StopPulsingScreenImage (int lp_screenImageID);
int libNtve_gf_ScreenImageDialog (int lp_screenImageID);
int libNtve_gf_ScreenImageDialogItem (int lp_screenImageID);
void libNtve_gf_CreateExplosionAtPoint (int lp_size, int lp_race, point lp_point);
bool libNtve_gf_PlayerCanCreateEffectAtPoint (int lp_player, string lp_effect, point lp_point);
bool libNtve_gf_PlayerCanCreateEffectOnUnit (int lp_player, string lp_effect, unit lp_target);
bool libNtve_gf_UnitCanCreateEffectAtPoint (unit lp_caster, string lp_effect, point lp_point);
bool libNtve_gf_UnitCanCreateEffectOnUnit (unit lp_caster, string lp_effect, unit lp_target);
fixed libNtve_gf_GamePlayTime (int lp_player);
void libNtve_gf_GameRemoveChargeRegen (string lp_inCharge);
void libNtve_gf_GameRemoveChargeUsed (string lp_inCharge);
void libNtve_gf_GameRemoveCooldown (string lp_inCooldown);
void libNtve_gf_PreloadModelObject (string lp_id, bool lp_queue);
void libNtve_gf_PreloadSoundObject (string lp_id, bool lp_queue);
void libNtve_gf_PreloadSoundtrack (string lp_soundtrack, bool lp_queue);
void libNtve_gf_PreloadUnit (string lp_unit, bool lp_queue);
void libNtve_gf_WaitForTimer (timer lp_timer, fixed lp_time, bool lp_waitType);
void libNtve_gf_ShowHideLeaderboard (int lp_board, bool lp_showHide, playergroup lp_players);
int libNtve_gf_ArithmeticIntClamp (int lp_value, int lp_min, int lp_max);
fixed libNtve_gf_ArithmeticRealClamp (fixed lp_value, fixed lp_min, fixed lp_max);
fixed libNtve_gf_RandomPercent ();
fixed libNtve_gf_RandomAngle ();
void libNtve_gf_CreatePingFacingAngle (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle);
void libNtve_gf_ClearAlliance (int lp_sourcePlayer, int lp_targetPlayer);
void libNtve_gf_MakeAlly (int lp_sourcePlayer, int lp_targetPlayer);
void libNtve_gf_SetAlliance (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libNtve_gf_SetAllianceOneWay (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libNtve_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance);
bool libNtve_gf_PlayerIsEnemy (int lp_sourcePlayer, int lp_targetPlayer, int lp_relation);
void libNtve_gf_PlayerRemoveChargeRegen (int lp_inPlayer, string lp_inCharge);
void libNtve_gf_PlayerRemoveChargeUsed (int lp_inPlayer, string lp_inCharge);
void libNtve_gf_PlayerRemoveCooldown (int lp_inPlayer, string lp_inCooldown);
void libNtve_gf_AddPlayerGroupToPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup);
void libNtve_gf_RemovePlayerGroupFromPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup);
point libNtve_gf_PointFromXYZ (fixed lp_x, fixed lp_y, fixed lp_y2);
point libNtve_gf_PointFromPositionAndAngle (point lp_point, fixed lp_angle);
point libNtve_gf_PointWithZOffset (point lp_p, fixed lp_z);
point libNtve_gf_PointOffsetTowardsPoint (point lp_sourcePoint, fixed lp_distance, point lp_targetPoint);
point libNtve_gf_RandomPointBetweenPoints (point lp_point1, point lp_point2);
int libNtve_gf_CinematicPortrait (int lp_position);
int libNtve_gf_FullscreenPortrait ();
void libNtve_gf_PortraitSetAnim (int lp_Portrait, string lp_Anim, string lp_identifier, int lp_flags, fixed lp_blendTime);
void libNtve_gf_PortraitSetTintColor (int lp_Portrait, color lp_color);
void libNtve_gf_ClearPortraitAnimation (int lp_portrait, string lp_identifier);
fixed libNtve_gf_WidthOfRegion (region lp_region);
fixed libNtve_gf_HeightOfRegion (region lp_region);
void libNtve_gf_StoreUnitSelection (int lp_forPlayer, int lp_storeOption);
void libNtve_gf_RestoreUnitSelection (int lp_forPlayer);
void libNtve_gf_SetAllSoundChannelVolumes (int lp_mode, playergroup lp_players, fixed lp_duration);
void libNtve_gf__StoryModeOnOffForPlayer (int lp_player, bool lp_onOff);
void libNtve_gf__StoryModeOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff);
void libNtve_gf__StoryModeHideUI (playergroup lp_players);
void libNtve_gf__StoryModeRestoreUI (playergroup lp_players);
void libNtve_gf_StoryMode (playergroup lp_players, bool lp_onOff);
bool libNtve_gf_PlayerInStoryMode (int lp_player);
void libNtve_gf_SetUpgradeLevelForPlayer (int lp_p, string lp_upgrade, int lp_levels);
void libNtve_gf_SendTransmissionSimple (transmissionsource lp_Source, int lp_Target, soundlink lp_Sound, fixed lp_Duration, int lp_DurationType, bool lp_WaitUntilDone);
void libNtve_gf_UIErrorMessage (playergroup lp_players, text lp_message, soundlink lp_sound);
int libNtve_gf__BB_PortraitBorderWidth (int lp_barID);
int libNtve_gf__BB_PortraitBorderHeight (int lp_barID);
int libNtve_gf__BB_PortraitWidth (int lp_barID);
int libNtve_gf__BB_PortraitHeight (int lp_barID);
int libNtve_gf__BB_TitleBarWidth (int lp_barID);
int libNtve_gf__BB_TitleBarHeight (int lp_barID);
int libNtve_gf__BB_HPBorderWidth (int lp_barID);
int libNtve_gf__BB_HPBorderHeight (int lp_barID);
int libNtve_gf__BB_HPBarWidth (int lp_barID);
int libNtve_gf__BB_HPBarHeight (int lp_barID);
int libNtve_gf__BB_HPBarCurrentWidth (int lp_barID);
text libNtve_gf__BB_HPBarFormatLabel (int lp_barID);
void libNtve_gf__BB_HPBarChange (int lp_barID);
void libNtve_gf_DisplayBossBar (int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players);
void libNtve_gf_SetBossBarMaximumValue (int lp_bossBarID, int lp_max, bool lp_refresh);
void libNtve_gf_SetBossBarCurrentValue (int lp_bossBarID, int lp_current, bool lp_refresh);
void libNtve_gf_SetBossBarBoss (int lp_bossBarID, unit lp_boss, bool lp_refresh);
void libNtve_gf_SetBossBarRace (int lp_bossBarID, int lp_race, bool lp_refresh);
void libNtve_gf_MoveBossBar (int lp_bossBarID, int lp_anchor, int lp_offsetX, int lp_offsetY);
void libNtve_gf_ShowHideBossBar (bool lp_showHide, int lp_bossBarID);
void libNtve_gf_RefreshBossBar (int lp_bossBarID);
void libNtve_gf__StoreGameUIVisibleStates (bool lp_storeRestore, playergroup lp_players);
void libNtve_gf_HideGameUI (bool lp_showHide, playergroup lp_players);
text libNtve_gf_FormatTipTitle (text lp_title, int lp_type);
void libNtve_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p);
void libNtve_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p);
unitgroup libNtve_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing);
void libNtve_gf_ReplaceUnit (unit lp_unit, string lp_unitType, int lp_options);
unit libNtve_gf_LastReplacedUnit ();
void libNtve_gf_RescueUnit (unit lp_unit, int lp_player, bool lp_changeColor);
void libNtve_gf_RescueUnit2 (unitgroup lp_unit, int lp_player, bool lp_changeColor);
bool libNtve_gf_UnitGroupIsDead (unitgroup lp_units);
void libNtve_gf_MakeUnitFacePoint (unit lp_unit, point lp_point, fixed lp_duration);
void libNtve_gf_PauseUnit (unit lp_unit, bool lp_pauseUnpause);
void libNtve_gf_ShowHideUnit (unit lp_unit, bool lp_showHide);
void libNtve_gf_ShareVisionofUnit (unit lp_unit, bool lp_shareUnshare, int lp_player);
bool libNtve_gf_UnitIsPaused (unit lp_u);
bool libNtve_gf_UnitIsHidden (unit lp_u);
bool libNtve_gf_UnitIsVisibleToPlayer (unit lp_unit, int lp_player);
bool libNtve_gf_UnitInRegion (unit lp_u, region lp_regioin);
void libNtve_gf_MakeUnitInvulnerable (unit lp_unit, bool lp_option);
void libNtve_gf_MakeUnitUncommandable (unit lp_unit, bool lp_option);
bool libNtve_gf_UnitIsInvulnerable (unit lp_u);
int libNtve_gf_UnitGetPropertyKills (unit lp_u, bool lp_current);
int libNtve_gf_UnitGetPropertyResources (unit lp_u, bool lp_current);
bool libNtve_gf_UnitMoverExists (string lp_unitType, string lp_mover);
void libNtve_gf_UnitSetVariation (unit lp_unit, string lp_model, int lp_percent, string lp_textures);
void libNtve_gf_ChangeUnitDamage (unit lp_unit, int lp_takeDeal, int lp_option);
unitfilter libNtve_gf_ConvertTargetFilterStringToUnitFilter (string lp_targetFilterString);
bool libNtve_gf_UnitIsInsideTransport (unit lp_u);
bool libNtve_gf_UnitCanAttackUnit (unit lp_u, unit lp_s);
bool libNtve_gf_UnitIsUnderConstruction (unit lp_u);
void libNtve_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge);
void libNtve_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge);
void libNtve_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge);
void libNtve_gf_UnitRemoveChargeUsed (unit lp_inUnit, string lp_inCharge);
void libNtve_gf_UnitBehaviorRemoveChargeUsed (unit lp_inUnit, string lp_inBehavior, string lp_inCharge);
void libNtve_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge);
void libNtve_gf_UnitRemoveCooldown (unit lp_inUnit, string lp_inCooldown);
void libNtve_gf_UnitAbilityRemoveCooldown (unit lp_inUnit, string lp_inAbil, string lp_inCooldown);
void libNtve_gf_UnitBehaviorRemoveCooldown (unit lp_inUnit, string lp_inBehavior, string lp_inCooldown);
unitgroup libNtve_gf_ConvertUnitToUnitGroup (unit lp_unit);
void libNtve_gf_AddUnitGroupToUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup);
void libNtve_gf_RemoveUnitGroupFromUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup);
unit libNtve_gf_ClosestUnitToPoint (point lp_point, unitgroup lp_group);
point libNtve_gf_CenterOfUnitGroup (unitgroup lp_unitGroup);
void libNtve_gf_ShowHidePlacementModels (bool lp_show);

// Trigger Declarations
trigger libNtve_gt_ScreenButtonClicked;
trigger libNtve_gt_FlashScreenButton;
trigger libNtve_gt_PulseScreenImage;
trigger libNtve_gt__MapInitialization;
trigger libNtve_gt__BB_BossHPChanged;

// Functions
actor libNtve_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Variable Initialization

    // Implementation
    lv_scope = ActorScopeFromUnit(lp_unit);
    ActorCreate(lv_scope, "SiteHosted", lp_attachPoint, "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorCreate(lv_scope, "ModelHosted", (lp_model), "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    return lv_a;
}

actorscope libNtve_gf_ActorScopeLastCreated () {
    // Implementation
    return ActorScopeFrom("::LastCreated");
}

actorscope libNtve_gf_ActorScopeLastCreatedSend () {
    // Implementation
    return ActorScopeFrom("::LastCreated");
}

actor libNtve_gf_ActorLastCreated () {
    // Implementation
    return ActorFrom("::LastCreated");
}

actor libNtve_gf_ActorLastCreatedSend () {
    // Implementation
    return ActorFrom("::LastCreated");
}

actor libNtve_gf_AttachActorToUnit (unit lp_unit, string lp_actor, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Variable Initialization

    // Implementation
    lv_scope = ActorScopeFromUnit(lp_unit);
    ActorCreate(lv_scope, "SiteHosted", lp_attachPoint, "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorSend(lv_a, "RefSet ::scope.hostsite ::Self");
    ActorCreate(lv_scope, lp_actor, "", "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorSend(lv_a, "RefSet ::Host ::scope.hostsite");
    return lv_a;
}

actor libNtve_gf_CreateActorAtPoint (string lp_actor, point lp_position) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    ActorCreate(null, lp_actor, null, null, null);
    lv_a = libNtve_gf_ActorLastCreated();
    ActorSend(lv_a, libNtve_gf_SetPositionH(PointGetX(lp_position), PointGetY(lp_position), PointGetHeight(lp_position)));
    return lv_a;
}

actor libNtve_gf_CreateModelAtPoint (string lp_model, point lp_position) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    ActorCreate(null, "TriggerModel", (lp_model), null, "null");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorSend(lv_a, libNtve_gf_ActorMsg1("SetPositionH", libNtve_gf_ConvertXYToString(PointGetX(lp_position), PointGetY(lp_position))));
    ActorSend(lv_a, libNtve_gf_SetHeight(PointGetHeight(lp_position)));
    return lv_a;
}

void libNtve_gf_SendActorMessageToUnit (unit lp_unit, string lp_message) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), lp_message);
}

void libNtve_gf_ActorRegionSendSimple (actor lp_region, string lp_message) {
    // Implementation
    ActorRegionSend(lp_region, c_actorIntersectAgainstRadiusContact, lp_message, null, null);
}

void libNtve_gf_SendActorMessageToGameRegion (region lp_region, string lp_message) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, null, null);
    ActorSend(lv_actorRegion, "Destroy");
}

void libNtve_gf_SendActorMessageToGameRegionWithFilters (region lp_region, int lp_intersectType, string lp_message, string lp_classFilters, string lp_terms) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, lp_intersectType, lp_message, lp_classFilters, lp_terms);
    ActorSend(lv_actorRegion, "Destroy");
}

string libNtve_gf_ActorMsg1 (string lp_msgName, string lp_param1) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "}"));
}

string libNtve_gf_ActorMsg2 (string lp_msgName, string lp_param1, string lp_param2) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "}"));
}

string libNtve_gf_ActorMsg3 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "} {" + lp_param3 + "}"));
}

string libNtve_gf_ActorMsg4 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3, string lp_param4) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "} {" + lp_param3 + "} {" + lp_param4 + "}"));
}

string libNtve_gf_ActionDamage () {
    // Implementation
    return "ActionDamage";
}

string libNtve_gf_ActionImpact () {
    // Implementation
    return "ActionImpact";
}

string libNtve_gf_AliasAdd (string lp_alias) {
    // Implementation
    return libNtve_gf_ActorMsg1("AliasAdd", lp_alias);
}

string libNtve_gf_AliasRemove (string lp_alias) {
    // Implementation
    return libNtve_gf_ActorMsg1("AliasRemove", lp_alias);
}

string libNtve_gf_AnimBaselineStart () {
    // Implementation
    return "AnimBaselineStart";
}

string libNtve_gf_AnimBaselineStop () {
    // Implementation
    return "AnimBaselineStop";
}

string libNtve_gf_AnimBlendTimeApply (fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg1("AnimBlendTimeApply", FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimBlendTimeRemove () {
    // Implementation
    return "AnimBlendTimeRemove";
}

string libNtve_gf_AnimClear (string lp_animName, fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimClear", lp_animName, FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimClearAllBut (string lp_animName, fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimClearAllBut", lp_animName, FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimDumpDB () {
    // Implementation
    return "AnimDumpDB";
}

string libNtve_gf_AnimGroupRemoveAll () {
    // Implementation
    return "AnimGroupRemoveAll";
}

string libNtve_gf_AnimPlaySequence (string lp_animName, string lp_sequenceList) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimPlaySequence", lp_animName, lp_sequenceList);
}

string libNtve_gf_AnimSetCompletion (string lp_animName, fixed lp_percent) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetCompletion", lp_animName, FixedToString(lp_percent, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetDuration (string lp_animName, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetCompletion", lp_animName, FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetPaused (bool lp_pause) {
    // Implementation
    if ((lp_pause == true)) {
        return libNtve_gf_ActorMsg1("AnimSetPaused", "true");
    }
    else {
        return libNtve_gf_ActorMsg1("AnimSetPaused", "false");
    }
}

string libNtve_gf_AnimSetTime (string lp_animName, fixed lp_time, bool lp_scaled) {
    // Implementation
    return libNtve_gf_ActorMsg3("AnimSetTime", lp_animName, FixedToString(lp_time, c_fixedPrecisionAny), libNtve_gf_ConvertBooleanToString(lp_scaled));
}

string libNtve_gf_AnimSetTimeScale (string lp_animName, fixed lp_scale) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetTimeScale", lp_animName, FixedToString(lp_scale, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetTimeScaleGlobal (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("AnimSetTimeScaleGlobal", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_AttachSetBearings (string lp_attachMethods, string lp_bearings) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetBearings", lp_attachMethods, lp_bearings);
}

string libNtve_gf_AttachSetBearingsFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetBearingsFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_AttachSetPosition (string lp_attachMethods, string lp_position) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetPosition", lp_attachMethods, lp_position);
}

string libNtve_gf_AttachSetPositionFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetPositionFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_AttachSetRotation (string lp_attachMethods, fixed lp_rotation) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetRotation", lp_attachMethods, FixedToString(lp_rotation, c_fixedPrecisionAny));
}

string libNtve_gf_AttachSetRotationFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetRotationFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_Create (string lp_actor, string lp_content) {
    // Implementation
    return libNtve_gf_ActorMsg2("Create", lp_actor, lp_content);
}

string libNtve_gf_CreateCopy (string lp_createKey, string lp_sourceKey) {
    // Implementation
    return libNtve_gf_ActorMsg2("CreateCopy", (lp_createKey), (lp_sourceKey));
}

string libNtve_gf_DeathCustomize (string lp_subname) {
    // Implementation
    return libNtve_gf_ActorMsg1("DeathCustomize", lp_subname);
}

string libNtve_gf_Destroy () {
    // Implementation
    return "Destroy";
}

string libNtve_gf_HostSiteOpsSet (string lp_hostName, string lp_ops, int lp_holdPosition, int lp_holdRotation) {
    // Implementation
    return libNtve_gf_ActorMsg4("HostSiteOpsSet", lp_hostName, lp_ops, IntToString(lp_holdPosition), IntToString(lp_holdRotation));
}

string libNtve_gf_ListAdd (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("ListAdd", lp_actorRefName);
}

string libNtve_gf_ListRemove (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("ListRemove", lp_actorRefName);
}

string libNtve_gf_MissileTentacleReturn () {
    // Implementation
    return "MissileTentacleReturn";
}

string libNtve_gf_ModelEventSuppress (int lp_value, string lp_event) {
    // Implementation
    return libNtve_gf_ActorMsg2("ModelEventSuppress", lp_event, IntToString(lp_value));
}

string libNtve_gf_ModelSwap (string lp_model, int lp_variation) {
    // Implementation
    return libNtve_gf_ActorMsg2("ModelSwap", (lp_model), IntToString(lp_variation));
}

string libNtve_gf_MoverSetAcceleration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetAcceleration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDeceleration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDeceleration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDestination2D (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestination2D", libNtve_gf_ConvertXYToString(lp_x, lp_y));
}

string libNtve_gf_MoverSetDestinationFrom (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationFrom", lp_actorRefName);
}

string libNtve_gf_MoverSetDestinationH (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationH", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDestinationZ (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationZ", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeed (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeed", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeedMax (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeedMax", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeedFromDuration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeedFromDuration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverMove () {
    // Implementation
    return "MoverMove";
}

string libNtve_gf_MoverStop () {
    // Implementation
    return "MoverStop";
}

string libNtve_gf_MoverStopNow () {
    // Implementation
    return "MoverStopNow";
}

string libNtve_gf_MultiplyScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("MultiplyScale", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny) + "," + FixedToString(lp_z, c_fixedPrecisionAny)), FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_Print (string lp_string) {
    // Implementation
    return libNtve_gf_ActorMsg1("Print", lp_string);
}

string libNtve_gf_QueryPersistent (string lp_enterResponseActor, string lp_leaveResponeActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryPersistent", (lp_enterResponseActor), (lp_leaveResponeActor));
}

string libNtve_gf_QueryRadius (fixed lp_radius, string lp_responseActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryRegion", FixedToString(lp_radius, c_fixedPrecisionAny), lp_responseActor);
}

string libNtve_gf_QueryRegion (string lp_regionActor, string lp_responseActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryRadius", lp_regionActor, lp_responseActor);
}

string libNtve_gf_RefClear (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefClear", lp_actorRefName);
}

string libNtve_gf_RefDestroy (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefDestroy", lp_actorRefName);
}

string libNtve_gf_RefDump (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefDump", lp_actorRefName);
}

string libNtve_gf_RefNotify (string lp_actorRefName, string lp_subName) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSet", lp_actorRefName, lp_subName);
}

string libNtve_gf_RefSet (string lp_actorRefName, string lp_refSource) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSet", lp_actorRefName, lp_refSource);
}

string libNtve_gf_RefSetFromMsg (string lp_actorRefName, string lp_message) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSetFromMsg", lp_actorRefName, lp_message);
}

string libNtve_gf_RefSetFromActor (string lp_actorRefName, string lp_refPrimary, string lp_refSecondary) {
    // Implementation
    return libNtve_gf_ActorMsg3("RefSetFromActor", lp_actorRefName, lp_refPrimary, lp_refSecondary);
}

string libNtve_gf_RefSetRefreshName (string lp_actorRefName, string lp_refreshName) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSetRefreshName", lp_actorRefName, lp_refreshName);
}

string libNtve_gf_SetBearings (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearings", ("'" + libNtve_gf_ConvertBearingsToString(lp_positionX, lp_positionY, lp_positionZ, lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ) + "'"));
}

string libNtve_gf_SetBearingsFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearingsFrom", lp_actor);
}

string libNtve_gf_SetBearingsH (fixed lp_positionX, fixed lp_positionY, fixed lp_height, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearingsH", (FixedToString(lp_positionX, c_fixedPrecisionAny) + "," + FixedToString(lp_positionY, c_fixedPrecisionAny) + " " + FixedToString(lp_height, c_fixedPrecisionAny) + " '" + libNtve_gf_Convert3DVectorToString(lp_forwardX, lp_forwardY, lp_forwardZ) + " " + libNtve_gf_Convert3DVectorToString(lp_upX, lp_upY, lp_upZ) + "'"));
}

string libNtve_gf_SetFacing (fixed lp_facing) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetFacing", FixedToString(lp_facing, c_fixedPrecisionAny));
}

string libNtve_gf_SetHeight (fixed lp_height) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetHeight", FixedToString(lp_height, c_fixedPrecisionAny));
}

string libNtve_gf_SetOpacity (fixed lp_opacity, fixed lp_blendDuration) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetOpacity", FixedToString(lp_opacity, c_fixedPrecisionAny), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
}

string libNtve_gf_SetPosition (fixed lp_x, fixed lp_y, fixed lp_z) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
}

string libNtve_gf_SetPosition2D (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition2D", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)));
}

string libNtve_gf_SetPosition2DH (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition2DH", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)));
}

string libNtve_gf_SetPositionFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPositionFrom", lp_actor);
}

string libNtve_gf_SetPositionH (fixed lp_x, fixed lp_y, fixed lp_height) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetPositionH", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)), FixedToString(lp_height, c_fixedPrecisionAny));
}

string libNtve_gf_SetRenderToTextureEnabled (bool lp_enabled) {
    // Implementation
    if ((lp_enabled == true)) {
        return libNtve_gf_ActorMsg1("SetRenderToTextureEnabled", "1");
    }
    else {
        return libNtve_gf_ActorMsg1("SetRenderToTextureEnabled", "0");
    }
}

string libNtve_gf_SetRotation (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetRotation", libNtve_gf_Convert3DRotationToString(lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ));
}

string libNtve_gf_SetRotationFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetRotationFrom", lp_actor);
}

string libNtve_gf_SetScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration) {
    // Implementation
    if ((lp_blendDuration > 0.0)) {
        return libNtve_gf_ActorMsg2("SetScale", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
    }
    else {
        return libNtve_gf_ActorMsg1("SetScale", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
    }
}

string libNtve_gf_SetScaleAbsolute (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration) {
    // Implementation
    if ((lp_blendDuration > 0.0)) {
        return libNtve_gf_ActorMsg2("SetScaleAbsolute", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
    }
    else {
        return libNtve_gf_ActorMsg1("SetScaleAbsolute", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
    }
}

string libNtve_gf_SetTeamColor (color lp_diffuseColor, color lp_emissiveColor) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetTeamColor", libNtve_gf_ConvertColorToString(lp_diffuseColor), libNtve_gf_ConvertColorToString(lp_emissiveColor));
}

string libNtve_gf_SetLocalTintColor (color lp_color) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetLocalTintColor", libNtve_gf_ConvertColorToString(lp_color));
}

string libNtve_gf_SetTintColor (color lp_color, fixed lp_hdr, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetTintColor", (libNtve_gf_ConvertColorToString(lp_color) + " " + FixedToString(lp_hdr, c_fixedPrecisionAny)), FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_SetVisibility (bool lp_visible) {
    // Implementation
    if ((lp_visible == true)) {
        return libNtve_gf_ActorMsg1("SetVisibility", "1");
    }
    else {
        return libNtve_gf_ActorMsg1("SetVisibility", "0");
    }
}

string libNtve_gf_SetWalkAnimMoveSpeed (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetWalkAnimMoveSpeed", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_SetZ (fixed lp_z) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetZ", FixedToString(lp_z, c_fixedPrecisionAny));
}

string libNtve_gf_Signal (string lp_signal) {
    // Implementation
    return libNtve_gf_ActorMsg1("Signal", lp_signal);
}

string libNtve_gf_SoundAddDSP (string lp_effect) {
    // Implementation
    return libNtve_gf_ActorMsg1("SoundAddDSP", lp_effect);
}

string libNtve_gf_SoundSetMuted (bool lp_mutedState, bool lp_fade) {
    // Implementation
    return libNtve_gf_ActorMsg2("SoundSetMuted", IntToString(BoolToInt(lp_mutedState)), IntToString(BoolToInt(lp_fade)));
}

string libNtve_gf_SoundSetOffset (int lp_offset) {
    // Implementation
    return libNtve_gf_ActorMsg1("SoundSetOffset", IntToString(lp_offset));
}

string libNtve_gf_SoundSetPaused (bool lp_pausedState, bool lp_fade) {
    // Implementation
    return libNtve_gf_ActorMsg2("SoundSetPaused", IntToString(BoolToInt(lp_pausedState)), IntToString(BoolToInt(lp_fade)));
}

string libNtve_gf_StatusDecrement (string lp_statusVariable) {
    // Implementation
    return libNtve_gf_ActorMsg1("StatusDecrement", lp_statusVariable);
}

string libNtve_gf_StatusIncrement (string lp_statusVariable) {
    // Implementation
    return libNtve_gf_ActorMsg1("StatusIncrement", lp_statusVariable);
}

string libNtve_gf_TextureDump () {
    // Implementation
    return "TextureDump";
}

string libNtve_gf_TextureDumpDB () {
    // Implementation
    return "TextureDumpDB";
}

string libNtve_gf_TextureGroupApply (string lp_textureProps) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureGroupApply", lp_textureProps);
}

string libNtve_gf_TextureGroupRemove (string lp_textureProps) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureGroupRemove", lp_textureProps);
}

string libNtve_gf_TextureSelectByID (string lp_texture) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureSelectById", lp_texture);
}

string libNtve_gf_TextureVideoSetFrame (string lp_texture, int lp_frame) {
    // Implementation
    return MakeMsgTextureVideoSetFrame(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_frame);
}

string libNtve_gf_TextureVideoSetPaused (string lp_texture, bool lp_pauseState) {
    // Implementation
    return MakeMsgTextureVideoSetPaused(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_pauseState);
}

string libNtve_gf_TextureVideoSetTime (string lp_texture, fixed lp_time) {
    // Implementation
    return MakeMsgTextureVideoSetTime(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_time);
}

string libNtve_gf_TextureVideoStop (string lp_texture) {
    // Implementation
    return MakeMsgTextureVideoStop(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture));
}

string libNtve_gf_TextureVideoStopAll () {
    // Implementation
    return ("TextureVideoStopAll");
}

string libNtve_gf_TimerSet (fixed lp_duration, string lp_timerName) {
    // Implementation
    return libNtve_gf_ActorMsg2("TimerSet", FixedToString(lp_duration, c_fixedPrecisionAny), lp_timerName);
}

string libNtve_gf_TimerKill (string lp_timerName) {
    // Implementation
    return libNtve_gf_ActorMsg1("TimerKill", lp_timerName);
}

void libNtve_gf_KillModel (actor lp_model) {
    // Implementation
    ActorSend(lp_model, "AnimBracketStop BSD");
}

void libNtve_gf_RemoveDoodadsinRegion (region lp_target, string lp_doodadType) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_animTermsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_animTermsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_animTermsString = ("ScopeContains " + (lp_doodadType));
        lv_animTermsString = (lv_animTermsString + "; ");
    }
    else {
    }
    lv_animTermsString = (lv_animTermsString + "!HasStatus DoodadKilled");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Doodad", lv_animTermsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_RemoveDeathModelsinRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Model", "ScopeContains _DeathModel");
    ActorWorldParticleFXDestroy();
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

actor libNtve_gf_LookAtTargetFromPointWithZOffset (point lp_point, fixed lp_z) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(lp_z));
    return libNtve_gf_ActorLastCreated();
}

actor libNtve_gf_LookAtTargetFromUnitAttachPoint (unit lp_unit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_unit, "Invisible", lp_attachPoint);
    return libNtve_gf_ActorLastCreated();
}

void libNtve_gf_CreateLookAtTargetAtPoint (point lp_point) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
}

void libNtve_gf_CreateLookAtTargetAtUnitAttachPoint (unit lp_unit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_unit, "Invisible", lp_attachPoint);
}

void libNtve_gf_SimpleLookAtStart (unit lp_unit, string lp_type, actor lp_lookAtTarget) {
    // Implementation
    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lp_unit), lp_type, lp_lookAtTarget);
}

void libNtve_gf_MakeUnitLookAtPoint (unit lp_unit, string lp_type, point lp_point) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
    libNtve_gf_SimpleLookAtStart(lp_unit, lp_type, libNtve_gf_ActorLastCreated());
}

void libNtve_gf_MakeUnitLookAtUnit (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_lookAtTargetUnit, "Invisible", lp_attachPoint);
    libNtve_gf_SimpleLookAtStart(lp_unit, lp_type, libNtve_gf_ActorLastCreated());
}

void libNtve_gf_SimpleLookAtStop (unit lp_unit, string lp_type) {
    // Implementation
    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(lp_unit), lp_type);
}

actor libNtve_gf_MainActorofUnit (unit lp_unit) {
    // Implementation
    return ActorFromScope(ActorScopeFromUnit(lp_unit), "::Main");
}

void libNtve_gf_MakeModelFaceAngle (actor lp_model, fixed lp_angle) {
    // Implementation
    ActorSend(lp_model, libNtve_gf_SetRotation(Cos(lp_angle), Sin(lp_angle), 0, 0, 0, 1.0));
}

void libNtve_gf_PlayMovieTextureOnUnitActor (unit lp_unit, string lp_movieTexture) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_ActorMsg1("TextureSelectById", (lp_movieTexture)));
}

void libNtve_gf_StopAllVideoTexturesOnUnit (unit lp_unit) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "TextureVideoStopAll");
}

int libNtve_gf_DifficultyValueInt (int lp_easy, int lp_normal, int lp_advanced, int lp_expert) {
    int auto25C665AE_val;

    // Implementation
    auto25C665AE_val = PlayerDifficulty(1);
    if (auto25C665AE_val == 1) {
        return lp_easy;
    }
    else if (auto25C665AE_val == 2) {
        return lp_normal;
    }
    else if (auto25C665AE_val == 3) {
        return lp_advanced;
    }
    else if (auto25C665AE_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

fixed libNtve_gf_DifficultyValueFixed (fixed lp_easy, fixed lp_normal, fixed lp_advanced, fixed lp_expert) {
    int auto7E83D6CB_val;

    // Implementation
    auto7E83D6CB_val = PlayerDifficulty(1);
    if (auto7E83D6CB_val == 1) {
        return lp_easy;
    }
    else if (auto7E83D6CB_val == 2) {
        return lp_normal;
    }
    else if (auto7E83D6CB_val == 3) {
        return lp_advanced;
    }
    else if (auto7E83D6CB_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

string libNtve_gf_DifficultyValueUnitType (string lp_easy, string lp_normal, string lp_advanced, string lp_expert) {
    int auto6A030EA6_val;

    // Implementation
    auto6A030EA6_val = PlayerDifficulty(1);
    if (auto6A030EA6_val == 1) {
        return lp_easy;
    }
    else if (auto6A030EA6_val == 2) {
        return lp_normal;
    }
    else if (auto6A030EA6_val == 3) {
        return lp_advanced;
    }
    else if (auto6A030EA6_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

void libNtve_gf_AICast (unit lp_unit, order lp_order) {
    // Implementation
    AICast(lp_unit, lp_order, c_noMarker, c_castHold);
}

void libNtve_gf_DeclareNextTown (int lp_player, point lp_center) {
    // Implementation
    AIDeclareTown(lp_player, AIGetNextUnusedTownSlot(lp_player), lp_center);
}

void libNtve_gf_SetTacticalAIRange (int lp_player, string lp_unitType, int lp_distance) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, (lp_unitType), "TacticalAIRange", lp_player, IntToString(lp_distance));
}

void libNtve_gf_SetTacticalAIThink (int lp_player, string lp_unitType, string lp_target, bool lp_isNative) {
    // Variable Declarations
    string lv_aIThinkTempStr;

    // Variable Initialization
    lv_aIThinkTempStr = "";

    // Implementation
    if ((lp_isNative == true)) {
        lv_aIThinkTempStr = lp_target;
    }
    else {
        lv_aIThinkTempStr = ("gf_" + lp_target);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, (lp_unitType), "TacticalAIThink", lp_player, lv_aIThinkTempStr);
}

void libNtve_gf_PlayAnimation (actor lp_target, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime) {
    // Variable Declarations
    string lv_animationString;
    bool lv_fullMatchFlag;
    bool lv_playForeverFlag;
    bool lv_nonLoopingFlag;
    string lv_flagString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_animationString = "";
    lv_fullMatchFlag = false;
    lv_playForeverFlag = false;
    lv_nonLoopingFlag = false;
    lv_flagString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_animationString = StringReplaceWord(lp_animation, " ", ",", 0, c_stringCase);
    lv_fullMatchFlag = (lp_flags & c_animFlagFullMatch) == c_animFlagFullMatch;
    lv_playForeverFlag = (lp_flags & c_animFlagPlayForever) == c_animFlagPlayForever;
    lv_nonLoopingFlag = (lp_flags & c_animFlagNonLooping) == c_animFlagNonLooping;
    if ((lv_fullMatchFlag == true)) {
        lv_flagString = (lv_flagString + "FullMatch");
    }
    else {
    }
    if ((lv_playForeverFlag == true)) {
        if ((lv_fullMatchFlag == true)) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "PlayForever");
    }
    else {
    }
    if ((lv_nonLoopingFlag == true)) {
        if (((lv_fullMatchFlag == true) || (lv_playForeverFlag == true))) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "NonLooping");
    }
    else {
    }
    if ((lv_flagString == "")) {
        lv_flagString = "0";
    }
    else {
    }
    lv_actorMessageString = ("AnimPlay " + lp_identifier + " " + lv_animationString + " " + lv_flagString + " " + FixedToString(lp_blendTime, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime) {
    // Variable Declarations
    string lv_animationString;
    bool lv_fullMatchFlag;
    bool lv_playForeverFlag;
    bool lv_nonLoopingFlag;
    string lv_flagString;
    string lv_actorMessageString;
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_animationString = "";
    lv_fullMatchFlag = false;
    lv_playForeverFlag = false;
    lv_nonLoopingFlag = false;
    lv_flagString = "";
    lv_actorMessageString = "";
    lv_actorRegion = null;
    lv_termsString = "";

    // Implementation
    lv_animationString = StringReplaceWord(lp_animation, " ", ",", 0, c_stringCase);
    lv_fullMatchFlag = (lp_flags & c_animFlagFullMatch) == c_animFlagFullMatch;
    lv_playForeverFlag = (lp_flags & c_animFlagPlayForever) == c_animFlagPlayForever;
    lv_nonLoopingFlag = (lp_flags & c_animFlagNonLooping) == c_animFlagNonLooping;
    if ((lv_fullMatchFlag == true)) {
        lv_flagString = (lv_flagString + "FullMatch");
    }
    else {
    }
    if ((lv_playForeverFlag == true)) {
        if ((lv_fullMatchFlag == true)) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "PlayForever");
    }
    else {
    }
    if ((lv_nonLoopingFlag == true)) {
        if (((lv_fullMatchFlag == true) || (lv_playForeverFlag == true))) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "NonLooping");
    }
    else {
    }
    if ((lv_flagString == "")) {
        lv_flagString = "0";
    }
    else {
    }
    lv_actorMessageString = ("AnimPlay " + lp_identifier + " " + lv_animationString + " " + lv_flagString + " " + FixedToString(lp_blendTime, c_fixedPrecisionAny));
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + lp_doodadType);
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, (lv_actorMessageString), "Doodad", lv_termsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_KillDoodadsInRegion (region lp_target, string lp_doodadType) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_animTermsString;
    string lv_statusTermsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_animTermsString = "";
    lv_statusTermsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_animTermsString = ("ScopeContains " + (lp_doodadType));
        lv_statusTermsString = lv_animTermsString;
        lv_animTermsString = (lv_animTermsString + "; ");
    }
    else {
    }
    lv_animTermsString = (lv_animTermsString + "!HasStatus DoodadKilled");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "AnimPlay Death Death PlayForever,NonLooping", "Doodad", lv_animTermsString);
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "StatusIncrement DoodadKilled", "Doodad", lv_statusTermsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_ClearAnimation (actor lp_target, string lp_identifier) {
    // Implementation
    ActorSend(lp_target, (("AnimClear " + lp_identifier)));
}

void libNtve_gf_ClearAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_termsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + lp_doodadType);
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, libNtve_gf_AnimClear(lp_identifier, -1.0), "Doodad", lv_termsString);
}

void libNtve_gf_TurnAnimationPropertiesOn (actor lp_target, string lp_prop) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_actorMessageString = ("AnimGroupApply " + lv_propertiesString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut (actor lp_target, string lp_prop, string lp_blendInAnimation, string lp_blendOutAnimation) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_blendInString;
    string lv_blendOutString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_blendInString = "";
    lv_blendOutString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_blendInString = (lv_propertiesString + "," + StringReplaceWord(lp_blendInAnimation, " ", ",", 0, c_stringCase));
    lv_blendOutString = (lv_propertiesString + "," + StringReplaceWord(lp_blendOutAnimation, " ", ",", 0, c_stringCase));
    lv_actorMessageString = ("AnimGroupApply " + lv_propertiesString + " " + lv_blendInString + " " + lv_blendOutString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAnimationPropertiesOff (actor lp_target, string lp_prop) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_actorMessageString = ("AnimGroupRemove " + lv_propertiesString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAllAnimationPropertiesOff (actor lp_target) {
    // Implementation
    ActorSend(lp_target, "AnimGroupRemoveAll");
}

void libNtve_gf_SetAnimationTime (actor lp_target, string lp_identifier, fixed lp_time, bool lp_scaled) {
    // Variable Declarations
    string lv_scaledOption;
    string lv_actorMessageString;

    // Variable Initialization
    lv_scaledOption = "";
    lv_actorMessageString = "";

    // Implementation
    if ((lp_scaled == false)) {
        lv_scaledOption = "0";
    }
    else {
        lv_scaledOption = "1";
    }
    lv_actorMessageString = ("AnimSetTime " + lp_identifier + " " + FixedToString(lp_time, c_fixedPrecisionAny) + " " + lv_scaledOption);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationTimeScale (actor lp_target, string lp_identifier, fixed lp_scale) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetTimeScale " + lp_identifier + " " + FixedToString(lp_scale, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationCompletion (actor lp_target, string lp_identifier, fixed lp_percent) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetCompletion " + lp_identifier + " " + FixedToString(lp_percent, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationDuration (actor lp_target, string lp_identifier, fixed lp_duration) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetDuration " + lp_identifier + " " + FixedToString(lp_duration, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SwooshCamera (int lp_player, fixed lp_distance1, fixed lp_distance2, point lp_location, fixed lp_duration) {
    // Implementation
    CameraPan(lp_player, lp_location, 0.0, 0, 10, false);
    CameraSetValue(lp_player, c_cameraValueDistance, lp_distance1, 0.0, 0, 10);
    CameraSetValue(lp_player, c_cameraValueDistance, lp_distance2, lp_duration, 0, 10);
}

camerainfo libNtve_gf_CopyOfCameraObject (camerainfo lp_cam) {
    // Variable Declarations
    camerainfo lv_newCam;

    // Variable Initialization
    lv_newCam = CameraInfoDefault();

    // Implementation
    CameraInfoSetTarget(lv_newCam, CameraInfoGetTarget(lp_cam));
    CameraInfoSetValue(lv_newCam, c_cameraValuePitch, CameraInfoGetValue(lp_cam, c_cameraValuePitch));
    CameraInfoSetValue(lv_newCam, c_cameraValueDistance, CameraInfoGetValue(lp_cam, c_cameraValueDistance));
    CameraInfoSetValue(lv_newCam, c_cameraValueFarClip, CameraInfoGetValue(lp_cam, c_cameraValueFarClip));
    CameraInfoSetValue(lv_newCam, c_cameraValueFieldOfView, CameraInfoGetValue(lp_cam, c_cameraValueFieldOfView));
    CameraInfoSetValue(lv_newCam, c_cameraValueHeightOffset, CameraInfoGetValue(lp_cam, c_cameraValueHeightOffset));
    CameraInfoSetValue(lv_newCam, c_cameraValueNearClip, CameraInfoGetValue(lp_cam, c_cameraValueNearClip));
    CameraInfoSetValue(lv_newCam, c_cameraValueRoll, CameraInfoGetValue(lp_cam, c_cameraValueRoll));
    CameraInfoSetValue(lv_newCam, c_cameraValueYaw, CameraInfoGetValue(lp_cam, c_cameraValueYaw));
    CameraInfoSetValue(lv_newCam, c_cameraValueShadowClip, CameraInfoGetValue(lp_cam, c_cameraValueShadowClip));
    return lv_newCam;
}

fixed libNtve_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        lv_field = ("Cost." + lp_costType);
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        lv_field = ("Cost.Vital[" + lp_costType + "]");
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, lv_field, 1);
    return StringToFixed(lv_value);
}

void libNtve_gf__CineModeTurnOnOffForPlayer (int lp_player, bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        PlayerGroupAdd(libNtve_gv__PlayersInCineMode, lp_player);
        TimerPause(libNtve_gv__GameTimer[lp_player], true);
    }
    else {
        PlayerGroupRemove(libNtve_gv__PlayersInCineMode, lp_player);
        TimerPause(libNtve_gv__GameTimer[lp_player], false);
    }
}

void libNtve_gf__CineModeTurnOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff) {
    playergroup autoB2419D0B_g;
    int autoB2419D0B_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    autoB2419D0B_g = lp_players;
    autoB2419D0B_p = 1;
    while (autoB2419D0B_p <= PlayerGroupCount(autoB2419D0B_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(autoB2419D0B_g, autoB2419D0B_p);
        libNtve_gf__CineModeTurnOnOffForPlayer(lv_pickedPlayer, lp_onOff);
        if (lv_pickedPlayer == PlayerGroupPlayer(autoB2419D0B_g, autoB2419D0B_p)) {
            autoB2419D0B_p = autoB2419D0B_p + 1;
        }
    }
}

bool libNtve_gf__CineModeFogSetting (int lp_player) {
    // Implementation
    return libNtve_gv__CineModeSavedSettingFog[lp_player];
}

void libNtve_gf__CineModeChangeFogSettingForPlayer (int lp_player, bool lp_fog) {
    // Implementation
    libNtve_gv__CineModeSavedSettingFog[lp_player] = lp_fog;
}

void libNtve_gf__CineModeChangeFogSettingForPlayerGroup (playergroup lp_players, bool lp_fog) {
    playergroup auto5A0494EE_g;
    int auto5A0494EE_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto5A0494EE_g = lp_players;
    auto5A0494EE_p = 1;
    while (auto5A0494EE_p <= PlayerGroupCount(auto5A0494EE_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto5A0494EE_g, auto5A0494EE_p);
        libNtve_gf__CineModeChangeFogSettingForPlayer(lv_pickedPlayer, lp_fog);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto5A0494EE_g, auto5A0494EE_p)) {
            auto5A0494EE_p = auto5A0494EE_p + 1;
        }
    }
}

bool libNtve_gf__CineModeMaskSetting (int lp_player) {
    // Implementation
    return libNtve_gv__CineModeSavedSettingMask[lp_player];
}

void libNtve_gf__CineModeChangeMaskSettingForPlayer (int lp_player, bool lp_mask) {
    // Implementation
    libNtve_gv__CineModeSavedSettingMask[lp_player] = lp_mask;
}

void libNtve_gf__CineModeChangeMaskSettingForPlayerGroup (playergroup lp_players, bool lp_mask) {
    playergroup autoBFF267B3_g;
    int autoBFF267B3_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    autoBFF267B3_g = lp_players;
    autoBFF267B3_p = 1;
    while (autoBFF267B3_p <= PlayerGroupCount(autoBFF267B3_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(autoBFF267B3_g, autoBFF267B3_p);
        libNtve_gf__CineModeChangeMaskSettingForPlayer(lv_pickedPlayer, lp_mask);
        if (lv_pickedPlayer == PlayerGroupPlayer(autoBFF267B3_g, autoBFF267B3_p)) {
            autoBFF267B3_p = autoBFF267B3_p + 1;
        }
    }
}

void libNtve_gf__CineModeHideUI (playergroup lp_players) {
    // Variable Declarations
    int lv_uIFrame;

    // Variable Initialization
    lv_uIFrame = c_syncFrameTypeMenuBar;

    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
    lv_uIFrame = c_syncFrameTypeFirst;
    while (lv_uIFrame <= c_syncFrameTypeLast) {
        if (((GameMapIsBlizzard() == true) || (lv_uIFrame != c_syncFrameTypeBattleUI))) {
            UISetFrameVisible(lp_players, lv_uIFrame, false);
        }
        else {
        }
        lv_uIFrame = lv_uIFrame + 1;
    }
}

void libNtve_gf__CineModeRestoreUI (playergroup lp_players) {
    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
}

void libNtve_gf_CinematicMode (bool lp_onOff, playergroup lp_players, fixed lp_duration) {
    playergroup auto0ACAB445_g;
    int auto0ACAB445_p;
    playergroup autoA2450245_g;
    int autoA2450245_p;
    playergroup auto451C348A_g;
    int auto451C348A_p;
    playergroup auto10906981_g;
    int auto10906981_p;
    playergroup auto1544564B_g;
    int auto1544564B_p;
    playergroup auto74C9138D_g;
    int auto74C9138D_p;
    playergroup autoCF5F6C0D_g;
    int autoCF5F6C0D_p;
    playergroup auto2009A28F_g;
    int auto2009A28F_p;

    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();
    lv_pickedPlayer = 0;

    // Implementation
    lv_validPlayers = PlayerGroupCopy(lp_players);
    if ((lp_onOff == true)) {
        autoA2450245_g = lv_validPlayers;
        autoA2450245_p = 1;
        while (autoA2450245_p <= PlayerGroupCount(autoA2450245_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoA2450245_g, autoA2450245_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(autoA2450245_g, autoA2450245_p)) {
                autoA2450245_p = autoA2450245_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
        libNtve_gf__CineModeHideUI(lv_validPlayers);
        CinematicMode(lv_validPlayers, true, lp_duration);
        UIClearMessages(lv_validPlayers, c_messageAreaAll);
        UISetCursorVisible(lv_validPlayers, false);
        libNtve_gf_ShowHidePlacementModels(false);
        libNtve_gf_SetAllSoundChannelVolumes(0, lv_validPlayers, lp_duration);
        auto74C9138D_g = lv_validPlayers;
        auto74C9138D_p = 1;
        while (auto74C9138D_p <= PlayerGroupCount(auto74C9138D_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto74C9138D_g, auto74C9138D_p);
            UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, lp_duration);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto74C9138D_g, auto74C9138D_p)) {
                auto74C9138D_p = auto74C9138D_p + 1;
            }
        }
        autoCF5F6C0D_g = lv_validPlayers;
        autoCF5F6C0D_p = 1;
        while (autoCF5F6C0D_p <= PlayerGroupCount(autoCF5F6C0D_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoCF5F6C0D_g, autoCF5F6C0D_p);
            PlayerPauseAllCharges(lv_pickedPlayer, true);
            PlayerPauseAllCooldowns(lv_pickedPlayer, true);
            if (lv_pickedPlayer == PlayerGroupPlayer(autoCF5F6C0D_g, autoCF5F6C0D_p)) {
                autoCF5F6C0D_p = autoCF5F6C0D_p + 1;
            }
        }
        auto2009A28F_g = lv_validPlayers;
        auto2009A28F_p = 1;
        while (auto2009A28F_p <= PlayerGroupCount(auto2009A28F_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto2009A28F_g, auto2009A28F_p);
            PlayerScoreValueEnableAll(lv_pickedPlayer, false);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto2009A28F_g, auto2009A28F_p)) {
                auto2009A28F_p = auto2009A28F_p + 1;
            }
        }
        UIFlyerHelperOverride(lv_validPlayers, 0);
    }
    else {
        auto0ACAB445_g = lv_validPlayers;
        auto0ACAB445_p = 1;
        while (auto0ACAB445_p <= PlayerGroupCount(auto0ACAB445_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto0ACAB445_g, auto0ACAB445_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == false)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto0ACAB445_g, auto0ACAB445_p)) {
                auto0ACAB445_p = auto0ACAB445_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        TransmissionClearAll();
        libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, false);
        libNtve_gf_SetAllSoundChannelVolumes(2, lv_validPlayers, lp_duration);
        libNtve_gf__CineModeRestoreUI(lv_validPlayers);
        CinematicMode(lv_validPlayers, false, lp_duration);
        auto451C348A_g = lv_validPlayers;
        auto451C348A_p = 1;
        while (auto451C348A_p <= PlayerGroupCount(auto451C348A_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto451C348A_g, auto451C348A_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == false)) {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeConsole, lp_duration);
            }
            else {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeFullscreen, lp_duration);
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto451C348A_g, auto451C348A_p)) {
                auto451C348A_p = auto451C348A_p + 1;
            }
        }
        UISetCursorVisible(lv_validPlayers, true);
        libNtve_gf_ShowHidePlacementModels(true);
        auto10906981_g = lv_validPlayers;
        auto10906981_p = 1;
        while (auto10906981_p <= PlayerGroupCount(auto10906981_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto10906981_g, auto10906981_p);
            PlayerPauseAllCharges(lv_pickedPlayer, false);
            PlayerPauseAllCooldowns(lv_pickedPlayer, false);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto10906981_g, auto10906981_p)) {
                auto10906981_p = auto10906981_p + 1;
            }
        }
        auto1544564B_g = lv_validPlayers;
        auto1544564B_p = 1;
        while (auto1544564B_p <= PlayerGroupCount(auto1544564B_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto1544564B_g, auto1544564B_p);
            PlayerScoreValueEnableAll(lv_pickedPlayer, true);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto1544564B_g, auto1544564B_p)) {
                auto1544564B_p = auto1544564B_p + 1;
            }
        }
        UIFlyerHelperClearOverride(lv_validPlayers);
    }
}

void libNtve_gf_GlobalCinematicSetting (bool lp_onOff) {
    // Implementation
    if ((libNtve_gv__CineModeGlobalOn == lp_onOff)) {
        return ;
    }
    else {
    }
    if ((lp_onOff == true)) {
        libNtve_gv__CineModeSavedSpeed = GameGetSpeedValue();
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetSeedLocked(true);
        GamePauseAllCharges(true);
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
    }
    else {
        GameSetSpeedValue(libNtve_gv__CineModeSavedSpeed);
        GameSetSpeedLocked(false);
        GameSetSeedLocked(false);
        GamePauseAllCharges(false);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
    }
    libNtve_gv__CineModeGlobalOn = lp_onOff;
}

bool libNtve_gf_PlayerInCinematicMode (int lp_player) {
    // Implementation
    return PlayerGroupHasPlayer(libNtve_gv__PlayersInCineMode, lp_player);
}

void libNtve_gf_MovieDynamicSubtitlesandDuration (string lp_soundFile) {
    // Implementation
    MovieAddSubTitleText((StringExternal("Param/Value/lib_Ntve_2790CD6C") + StringExternal(CatalogFieldValueGet(c_gameCatalogSound, (lp_soundFile), "AssetArray[0].Speaker", c_playerAny)) + StringExternal("Param/Value/lib_Ntve_112EB177") + StringExternal(CatalogFieldValueGet(c_gameCatalogSound, (lp_soundFile), "AssetArray[0].Subtitle", c_playerAny))), ((1000 * FixedToInt(SoundLengthSync(SoundLink(lp_soundFile, 0)))) + 400), -1);
}

text libNtve_gf_ConvertBooleanToText (bool lp_value) {
    // Implementation
    if ((lp_value == true)) {
        return StringExternal("Param/Value/lib_Ntve_AB4DD212");
    }
    else {
        return StringExternal("Param/Value/lib_Ntve_1E5D9313");
    }
}

string libNtve_gf_ConvertBooleanToString (bool lp_value) {
    // Implementation
    if ((lp_value == true)) {
        return "True";
    }
    else {
        return "False";
    }
}

color libNtve_gf_ConvertPlayerColorToColor (int lp_playerColor) {
    // Implementation
    return ColorFromIndex((lp_playerColor), c_teamColorDiffuse);
}

string libNtve_gf_ConvertColorToString (color lp_color) {
    // Implementation
    return (IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentRed))) + "," + IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentGreen))) + "," + IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentBlue))));
}

string libNtve_gf_ConvertBearingsToString (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return (libNtve_gf_Convert3DVectorToString(lp_positionX, lp_positionY, lp_positionZ) + " " + libNtve_gf_Convert3DRotationToString(lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ));
}

string libNtve_gf_ConvertXYToString (fixed lp_x, fixed lp_y) {
    // Implementation
    return (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny));
}

string libNtve_gf_Convert3DVectorToString (fixed lp_x, fixed lp_y, fixed lp_z) {
    // Implementation
    return (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny) + "," + FixedToString(lp_z, c_fixedPrecisionAny));
}

string libNtve_gf_Convert3DRotationToString (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return (libNtve_gf_Convert3DVectorToString(lp_forwardX, lp_forwardY, lp_forwardZ) + "," + libNtve_gf_Convert3DVectorToString(lp_upX, lp_upY, lp_upZ));
}

void libNtve_gf_SaveDataTableValueDialogItem (bool lp_scope, string lp_name, int lp_value) {
    // Implementation
    DataTableSetInt(lp_scope, lp_name, lp_value);
}

void libNtve_gf_SaveDataTableValueDifficultyLevel (bool lp_scope, string lp_name, int lp_value) {
    // Implementation
    DataTableSetInt(lp_scope, lp_name, lp_value);
}

void libNtve_gf_SaveDataTableValuePlayerColor (bool lp_scope, string lp_name, int lp_value) {
    // Implementation
    DataTableSetInt(lp_scope, lp_name, lp_value);
}

int libNtve_gf_ValueFromDataTableDialogItem (bool lp_scope, string lp_name) {
    // Implementation
    return DataTableGetInt(lp_scope, lp_name);
}

int libNtve_gf_ValueFromDataTableDifficultyLevel (bool lp_scope, string lp_name) {
    // Implementation
    return DataTableGetInt(lp_scope, lp_name);
}

int libNtve_gf_ValueFromDataTablePlayerColor (bool lp_scope, string lp_name) {
    // Implementation
    return DataTableGetInt(lp_scope, lp_name);
}

void libNtve_gf_SetDialogItemText (int lp_dialogItem, text lp_text, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsText(lp_dialogItem, c_triggerControlPropertyText, lp_players, lp_text);
}

text libNtve_gf_DialogItemText (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsText(lp_dialogItem, c_triggerControlPropertyText, lp_player);
}

int libNtve_gf_CreateDialogItemAchievement (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_achievement) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeAchievement);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemAchievement(lv_dialogitem, lp_achievement, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemButton (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_hoverImage) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeButton);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_dialogitem, lp_buttonText, PlayerGroupAll());
    if ((lp_hoverImage != "")) {
        libNtve_gf_SetDialogItemImage2(lv_dialogitem, lp_hoverImage, PlayerGroupAll());
    }
    else {
    }
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemCheckBox (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, bool lp_checked) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeCheckBox);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemChecked(lv_dialogitem, lp_checked, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemImage (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeImage);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lv_dialogitem, lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(lv_dialogitem, lp_imageType, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(lv_dialogitem, lp_tiled, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_tintColor, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(lv_dialogitem, lp_blendMode, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemLabel (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeLabel);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(lv_dialogitem, lp_text, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_color, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(lv_dialogitem, lp_textWriteout, PlayerGroupAll());
    if ((lp_textWriteout == true)) {
        libNtve_gf_SetDialogItemTextWriteoutDuration(lv_dialogitem, lp_textWriteoutDuration, PlayerGroupAll());
    }
    else {
    }
    return lv_dialogitem;
}

void libNtve_gf_SetDialogItemRotation (int lp_dialogItem, int lp_rotation, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyRotation, lp_players, (lp_rotation));
}

void libNtve_gf_SetDialogItemCurrentValue (int lp_dialogItem, fixed lp_currentValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyValue, lp_players, lp_currentValue);
}

void libNtve_gf_SetDialogItemMinimumValue (int lp_dialogItem, fixed lp_minValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMinValue, lp_players, lp_minValue);
}

void libNtve_gf_SetDialogItemMaximumValue (int lp_dialogItem, fixed lp_maxValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMaxValue, lp_players, lp_maxValue);
}

void libNtve_gf_SetDialogItemChecked (int lp_dialogItem, bool lp_checked, playergroup lp_players) {
    // Implementation
    if ((lp_checked == true)) {
        DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_players, true);
    }
    else {
        DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_players, false);
    }
}

void libNtve_gf_SetDialogItemEditorValue (int lp_dialogItem, string lp_value, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyEditText, lp_players, lp_value);
}

fixed libNtve_gf_DialogItemValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyValue, lp_player);
}

fixed libNtve_gf_DialogItemMaximumValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMaxValue, lp_player);
}

fixed libNtve_gf_DialogItemMinimumValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMinValue, lp_player);
}

bool libNtve_gf_DialogItemIsChecked (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_player);
}

string libNtve_gf_DialogItemEditValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyEditText, lp_player);
}

void libNtve_gf_SetDialogItemColor (int lp_dialogItem, color lp_color, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsColor(lp_dialogItem, c_triggerControlPropertyColor, lp_players, lp_color);
}

void libNtve_gf_SetDialogItemStyle (int lp_dialogItem, string lp_style, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyStyle, lp_players, lp_style);
}

void libNtve_gf_SetDialogItemTextWriteout (int lp_dialogItem, bool lp_writeout, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyTextWriteout, lp_players, lp_writeout);
}

void libNtve_gf_SetDialogItemTextWriteoutDuration (int lp_dialogItem, fixed lp_duration, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyTextWriteoutDuration, lp_players, lp_duration);
}

void libNtve_gf_SetDialogItemTooltip (int lp_dialogItem, text lp_tooltip, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsText(lp_dialogItem, c_triggerControlPropertyTooltip, lp_players, lp_tooltip);
}

color libNtve_gf_DialogItemColor (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsColor(lp_dialogItem, c_triggerControlPropertyColor, lp_player);
}

string libNtve_gf_DialogItemStyle (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyStyle, lp_player);
}

text libNtve_gf_DialogItemTooltip (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsText(lp_dialogItem, c_triggerControlPropertyTooltip, lp_player);
}

void libNtve_gf_SetDialogItemImage (int lp_dialogItem, string lp_image, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyImage, lp_players, lp_image);
}

void libNtve_gf_SetDialogItemImage2 (int lp_dialogItem, string lp_image, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyHoverImage, lp_players, lp_image);
}

void libNtve_gf_SetDialogItemImageType (int lp_dialogItem, int lp_imageType, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyImageType, lp_players, (lp_imageType));
}

void libNtve_gf_SetDialogItemBlendMode (int lp_dialogItem, int lp_blendMode, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyBlendMode, lp_players, (lp_blendMode));
}

void libNtve_gf_SetDialogItemImageType2 (int lp_dialogItem, bool lp_tiled, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyTiled, lp_players, lp_tiled);
}

string libNtve_gf_DialogItemImage (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyImage, lp_player);
}

int libNtve_gf_DialogItemImageType (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyImageType, lp_player);
}

void libNtve_gf_SetDialogItemFlash (int lp_dialogItem, string lp_flash, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyFile, lp_players, lp_flash);
}

void libNtve_gf_SetDialogItemAchievement (int lp_dialogItem, string lp_achievement, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyAchievement, lp_players, lp_achievement);
}

void libNtve_gf_SetDialogItemRenderPriority (int lp_dialogItem, int lp_renderPriority, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyRenderPriority, lp_players, lp_renderPriority);
}

void libNtve_gf_DisplayScreenButton (int lp_screenButtonID, text lp_text, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, trigger lp_callback) {
    // Implementation
    if ((lp_screenButtonID > libNtve_gv_c_ScreenButtonMaxCount)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_3EFBEA6A") + IntToText(libNtve_gv_c_ScreenButtonMaxCount) + StringExternal("Param/Value/lib_Ntve_8BE5995A")));
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        libNtve_gv_screenButtonDialogs[lp_screenButtonID] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    else {
    }
    DialogSetSize(libNtve_gv_screenButtonDialogs[lp_screenButtonID], lp_width, lp_height);
    DialogSetPosition(libNtve_gv_screenButtonDialogs[lp_screenButtonID], lp_anchor, lp_offsetX, lp_offsetY);
    if ((libNtve_gv_screenButtons[lp_screenButtonID] == c_invalidDialogControlId)) {
        DialogControlCreate(libNtve_gv_screenButtonDialogs[lp_screenButtonID], c_triggerControlTypeButton);
        libNtve_gv_screenButtons[lp_screenButtonID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libNtve_gv_screenButtonsBorderImage[lp_screenButtonID], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), libNtve_gv_screenButtonsHoverImage[lp_screenButtonID], PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ScreenButtonText", PlayerGroupAll());
    }
    else {
    }
    DialogControlSetSize(libNtve_gv_screenButtons[lp_screenButtonID], PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(libNtve_gv_screenButtons[lp_screenButtonID], PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetPropertyAsText(libNtve_gv_screenButtons[lp_screenButtonID], c_triggerControlPropertyText, PlayerGroupAll(), lp_text);
    libNtve_gv_screenButtonCallbacks[lp_screenButtonID] = lp_callback;
    DialogSetVisible(libNtve_gv_screenButtonDialogs[lp_screenButtonID], PlayerGroupAll(), true);
}

void libNtve_gf_HideScreenButton (bool lp_showHide, int lp_screenButtonID) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv_screenButtonDialogs[lp_screenButtonID], PlayerGroupAll(), lp_showHide);
}

void libNtve_gf_FlashScreenButton (int lp_screenButtonID, fixed lp_flashTime, color lp_color1, color lp_color2) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libNtve_gv_tP_FlashScreenButtonID = lp_screenButtonID;
    libNtve_gv_tP_FlashScreenButtonFlashTime = lp_flashTime;
    libNtve_gv_tP_FlashScreenButtonColor1 = lp_color1;
    libNtve_gv_tP_FlashScreenButtonColor2 = lp_color2;
    TriggerExecute(libNtve_gt_FlashScreenButton, true, false);
}

void libNtve_gf_StopFlashingScreenButton (int lp_screenButtonID) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonsFlashing[lp_screenButtonID] == false)) {
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonsFlashStopping[lp_screenButtonID] == true)) {
        return ;
    }
    else {
    }
    libNtve_gv_screenButtonsFlashStopping[lp_screenButtonID] = true;
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenButtons[lp_screenButtonID], libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsFlashingBorderImage[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsFlashingHoverImage[lp_screenButtonID], PlayerGroupAll());
}

void libNtve_gf_SetScreenButtonBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType) {
    // Implementation
    libNtve_gv_screenButtonsBorderType[lp_screenButtonID] = lp_borderType;
    libNtve_gv_screenButtonsBorderImage[lp_screenButtonID] = lp_borderImage;
    libNtve_gv_screenButtonsHoverImage[lp_screenButtonID] = lp_hoverImage;
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenButtons[lp_screenButtonID], libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsBorderImage[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsHoverImage[lp_screenButtonID], PlayerGroupAll());
}

void libNtve_gf_SetScreenButtonFlashingBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType) {
    // Implementation
    libNtve_gv_screenButtonsFlashingBorderType[lp_screenButtonID] = lp_borderType;
    libNtve_gv_screenButtonsFlashingBorderImage[lp_screenButtonID] = lp_borderImage;
    libNtve_gv_screenButtonsFlashingHoverImage[lp_screenButtonID] = lp_hoverImage;
}

int libNtve_gf_ScreenButtonDialog (int lp_screenButtonID) {
    // Implementation
    return libNtve_gv_screenButtonDialogs[lp_screenButtonID];
}

int libNtve_gf_ScreenButton (int lp_screenButtonID) {
    // Implementation
    return libNtve_gv_screenButtons[lp_screenButtonID];
}

void libNtve_gf_DisplayScreenImage (int lp_screenImageID, string lp_image, int lp_blendMode, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY) {
    // Implementation
    if ((lp_screenImageID == libNtve_gv_c_ScreenImageMaxCount)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_83A50D3D") + IntToText(libNtve_gv_c_ScreenImageMaxCount) + StringExternal("Param/Value/lib_Ntve_B9D80F71")));
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, false);
        libNtve_gv_screenImageDialogs[lp_screenImageID] = DialogLastCreated();
    }
    else {
    }
    DialogSetImageVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], false);
    DialogSetSize(libNtve_gv_screenImageDialogs[lp_screenImageID], lp_width, lp_height);
    DialogSetPosition(libNtve_gv_screenImageDialogs[lp_screenImageID], lp_anchor, lp_offsetX, lp_offsetY);
    DialogSetTransparency(libNtve_gv_screenImageDialogs[lp_screenImageID], 0.0);
    if ((libNtve_gv_screenImageDialogImages[lp_screenImageID] == c_invalidDialogControlId)) {
        DialogControlCreate(libNtve_gv_screenImageDialogs[lp_screenImageID], c_triggerControlTypeImage);
        libNtve_gv_screenImageDialogImages[lp_screenImageID] = DialogControlLastCreated();
    }
    else {
    }
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenImageDialogImages[lp_screenImageID], c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gv_screenImageDialogImages[lp_screenImageID], lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(libNtve_gv_screenImageDialogImages[lp_screenImageID], lp_blendMode, PlayerGroupAll());
    DialogControlSetSize(libNtve_gv_screenImageDialogImages[lp_screenImageID], PlayerGroupAll(), lp_width, lp_height);
    libNtve_gf_SetDialogItemRotation(libNtve_gv_screenImageDialogImages[lp_screenImageID], 0, PlayerGroupAll());
    DialogControlSetPosition(libNtve_gv_screenImageDialogImages[lp_screenImageID], PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gv_screenImagePulsing[lp_screenImageID] = false;
    DialogSetVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], PlayerGroupAll(), true);
}

void libNtve_gf_HideScreenImage (bool lp_showHideOption, int lp_screenImageID) {
    // Implementation
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], PlayerGroupAll(), lp_showHideOption);
}

void libNtve_gf_PulseScreenImage (int lp_screenImageID, fixed lp_period, fixed lp_transparency1, fixed lp_transparency2) {
    // Implementation
    libNtve_gv_tP_PulseScreenImageID = lp_screenImageID;
    libNtve_gv_tP_PulseScreenImagePeriod = lp_period;
    libNtve_gv_tP_PulseScreenImageTransparency1 = lp_transparency1;
    libNtve_gv_tP_PulseScreenImageTransparency2 = lp_transparency2;
    TriggerExecute(libNtve_gt_PulseScreenImage, true, false);
}

void libNtve_gf_StopPulsingScreenImage (int lp_screenImageID) {
    // Implementation
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libNtve_gv_screenImagePulsing[lp_screenImageID] = false;
}

int libNtve_gf_ScreenImageDialog (int lp_screenImageID) {
    // Implementation
    return libNtve_gv_screenImageDialogs[lp_screenImageID];
}

int libNtve_gf_ScreenImageDialogItem (int lp_screenImageID) {
    // Implementation
    return libNtve_gv_screenImageDialogImages[lp_screenImageID];
}

void libNtve_gf_CreateExplosionAtPoint (int lp_size, int lp_race, point lp_point) {
    // Variable Declarations
    string lv_race;
    string lv_size;
    actor lv_explosion;

    // Variable Initialization
    lv_race = "Terran";
    lv_size = "Large";
    lv_explosion = null;

    // Implementation
    libNtve_gf_CreateActorAtPoint("TriggeredExplosion", lp_point);
    lv_explosion = libNtve_gf_ActorLastCreated();
    if ((lp_race == 1)) {
        lv_race = "Protoss";
    }
    else {
        if ((lp_race == 2)) {
            lv_race = "Zerg";
        }
        else {
        }
    }
    if ((lp_size == 1)) {
        lv_size = "Small";
    }
    else {
    }
    ActorSend(lv_explosion, (("Signal " + lv_race + lv_size)));
}

bool libNtve_gf_PlayerCanCreateEffectAtPoint (int lp_player, string lp_effect, point lp_point) {
    // Implementation
    return (PlayerValidateEffectPoint(lp_player, lp_effect, lp_point) == 0);
}

bool libNtve_gf_PlayerCanCreateEffectOnUnit (int lp_player, string lp_effect, unit lp_target) {
    // Implementation
    return (PlayerValidateEffectUnit(lp_player, lp_effect, lp_target) == 0);
}

bool libNtve_gf_UnitCanCreateEffectAtPoint (unit lp_caster, string lp_effect, point lp_point) {
    // Implementation
    return (UnitValidateEffectPoint(lp_caster, lp_effect, lp_point) == 0);
}

bool libNtve_gf_UnitCanCreateEffectOnUnit (unit lp_caster, string lp_effect, unit lp_target) {
    // Implementation
    return (UnitValidateEffectUnit(lp_caster, lp_effect, lp_target) == 0);
}

fixed libNtve_gf_GamePlayTime (int lp_player) {
    // Implementation
    return TimerGetElapsed(libNtve_gv__GameTimer[lp_player]);
}

void libNtve_gf_GameRemoveChargeRegen (string lp_inCharge) {
    // Implementation
    GameAddChargeRegen(lp_inCharge, (-1.0 * GameGetChargeRegen(lp_inCharge)));
}

void libNtve_gf_GameRemoveChargeUsed (string lp_inCharge) {
    // Implementation
    GameAddChargeUsed(lp_inCharge, (-1.0 * GameGetChargeUsed(lp_inCharge)));
}

void libNtve_gf_GameRemoveCooldown (string lp_inCooldown) {
    // Implementation
    GameAddCooldown(lp_inCooldown, (-1.0 * GameGetCooldown(lp_inCooldown)));
}

void libNtve_gf_PreloadModelObject (string lp_id, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogModel, (lp_id), lp_queue);
}

void libNtve_gf_PreloadSoundObject (string lp_id, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogSound, (lp_id), lp_queue);
}

void libNtve_gf_PreloadSoundtrack (string lp_soundtrack, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogSoundtrack, (lp_soundtrack), lp_queue);
}

void libNtve_gf_PreloadUnit (string lp_unit, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogUnit, (lp_unit), lp_queue);
}

void libNtve_gf_WaitForTimer (timer lp_timer, fixed lp_time, bool lp_waitType) {
    // Implementation
    if ((lp_waitType == true)) {
        while (!((TimerGetElapsed(lp_timer) >= lp_time))) {
            Wait(0.05, c_timeGame);
        }
    }
    else {
        while (!((TimerGetRemaining(lp_timer) <= lp_time))) {
            Wait(0.05, c_timeGame);
        }
    }
}

void libNtve_gf_ShowHideLeaderboard (int lp_board, bool lp_showHide, playergroup lp_players) {
    // Implementation
    if ((lp_showHide == true)) {
        BoardSetState(lp_board, lp_players, c_boardStateShowing, true);
    }
    else {
        BoardSetState(lp_board, lp_players, c_boardStateShowing, false);
    }
}

int libNtve_gf_ArithmeticIntClamp (int lp_value, int lp_min, int lp_max) {
    // Implementation
    if ((lp_value < lp_min)) {
        return lp_min;
    }
    else {
    }
    if ((lp_value > lp_max)) {
        return lp_max;
    }
    else {
    }
    return lp_value;
}

fixed libNtve_gf_ArithmeticRealClamp (fixed lp_value, fixed lp_min, fixed lp_max) {
    // Implementation
    if ((lp_value < lp_min)) {
        return lp_min;
    }
    else {
    }
    if ((lp_value > lp_max)) {
        return lp_max;
    }
    else {
    }
    return lp_value;
}

fixed libNtve_gf_RandomPercent () {
    // Implementation
    return RandomFixed(0.0, 100.0);
}

fixed libNtve_gf_RandomAngle () {
    // Implementation
    return RandomFixed(0.0, 360.0);
}

void libNtve_gf_CreatePingFacingAngle (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle) {
    // Variable Declarations
    point lv_pointWithAngle;

    // Variable Initialization
    lv_pointWithAngle = null;

    // Implementation
    lv_pointWithAngle = libNtve_gf_PointFromPositionAndAngle(lp_position, lp_angle);
    PingCreate(lp_players, lp_model, lv_pointWithAngle, lp_color, lp_duration);
}

void libNtve_gf_ClearAlliance (int lp_sourcePlayer, int lp_targetPlayer) {
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
}

void libNtve_gf_MakeAlly (int lp_sourcePlayer, int lp_targetPlayer) {
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, true);
}

void libNtve_gf_SetAlliance (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Implementation
    libNtve_gf_SetAllianceOneWay(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    libNtve_gf_SetAllianceOneWay(lp_targetPlayer, lp_sourcePlayer, lp_alliance);
}

void libNtve_gf_SetAllianceOneWay (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    int autoC4A67CFA_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        autoC4A67CFA_val = lp_alliance;
        if (autoC4A67CFA_val == 0) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (autoC4A67CFA_val == 1) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 2) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 3) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 4) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 7) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 8) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 9) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 5) {
        }
        else if (autoC4A67CFA_val == 6) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }
    else {
    }
}

void libNtve_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    playergroup autoC679B4B5_g;
    int autoC679B4B5_p;
    playergroup auto92EC5468_g;
    int auto92EC5468_p;

    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Variable Initialization
    lv_player1 = 0;
    lv_player2 = 0;

    // Implementation
    autoC679B4B5_g = lp_players;
    autoC679B4B5_p = 1;
    while (autoC679B4B5_p <= PlayerGroupCount(autoC679B4B5_g)) {
        lv_player1 = PlayerGroupPlayer(autoC679B4B5_g, autoC679B4B5_p);
        auto92EC5468_g = lp_players;
        auto92EC5468_p = 1;
        while (auto92EC5468_p <= PlayerGroupCount(auto92EC5468_g)) {
            lv_player2 = PlayerGroupPlayer(auto92EC5468_g, auto92EC5468_p);
            if ((lv_player1 != lv_player2)) {
                libNtve_gf_SetAllianceOneWay(lv_player1, lv_player2, lp_alliance);
            }
            else {
            }
            if (lv_player2 == PlayerGroupPlayer(auto92EC5468_g, auto92EC5468_p)) {
                auto92EC5468_p = auto92EC5468_p + 1;
            }
        }
        if (lv_player1 == PlayerGroupPlayer(autoC679B4B5_g, autoC679B4B5_p)) {
            autoC679B4B5_p = autoC679B4B5_p + 1;
        }
    }
}

bool libNtve_gf_PlayerIsEnemy (int lp_sourcePlayer, int lp_targetPlayer, int lp_relation) {
    int auto180886E4_val;

    // Implementation
    auto180886E4_val = lp_relation;
    if (auto180886E4_val == 0) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer));
    }
    else if (auto180886E4_val == 1) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdChat, lp_sourcePlayer));
    }
    else if (auto180886E4_val == 2) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer)));
    }
    else if (auto180886E4_val == 3) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer)) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer) && !(PlayerGetAlliance(lp_targetPlayer, c_allianceIdChat, lp_sourcePlayer)));
    }
    else if (auto180886E4_val == 4) {
        return !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer));
    }
    else if (auto180886E4_val == 5) {
        return (!(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer)) && !(PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer)));
    }
    else {
    }
    return false;
}

void libNtve_gf_PlayerRemoveChargeRegen (int lp_inPlayer, string lp_inCharge) {
    // Implementation
    PlayerAddChargeRegen(lp_inPlayer, lp_inCharge, (-1.0 * PlayerGetChargeRegen(lp_inPlayer, lp_inCharge)));
}

void libNtve_gf_PlayerRemoveChargeUsed (int lp_inPlayer, string lp_inCharge) {
    // Implementation
    PlayerAddChargeUsed(lp_inPlayer, lp_inCharge, (-1.0 * PlayerGetChargeUsed(lp_inPlayer, lp_inCharge)));
}

void libNtve_gf_PlayerRemoveCooldown (int lp_inPlayer, string lp_inCooldown) {
    // Implementation
    PlayerAddCooldown(lp_inPlayer, lp_inCooldown, (-1.0 * PlayerGetCooldown(lp_inPlayer, lp_inCooldown)));
}

void libNtve_gf_AddPlayerGroupToPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup) {
    playergroup auto57A2B8C2_g;
    int auto57A2B8C2_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto57A2B8C2_g = lp_sourceGroup;
    auto57A2B8C2_p = 1;
    while (auto57A2B8C2_p <= PlayerGroupCount(auto57A2B8C2_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto57A2B8C2_g, auto57A2B8C2_p);
        PlayerGroupAdd(lp_targetGroup, lv_pickedPlayer);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto57A2B8C2_g, auto57A2B8C2_p)) {
            auto57A2B8C2_p = auto57A2B8C2_p + 1;
        }
    }
}

void libNtve_gf_RemovePlayerGroupFromPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup) {
    playergroup auto2647939F_g;
    int auto2647939F_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto2647939F_g = lp_sourceGroup;
    auto2647939F_p = 1;
    while (auto2647939F_p <= PlayerGroupCount(auto2647939F_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto2647939F_g, auto2647939F_p);
        PlayerGroupRemove(lp_targetGroup, lv_pickedPlayer);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto2647939F_g, auto2647939F_p)) {
            auto2647939F_p = auto2647939F_p + 1;
        }
    }
}

point libNtve_gf_PointFromXYZ (fixed lp_x, fixed lp_y, fixed lp_y2) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = null;

    // Implementation
    lv_point = Point(lp_x, lp_y);
    PointSetHeight(lv_point, lp_y2);
    return lv_point;
}

point libNtve_gf_PointFromPositionAndAngle (point lp_point, fixed lp_angle) {
    // Variable Declarations
    point lv_pointWithFacing;

    // Variable Initialization
    lv_pointWithFacing = null;

    // Implementation
    lv_pointWithFacing = lp_point;
    PointSetFacing(lv_pointWithFacing, lp_angle);
    return lv_pointWithFacing;
}

point libNtve_gf_PointWithZOffset (point lp_p, fixed lp_z) {
    // Implementation
    return libNtve_gf_PointFromXYZ(PointGetX(lp_p), PointGetY(lp_p), lp_z);
}

point libNtve_gf_PointOffsetTowardsPoint (point lp_sourcePoint, fixed lp_distance, point lp_targetPoint) {
    // Implementation
    return PointWithOffsetPolar(lp_sourcePoint, lp_distance, AngleBetweenPoints(lp_sourcePoint, lp_targetPoint));
}

point libNtve_gf_RandomPointBetweenPoints (point lp_point1, point lp_point2) {
    // Variable Declarations
    fixed lv_p1Weight;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Implementation
    lv_p1Weight = RandomFixed(0.0, 1.0);
    lv_x = ((lv_p1Weight * PointGetX(lp_point1)) + ((1.0 - lv_p1Weight) * PointGetX(lp_point2)));
    lv_y = ((lv_p1Weight * PointGetY(lp_point1)) + ((1.0 - lv_p1Weight) * PointGetY(lp_point2)));
    return Point(lv_x, lv_y);
}

int libNtve_gf_CinematicPortrait (int lp_position) {
    int auto0CE35058_val;

    // Variable Declarations
    int lv_index;
    int lv_width;
    int lv_height;
    int lv_anchor;
    int lv_offsetX;
    int lv_offsetY;

    // Variable Initialization
    lv_index = 0;
    lv_width = 0;
    lv_height = 0;
    lv_anchor = c_anchorBottomLeft;
    lv_offsetX = 0;
    lv_offsetY = 0;

    // Implementation
    lv_height = 360;
    lv_width = FixedToInt((IntToFixed(lv_height) * (144.0 / 219.0)));
    lv_offsetX = 25;
    auto0CE35058_val = lp_position;
    if (auto0CE35058_val == 0) {
        lv_index = 0;
        lv_anchor = c_anchorTopLeft;
        lv_offsetY = 90;
    }
    else if (auto0CE35058_val == 1) {
        lv_index = 1;
        lv_anchor = c_anchorTopRight;
        lv_offsetY = 90;
    }
    else if (auto0CE35058_val == 2) {
        lv_index = 2;
        lv_anchor = c_anchorBottomLeft;
        lv_offsetY = 190;
    }
    else if (auto0CE35058_val == 3) {
        lv_index = 3;
        lv_anchor = c_anchorBottomRight;
        lv_offsetY = 190;
    }
    else if (auto0CE35058_val == 4) {
        lv_index = 4;
        lv_anchor = c_anchorLeft;
        lv_offsetY = -50;
    }
    else if (auto0CE35058_val == 5) {
        lv_index = 5;
        lv_anchor = c_anchorRight;
        lv_offsetY = -50;
    }
    else {
        return c_invalidPortraitId;
    }
    if ((libNtve_gv_portraits[lv_index] != c_invalidPortraitId)) {
        return libNtve_gv_portraits[lv_index];
    }
    else {
    }
    PortraitCreate(lv_offsetX, lv_offsetY, lv_anchor, lv_width, lv_height, null, "Dflt", "", true, true);
    libNtve_gv_portraits[lv_index] = PortraitLastCreated();
    PortraitSetBorderVisible(libNtve_gv_portraits[lv_index], true);
    PortraitUseTransition(libNtve_gv_portraits[lv_index], true);
    PortraitSetVisible(libNtve_gv_portraits[lv_index], PlayerGroupAll(), false, false);
    return libNtve_gv_portraits[lv_index];
}

int libNtve_gf_FullscreenPortrait () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = 6;
    if ((libNtve_gv_portraits[lv_index] != c_invalidPortraitId)) {
        return libNtve_gv_portraits[lv_index];
    }
    else {
    }
    PortraitCreate(0, 0, c_anchorCenter, 0, 0, null, "Dflt", "", true, true);
    libNtve_gv_portraits[lv_index] = PortraitLastCreated();
    PortraitSetFullscreen(libNtve_gv_portraits[lv_index], true);
    PortraitSetBorderVisible(libNtve_gv_portraits[lv_index], false);
    PortraitUseTransition(libNtve_gv_portraits[lv_index], false);
    PortraitSetVisible(libNtve_gv_portraits[lv_index], PlayerGroupAll(), false, false);
    return libNtve_gv_portraits[lv_index];
}

void libNtve_gf_PortraitSetAnim (int lp_Portrait, string lp_Anim, string lp_identifier, int lp_flags, fixed lp_blendTime) {
    // Implementation
    libNtve_gf_PlayAnimation(ActorFromPortrait(lp_Portrait), lp_identifier, lp_Anim, lp_flags, lp_blendTime);
}

void libNtve_gf_PortraitSetTintColor (int lp_Portrait, color lp_color) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    lv_a = ActorFromPortrait(lp_Portrait);
    ActorSend(lv_a, libNtve_gf_SetTintColor(lp_color, 1.0, -1.0));
}

void libNtve_gf_ClearPortraitAnimation (int lp_portrait, string lp_identifier) {
    // Implementation
    libNtve_gf_ClearAnimation(ActorFromPortrait(lp_portrait), lp_identifier);
}

fixed libNtve_gf_WidthOfRegion (region lp_region) {
    // Implementation
    return AbsF((PointGetX(RegionGetBoundsMax(lp_region)) - PointGetX(RegionGetBoundsMin(lp_region))));
}

fixed libNtve_gf_HeightOfRegion (region lp_region) {
    // Implementation
    return AbsF((PointGetY(RegionGetBoundsMax(lp_region)) - PointGetY(RegionGetBoundsMin(lp_region))));
}

void libNtve_gf_StoreUnitSelection (int lp_forPlayer, int lp_storeOption) {
    // Implementation
    libNtve_gv_unitSelectionStored[lp_forPlayer] = UnitGroupSelected(lp_forPlayer);
    if ((lp_storeOption == 0)) {
        UnitClearSelection(lp_forPlayer);
    }
    else {
    }
}

void libNtve_gf_RestoreUnitSelection (int lp_forPlayer) {
    // Implementation
    UnitClearSelection(lp_forPlayer);
    UnitGroupSelect(libNtve_gv_unitSelectionStored[lp_forPlayer], lp_forPlayer, true);
}

void libNtve_gf_SetAllSoundChannelVolumes (int lp_mode, playergroup lp_players, fixed lp_duration) {
    int auto37650D48_val;

    // Implementation
    auto37650D48_val = lp_mode;
    if (auto37650D48_val == 0) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else if (auto37650D48_val == 1) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else if (auto37650D48_val == 2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, lp_duration);
    }
    else if (auto37650D48_val == 3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else {
    }
}

void libNtve_gf__StoryModeOnOffForPlayer (int lp_player, bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        PlayerGroupAdd(libNtve_gv__PlayersInStoryMode, lp_player);
    }
    else {
        PlayerGroupRemove(libNtve_gv__PlayersInStoryMode, lp_player);
    }
}

void libNtve_gf__StoryModeOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff) {
    playergroup auto476D40C9_g;
    int auto476D40C9_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto476D40C9_g = lp_players;
    auto476D40C9_p = 1;
    while (auto476D40C9_p <= PlayerGroupCount(auto476D40C9_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto476D40C9_g, auto476D40C9_p);
        libNtve_gf__StoryModeOnOffForPlayer(lv_pickedPlayer, lp_onOff);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto476D40C9_g, auto476D40C9_p)) {
            auto476D40C9_p = auto476D40C9_p + 1;
        }
    }
}

void libNtve_gf__StoryModeHideUI (playergroup lp_players) {
    // Variable Declarations
    int lv_indexFrame;

    // Variable Initialization
    lv_indexFrame = c_syncFrameTypeMenuBar;

    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
    lv_indexFrame = c_syncFrameTypeFirst;
    while (lv_indexFrame <= c_syncFrameTypeLast) {
        if (((lv_indexFrame != c_syncFrameTypeBattleUI) && (lv_indexFrame != c_syncFrameTypeMenuBar) && (lv_indexFrame != c_syncFrameTypeCashPanel) && (lv_indexFrame != c_syncFrameTypeTipAlertPanel))) {
            UISetFrameVisible(lp_players, lv_indexFrame, false);
        }
        else {
        }
        lv_indexFrame = lv_indexFrame + 1;
    }
}

void libNtve_gf__StoryModeRestoreUI (playergroup lp_players) {
    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
}

void libNtve_gf_StoryMode (playergroup lp_players, bool lp_onOff) {
    playergroup auto4DCAC640_g;
    int auto4DCAC640_p;
    playergroup autoF122BA15_g;
    int autoF122BA15_p;
    playergroup auto24E8EA3B_g;
    int auto24E8EA3B_p;

    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();
    lv_pickedPlayer = 0;

    // Implementation
    lv_validPlayers = PlayerGroupCopy(lp_players);
    if ((lp_onOff == true)) {
        auto24E8EA3B_g = lv_validPlayers;
        auto24E8EA3B_p = 1;
        while (auto24E8EA3B_p <= PlayerGroupCount(auto24E8EA3B_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto24E8EA3B_g, auto24E8EA3B_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == true)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto24E8EA3B_g, auto24E8EA3B_p)) {
                auto24E8EA3B_p = auto24E8EA3B_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__StoryModeOnOffForPlayerGroup(lv_validPlayers, true);
        libNtve_gf__StoryModeHideUI(lv_validPlayers);
        UISetMode(lv_validPlayers, c_uiModeFullscreen, 0.0);
        StoryMode(lv_validPlayers, true);
    }
    else {
        auto4DCAC640_g = lv_validPlayers;
        auto4DCAC640_p = 1;
        while (auto4DCAC640_p <= PlayerGroupCount(auto4DCAC640_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto4DCAC640_g, auto4DCAC640_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == false)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto4DCAC640_g, auto4DCAC640_p)) {
                auto4DCAC640_p = auto4DCAC640_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__StoryModeOnOffForPlayerGroup(lv_validPlayers, false);
        libNtve_gf__StoryModeRestoreUI(lv_validPlayers);
        autoF122BA15_g = lv_validPlayers;
        autoF122BA15_p = 1;
        while (autoF122BA15_p <= PlayerGroupCount(autoF122BA15_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoF122BA15_g, autoF122BA15_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == false)) {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeConsole, 0.0);
            }
            else {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(autoF122BA15_g, autoF122BA15_p)) {
                autoF122BA15_p = autoF122BA15_p + 1;
            }
        }
        StoryMode(lv_validPlayers, false);
    }
}

bool libNtve_gf_PlayerInStoryMode (int lp_player) {
    // Implementation
    return PlayerGroupHasPlayer(libNtve_gv__PlayersInStoryMode, lp_player);
}

void libNtve_gf_SetUpgradeLevelForPlayer (int lp_p, string lp_upgrade, int lp_levels) {
    // Variable Declarations
    int lv_levelCurrent;

    // Variable Initialization
    lv_levelCurrent = 0;

    // Implementation
    lv_levelCurrent = TechTreeUpgradeCount(lp_p, lp_upgrade, c_techCountCompleteOnly);
    TechTreeUpgradeAddLevel(lp_p, lp_upgrade, (lp_levels - lv_levelCurrent));
}

void libNtve_gf_SendTransmissionSimple (transmissionsource lp_Source, int lp_Target, soundlink lp_Sound, fixed lp_Duration, int lp_DurationType, bool lp_WaitUntilDone) {
    // Implementation
    TransmissionSend(PlayerGroupAll(), lp_Source, lp_Target, "Talk", lp_Sound, null, null, lp_Duration, lp_DurationType, lp_WaitUntilDone);
}

void libNtve_gf_UIErrorMessage (playergroup lp_players, text lp_message, soundlink lp_sound) {
    // Implementation
    UIDisplayMessage(lp_players, c_messageAreaError, (StringExternal("Param/Value/lib_Ntve_C82E9187") + lp_message));
    SoundPlay(lp_sound, lp_players, 100.0, 0.0);
}

int libNtve_gf__BB_PortraitBorderWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) - 40.0));
}

int libNtve_gf__BB_PortraitBorderHeight (int lp_barID) {
    // Implementation
    return libNtve_gf__BB_PortraitBorderWidth(lp_barID);
}

int libNtve_gf__BB_PortraitWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_PortraitBorderWidth(lp_barID)) - 10.0));
}

int libNtve_gf__BB_PortraitHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_PortraitWidth(lp_barID)) - 0.0));
}

int libNtve_gf__BB_TitleBarWidth (int lp_barID) {
    // Implementation
    return ((libNtve_gv__BB_BarWidth[lp_barID] - libNtve_gf__BB_PortraitWidth(lp_barID)) - 30);
}

int libNtve_gf__BB_TitleBarHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) * 0.4));
}

int libNtve_gf__BB_HPBorderWidth (int lp_barID) {
    // Implementation
    return (libNtve_gf__BB_TitleBarWidth(lp_barID) - 60);
}

int libNtve_gf__BB_HPBorderHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) * 0.31));
}

int libNtve_gf__BB_HPBarWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_HPBorderWidth(lp_barID)) - 10.0));
}

int libNtve_gf__BB_HPBarHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_HPBorderHeight(lp_barID)) - 3.0));
}

int libNtve_gf__BB_HPBarCurrentWidth (int lp_barID) {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_width = 0;

    // Implementation
    if ((libNtve_gv__BB_Boss[lp_barID] == null)) {
        lv_current = libNtve_gv__BB_CurrentValue[lp_barID];
        lv_max = libNtve_gv__BB_MaxValue[lp_barID];
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }
    else {
    }
    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }
    else {
    }
    lv_width = FixedToInt((IntToFixed(libNtve_gf__BB_HPBarWidth(lp_barID)) * (lv_current / lv_max)));
    return lv_width;
}

text libNtve_gf__BB_HPBarFormatLabel (int lp_barID) {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_label = null;

    // Implementation
    if ((libNtve_gv__BB_Boss[lp_barID] == null)) {
        lv_current = libNtve_gv__BB_CurrentValue[lp_barID];
        lv_max = libNtve_gv__BB_MaxValue[lp_barID];
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libNtve_gf__BB_HPBarChange_Trigger = null;
int auto_libNtve_gf__BB_HPBarChange_lp_barID;

void libNtve_gf__BB_HPBarChange (int lp_barID) {
    auto_libNtve_gf__BB_HPBarChange_lp_barID = lp_barID;

    if (auto_libNtve_gf__BB_HPBarChange_Trigger == null) {
        auto_libNtve_gf__BB_HPBarChange_Trigger = TriggerCreate("auto_libNtve_gf__BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libNtve_gf__BB_HPBarChange_Trigger, false, false);
}

bool auto_libNtve_gf__BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    int lp_barID = auto_libNtve_gf__BB_HPBarChange_lp_barID;

    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;
    int lv_newWidth;
    int lv_width;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_label = null;
    lv_newWidth = 0;
    lv_width = 0;

    // Implementation
    if (((libNtve_gv__BB_HPOldWidth[lp_barID] < 0) || (libNtve_gv__BB_HPOldWidth[lp_barID] > libNtve_gf__BB_HPBarWidth(lp_barID)))) {
        libNtve_gv__BB_HPOldWidth[lp_barID] = libNtve_gf__BB_HPBarWidth(lp_barID);
    }
    else {
    }
    lv_newWidth = libNtve_gf__BB_HPBarCurrentWidth(lp_barID);
    lv_width = (libNtve_gv__BB_HPOldWidth[lp_barID] - lv_newWidth);
    libNtve_gv__BB_HPOldWidth[lp_barID] = lv_newWidth;
    if ((lv_width >= 4)) {
        DialogControlCreate(libNtve_gv__BB_Dialog[lp_barID], c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 0.00), libNtve_gv__BB_Players[lp_barID]);
        DialogControlSetSize(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], lv_width, libNtve_gf__BB_HPBarHeight(lp_barID));
        DialogControlSetPositionRelative(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_barID], c_anchorLeft, lv_newWidth, 0);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.0, 60.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.2, 20.0);
        Wait(0.2, c_timeReal);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.8, 100.0);
        Wait(0.8, c_timeReal);
        DialogControlDestroy(DialogControlLastCreated());
    }
    else {
    }
    return true;
}

void libNtve_gf_DisplayBossBar (int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players) {
    // Variable Declarations
    const int lv_width = 800;
    const int lv_height = 100;

    // Variable Initialization

    // Implementation
    if ((lp_bossBarID <= 0)) {
        return ;
    }
    else {
    }
    if ((lp_bossBarID > libNtve_gv__BBC_BossBarMaxCount)) {
        UIDisplayMessage(lp_players, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_13ECDD4D") + IntToText(libNtve_gv__BBC_BossBarMaxCount) + StringExternal("Param/Value/lib_Ntve_84FA80EA")));
        return ;
    }
    else {
    }
    libNtve_gv__BB_Players[lp_bossBarID] = lp_players;
    libNtve_gv__BB_Portraits[lp_bossBarID] = lp_portrait;
    libNtve_gv__BB_Title[lp_bossBarID] = lp_title;
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    libNtve_gf_SetBossBarMaximumValue(lp_bossBarID, lp_max, false);
    libNtve_gf_SetBossBarCurrentValue(lp_bossBarID, lp_max, false);
    libNtve_gv__BB_HPOldWidth[lp_bossBarID] = -1;
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        DialogCreate(libNtve_gv__BB_BarWidth[lp_bossBarID], libNtve_gv__BB_BarHeight[lp_bossBarID], c_anchorTop, 0, 50, false);
        libNtve_gv__BB_Dialog[lp_bossBarID] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgBar[lp_bossBarID] = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_light.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgPortrait[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_unit.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_PortraitImage[lp_bossBarID] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_TitleLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarTitle", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpBorderImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpFullImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpCurrentImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_HpLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarHP", PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 520, PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_RefreshBossBar(lp_bossBarID);
    DialogSetVisible(libNtve_gv__BB_Dialog[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], true);
}

void libNtve_gf_SetBossBarMaximumValue (int lp_bossBarID, int lp_max, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_MaxValue[lp_bossBarID] = IntToFixed(lp_max);
    if ((libNtve_gv__BB_MaxValue[lp_bossBarID] <= 0.0)) {
        libNtve_gv__BB_MaxValue[lp_bossBarID] = 1.0;
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarCurrentValue (int lp_bossBarID, int lp_current, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_CurrentValue[lp_bossBarID] = IntToFixed(lp_current);
    if ((libNtve_gv__BB_CurrentValue[lp_bossBarID] < 0.0)) {
        libNtve_gv__BB_CurrentValue[lp_bossBarID] = 0.0;
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarBoss (int lp_bossBarID, unit lp_boss, bool lp_refresh) {
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libNtve_gt__BB_BossHPChanged, true);
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = lp_boss;
    libNtve_gv__BB_MaxValue[lp_bossBarID] = 0.0;
    libNtve_gv__BB_CurrentValue[lp_bossBarID] = 0.0;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarRace (int lp_bossBarID, int lp_race, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_Race[lp_bossBarID] = lp_race;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_MoveBossBar (int lp_bossBarID, int lp_anchor, int lp_offsetX, int lp_offsetY) {
    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetPosition(libNtve_gv__BB_Dialog[lp_bossBarID], lp_anchor, lp_offsetX, lp_offsetY);
}

void libNtve_gf_ShowHideBossBar (bool lp_showHide, int lp_bossBarID) {
    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv__BB_Dialog[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], lp_showHide);
}

void libNtve_gf_RefreshBossBar (int lp_bossBarID) {
    int auto070B1B5C_val;

    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogControlSetSize(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitBorderWidth(lp_bossBarID), libNtve_gf__BB_PortraitBorderHeight(lp_bossBarID));
    DialogControlSetPosition(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, 18, 1);
    libNtve_gf_SetDialogItemImage(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Portraits[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID]);
    DialogControlSetSize(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitWidth(lp_bossBarID), libNtve_gf__BB_PortraitHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_PortraitImage[lp_bossBarID], PlayerGroupAll(), c_anchorCenter, libNtve_gv__BB_BGImgPortrait[lp_bossBarID], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Title[lp_bossBarID], PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_TitleBarWidth(lp_bossBarID), libNtve_gf__BB_TitleBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTopLeft, libNtve_gv__BB_PortraitImage[lp_bossBarID], c_anchorTopRight, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTop, libNtve_gv__BB_TitleLabel[lp_bossBarID], c_anchorBottom, 0, -12);
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gf__BB_HPBarFormatLabel(lp_bossBarID), PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 1);
    DialogControlSetSize(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarCurrentWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_bossBarID], c_anchorLeft, 0, 0);
    libNtve_gf__BB_HPBarChange(lp_bossBarID);
    auto070B1B5C_val = libNtve_gv__BB_Race[lp_bossBarID];
    if (auto070B1B5C_val == 0) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleTerran", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
    }
    else if (auto070B1B5C_val == 1) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleProtoss", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
    }
    else if (auto070B1B5C_val == 2) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleZerg", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(100.00, 50.20, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(100.00, 50.20, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(71.37, 32.16, 8.63), PlayerGroupAll());
    }
    else {
    }
}

void libNtve_gf__StoreGameUIVisibleStates (bool lp_storeRestore, playergroup lp_players) {
    playergroup auto1380166C_g;
    int auto1380166C_p;

    // Variable Declarations
    int lv_player;
    int lv_indexFrame;

    // Variable Initialization
    lv_player = 0;
    lv_indexFrame = c_syncFrameTypeMenuBar;

    // Implementation
    auto1380166C_g = lp_players;
    auto1380166C_p = 1;
    while (auto1380166C_p <= PlayerGroupCount(auto1380166C_g)) {
        lv_player = PlayerGroupPlayer(auto1380166C_g, auto1380166C_p);
        lv_indexFrame = c_syncFrameTypeFirst;
        while (lv_indexFrame <= c_syncFrameTypeLast) {
            if (((GameMapIsBlizzard() == true) || (lv_indexFrame != c_syncFrameTypeBattleUI))) {
                if ((lp_storeRestore == true)) {
                    if ((UIFrameVisible(lv_player, lv_indexFrame) == true)) {
                        libNtve_gv__GameUIVisible[lv_player][lv_indexFrame] = true;
                    }
                    else {
                        libNtve_gv__GameUIVisible[lv_player][lv_indexFrame] = false;
                    }
                }
                else {
                    UISetFrameVisible(PlayerGroupSingle(lv_player), lv_indexFrame, libNtve_gv__GameUIVisible[lv_player][lv_indexFrame]);
                }
            }
            else {
            }
            lv_indexFrame = lv_indexFrame + 1;
        }
        if (lv_player == PlayerGroupPlayer(auto1380166C_g, auto1380166C_p)) {
            auto1380166C_p = auto1380166C_p + 1;
        }
    }
}

void libNtve_gf_HideGameUI (bool lp_showHide, playergroup lp_players) {
    playergroup auto659B6716_g;
    int auto659B6716_p;
    playergroup autoE7F18298_g;
    int autoE7F18298_p;

    // Variable Declarations
    int lv_player;
    int lv_uIFrame;

    // Variable Initialization
    lv_player = 0;
    lv_uIFrame = c_syncFrameTypeMenuBar;

    // Implementation
    if ((lp_showHide == true)) {
        autoE7F18298_g = lp_players;
        autoE7F18298_p = 1;
        while (autoE7F18298_p <= PlayerGroupCount(autoE7F18298_g)) {
            lv_player = PlayerGroupPlayer(autoE7F18298_g, autoE7F18298_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_player) == false) && (libNtve_gf_PlayerInStoryMode(lv_player) == false)) {
                UISetMode(PlayerGroupSingle(lv_player), c_uiModeConsole, c_transitionDurationImmediate);
            }
            else {
            }
            if (lv_player == PlayerGroupPlayer(autoE7F18298_g, autoE7F18298_p)) {
                autoE7F18298_p = autoE7F18298_p + 1;
            }
        }
        libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
    }
    else {
        auto659B6716_g = lp_players;
        auto659B6716_p = 1;
        while (auto659B6716_p <= PlayerGroupCount(auto659B6716_g)) {
            lv_player = PlayerGroupPlayer(auto659B6716_g, auto659B6716_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_player) == false) && (libNtve_gf_PlayerInStoryMode(lv_player) == false)) {
                UISetMode(PlayerGroupSingle(lv_player), c_uiModeFullscreen, c_transitionDurationImmediate);
            }
            else {
            }
            if (lv_player == PlayerGroupPlayer(auto659B6716_g, auto659B6716_p)) {
                auto659B6716_p = auto659B6716_p + 1;
            }
        }
        libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
        lv_uIFrame = c_syncFrameTypeFirst;
        while (lv_uIFrame <= c_syncFrameTypeLast) {
            if (((GameMapIsBlizzard() == true) || (lv_uIFrame != c_syncFrameTypeBattleUI))) {
                UISetFrameVisible(lp_players, lv_uIFrame, false);
            }
            else {
            }
            lv_uIFrame = lv_uIFrame + 1;
        }
    }
}

text libNtve_gf_FormatTipTitle (text lp_title, int lp_type) {
    int auto17A93AD3_val;

    // Variable Declarations
    text lv_colorCode1;
    text lv_colorCode2;
    text lv_colorCode3;
    text lv_colorCode4;

    // Variable Initialization
    lv_colorCode1 = StringExternal("Param/Value/lib_Ntve_C6CD21F3");
    lv_colorCode2 = StringExternal("Param/Value/lib_Ntve_B237EA1F");
    lv_colorCode3 = StringExternal("Param/Value/lib_Ntve_6FA768D4");
    lv_colorCode4 = StringExternal("Param/Value/lib_Ntve_207B352D");

    // Implementation
    lv_colorCode1 = StringExternal("Param/Value/lib_Ntve_17346975");
    lv_colorCode2 = StringExternal("Param/Value/lib_Ntve_9196C077");
    lv_colorCode3 = StringExternal("Param/Value/lib_Ntve_7B619F3C");
    lv_colorCode4 = StringExternal("Param/Value/lib_Ntve_3A5DC4AF");
    auto17A93AD3_val = lp_type;
    if (auto17A93AD3_val == 1) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_0DBBF5F5") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else if (auto17A93AD3_val == 2) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_18619CE6") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else if (auto17A93AD3_val == 3) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_CD27226C") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else {
    }
    return (lv_colorCode3 + lp_title + lv_colorCode4);
}

void libNtve_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p) {
    // Variable Declarations
    fixed lv_angle;

    // Variable Initialization
    lv_angle = 0.0;

    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "FlagArray[1]", lp_player) == "1")) {
        lv_angle = libNtve_gf_RandomAngle();
    }
    else {
        lv_angle = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "Facing", lp_player));
        lv_angle=lv_angle - 90.0;
    }
    UnitCreate(lp_count, lp_type, lp_style, lp_player, lp_p, lv_angle);
}

void libNtve_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p) {
    // Implementation
    UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_p, PointGetFacing(lp_p));
}

unitgroup libNtve_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing) {
    // Implementation
    UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_pos, AngleBetweenPoints(lp_pos, lp_facing));
    return UnitLastCreatedGroup();
}

void libNtve_gf_ReplaceUnit (unit lp_unit, string lp_unitType, int lp_options) {
    int auto481D3762_val;

    // Variable Declarations
    int lv_owner;
    point lv_position;
    fixed lv_facing;
    unit lv_newUnit;

    // Variable Initialization
    lv_owner = 0;
    lv_position = null;
    lv_facing = 0.0;
    lv_newUnit = null;

    // Implementation
    if (((lp_unit == null) || (UnitGetType(lp_unit) == lp_unitType))) {
        return ;
    }
    else {
    }
    lv_owner = UnitGetOwner(lp_unit);
    lv_position = UnitGetPosition(lp_unit);
    lv_facing = UnitGetFacing(lp_unit);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    UnitCreate(1, lp_unitType, 0, lv_owner, lv_position, lv_facing);
    lv_newUnit = UnitLastCreated();
    auto481D3762_val = lp_options;
    if (auto481D3762_val == 0) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLife, UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropShields, UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergy, UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent));
    }
    else if (auto481D3762_val == 1) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLifePercent, UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent));
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
            UnitSetPropertyFixed(lv_newUnit, c_unitPropShieldsPercent, UnitGetPropertyFixed(lp_unit, c_unitPropShieldsPercent, c_unitPropCurrent));
        }
        else {
        }
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropCurrent) > 0.0)) {
            UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_unit, c_unitPropEnergyPercent, c_unitPropCurrent));
        }
        else {
        }
    }
    else if (auto481D3762_val == 3) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLife, UnitGetPropertyFixed(lv_newUnit, c_unitPropLifeMax, c_unitPropNormal));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropShields, UnitGetPropertyFixed(lv_newUnit, c_unitPropShieldsMax, c_unitPropNormal));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergy, UnitGetPropertyFixed(lv_newUnit, c_unitPropEnergyMax, c_unitPropNormal));
    }
    else {
    }
    UnitRemove(lp_unit);
    libNtve_gv_lastReplacedUnit = lv_newUnit;
}

unit libNtve_gf_LastReplacedUnit () {
    // Implementation
    return libNtve_gv_lastReplacedUnit;
}

void libNtve_gf_RescueUnit (unit lp_unit, int lp_player, bool lp_changeColor) {
    // Variable Declarations
    fixed lv_lifePercent;
    fixed lv_shieldsPercent;
    fixed lv_energyPercent;

    // Variable Initialization
    lv_lifePercent = 0.0;
    lv_shieldsPercent = 0.0;
    lv_energyPercent = 0.0;

    // Implementation
    SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    UnitFlashSelection(lp_unit, 0.4);
    lv_lifePercent = UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldsPercent = UnitGetPropertyFixed(lp_unit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_energyPercent = UnitGetPropertyFixed(lp_unit, c_unitPropEnergyPercent, c_unitPropCurrent);
    UnitSetOwner(lp_unit, lp_player, lp_changeColor);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, lv_lifePercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsPercent, lv_shieldsPercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropEnergyPercent, lv_energyPercent);
}

void libNtve_gf_RescueUnit2 (unitgroup lp_unit, int lp_player, bool lp_changeColor) {
    unitgroup auto5209AAFA_g;
    int auto5209AAFA_u;

    // Variable Declarations
    unit lv_forUnit;

    // Variable Initialization
    lv_forUnit = null;

    // Implementation
    auto5209AAFA_g = lp_unit;
    auto5209AAFA_u = 1;
    while (auto5209AAFA_u <= UnitGroupCount(auto5209AAFA_g, c_unitCountAll)) {
        lv_forUnit = UnitGroupUnit(auto5209AAFA_g, auto5209AAFA_u);
        libNtve_gf_RescueUnit(lv_forUnit, lp_player, lp_changeColor);
        if (lv_forUnit == UnitGroupUnit(auto5209AAFA_g, auto5209AAFA_u)) {
            auto5209AAFA_u = auto5209AAFA_u + 1;
        }
    }
}

bool libNtve_gf_UnitGroupIsDead (unitgroup lp_units) {
    // Implementation
    return (UnitGroupCount(lp_units, c_unitCountAlive) == 0);
}

void libNtve_gf_MakeUnitFacePoint (unit lp_unit, point lp_point, fixed lp_duration) {
    // Implementation
    UnitSetFacing(lp_unit, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_point), lp_duration);
}

void libNtve_gf_PauseUnit (unit lp_unit, bool lp_pauseUnpause) {
    // Implementation
    if ((lp_pauseUnpause == true)) {
        UnitSetState(lp_unit, c_unitStatePaused, true);
    }
    else {
        UnitSetState(lp_unit, c_unitStatePaused, false);
    }
}

void libNtve_gf_ShowHideUnit (unit lp_unit, bool lp_showHide) {
    // Implementation
    if ((lp_showHide == true)) {
        UnitSetState(lp_unit, c_unitStateHidden, false);
    }
    else {
        UnitSetState(lp_unit, c_unitStateHidden, true);
    }
}

void libNtve_gf_ShareVisionofUnit (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Implementation
    if ((lp_shareUnshare == true)) {
        UnitBehaviorAddPlayer(lp_unit, "PermanentShareVision", lp_player, 1);
    }
    else {
        UnitBehaviorRemovePlayer(lp_unit, "PermanentShareVision", lp_player, 1);
    }
}

bool libNtve_gf_UnitIsPaused (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStatePaused);
}

bool libNtve_gf_UnitIsHidden (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateHidden);
}

bool libNtve_gf_UnitIsVisibleToPlayer (unit lp_unit, int lp_player) {
    // Implementation
    return UnitFilterMatch(lp_unit, lp_player, UnitFilter((1 << c_targetFilterVisible), 0, 0, 0));
}

bool libNtve_gf_UnitInRegion (unit lp_u, region lp_regioin) {
    // Implementation
    return RegionContainsPoint(lp_regioin, UnitGetPosition(lp_u));
}

void libNtve_gf_MakeUnitInvulnerable (unit lp_unit, bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        UnitSetState(lp_unit, c_unitStateInvulnerable, true);
    }
    else {
        UnitSetState(lp_unit, c_unitStateInvulnerable, false);
    }
}

void libNtve_gf_MakeUnitUncommandable (unit lp_unit, bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        UnitBehaviorAdd(lp_unit, "PermanentlyUncommandable", lp_unit, 1);
    }
    else {
        UnitBehaviorRemove(lp_unit, "PermanentlyUncommandable", 1);
    }
}

bool libNtve_gf_UnitIsInvulnerable (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateInvulnerable);
}

int libNtve_gf_UnitGetPropertyKills (unit lp_u, bool lp_current) {
    // Implementation
    return FixedToInt(UnitGetPropertyFixed(lp_u, c_unitPropKills, lp_current));
}

int libNtve_gf_UnitGetPropertyResources (unit lp_u, bool lp_current) {
    // Implementation
    return FixedToInt(UnitGetPropertyFixed(lp_u, c_unitPropResources, lp_current));
}

bool libNtve_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Variable Declarations
    int lv_invalidPlayer;

    // Variable Initialization
    lv_invalidPlayer = -1;

    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", lv_invalidPlayer) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

void libNtve_gf_UnitSetVariation (unit lp_unit, string lp_model, int lp_percent, string lp_textures) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_ModelSwap(lp_model, lp_percent));
    if ((StringLength(lp_textures) > 0)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgTextureSelectBySlot("main", c_textureSlotComponentDefault, ("BestMatch " + lp_textures)));
    }
    else {
    }
}

void libNtve_gf_ChangeUnitDamage (unit lp_unit, int lp_takeDeal, int lp_option) {
    int autoFCC9BD29_val;
    int auto01104878_val;
    int autoAD3C10F2_val;
    int auto328DEC3D_val;

    // Implementation
    autoFCC9BD29_val = lp_takeDeal;
    if (autoFCC9BD29_val == 0) {
        UnitBehaviorRemove(lp_unit, "DamageTakenMega", 1);
        UnitBehaviorRemove(lp_unit, "DamageTakenMinimal", 1);
        UnitBehaviorRemove(lp_unit, "DamageTakenNone", 1);
    }
    else if (autoFCC9BD29_val == 1) {
        UnitBehaviorRemove(lp_unit, "DamageDealtMega", 1);
        UnitBehaviorRemove(lp_unit, "DamageDealtMinimal", 1);
        UnitBehaviorRemove(lp_unit, "DamageDealtNone", 1);
    }
    else {
        return ;
    }
    if ((lp_option == 0)) {
        return ;
    }
    else {
    }
    auto01104878_val = lp_takeDeal;
    if (auto01104878_val == 0) {
        autoAD3C10F2_val = lp_option;
        if (autoAD3C10F2_val == 3) {
            UnitBehaviorAdd(lp_unit, "DamageTakenMega", lp_unit, 1);
        }
        else if (autoAD3C10F2_val == 2) {
            UnitBehaviorAdd(lp_unit, "DamageTakenMinimal", lp_unit, 1);
        }
        else if (autoAD3C10F2_val == 1) {
            UnitBehaviorAdd(lp_unit, "DamageTakenNone", lp_unit, 1);
        }
        else {
        }
    }
    else if (auto01104878_val == 1) {
        auto328DEC3D_val = lp_option;
        if (auto328DEC3D_val == 3) {
            UnitBehaviorAdd(lp_unit, "DamageDealtMega", lp_unit, 1);
        }
        else if (auto328DEC3D_val == 2) {
            UnitBehaviorAdd(lp_unit, "DamageDealtMinimal", lp_unit, 1);
        }
        else if (auto328DEC3D_val == 1) {
            UnitBehaviorAdd(lp_unit, "DamageDealtNone", lp_unit, 1);
        }
        else {
        }
    }
    else {
        return ;
    }
}

unitfilter libNtve_gf_ConvertTargetFilterStringToUnitFilter (string lp_targetFilterString) {
    string auto4C294513_val;

    // Variable Declarations
    string lv_newTargetFilterString;
    int lv_wordIndex;
    string lv_wordOfFilterString;
    int lv_filterType;
    int lv_filterState;
    unitfilter lv_unitFilter;

    // Variable Initialization
    lv_newTargetFilterString = "";
    lv_wordIndex = 1;
    lv_wordOfFilterString = "";
    lv_filterType = c_targetFilterAir;
    lv_filterState = c_unitFilterRequired;
    lv_unitFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    lv_newTargetFilterString = StringReplaceWord(lp_targetFilterString, ",", " ", 0, c_stringCase);
    lv_newTargetFilterString = StringReplaceWord(lv_newTargetFilterString, ";", " DIV ", 0, c_stringCase);
    lv_wordOfFilterString = StringWord(lv_newTargetFilterString, 1);
    while ((lv_wordOfFilterString != "")) {
        if ((lv_wordOfFilterString == "DIV")) {
            lv_filterState = c_unitFilterExcluded;
        }
        else {
            if ((lv_wordOfFilterString != "-")) {
                auto4C294513_val = lv_wordOfFilterString;
                if (auto4C294513_val == "Air") {
                    lv_filterType = c_targetFilterAir;
                }
                else if (auto4C294513_val == "Ally") {
                    lv_filterType = c_targetFilterAlly;
                }
                else if (auto4C294513_val == "Armored") {
                    lv_filterType = c_targetFilterArmored;
                }
                else if (auto4C294513_val == "Biological") {
                    lv_filterType = c_targetFilterBiological;
                }
                else if (auto4C294513_val == "Buried") {
                    lv_filterType = c_targetFilterBuried;
                }
                else if (auto4C294513_val == "CanHaveEnergy") {
                    lv_filterType = c_targetFilterCanHaveEnergy;
                }
                else if (auto4C294513_val == "CanHaveShields") {
                    lv_filterType = c_targetFilterCanHaveShields;
                }
                else if (auto4C294513_val == "Cloaked") {
                    lv_filterType = c_targetFilterCloaked;
                }
                else if (auto4C294513_val == "Dead") {
                    lv_filterType = c_targetFilterDead;
                }
                else if (auto4C294513_val == "Destructible") {
                    lv_filterType = c_targetFilterDestructible;
                }
                else if (auto4C294513_val == "Enemy") {
                    lv_filterType = c_targetFilterEnemy;
                }
                else if (auto4C294513_val == "Ground") {
                    lv_filterType = c_targetFilterGround;
                }
                else if (auto4C294513_val == "Hallucination") {
                    lv_filterType = c_targetFilterHallucination;
                }
                else if (auto4C294513_val == "HarvestableResource") {
                    lv_filterType = c_targetFilterHarvestableResource;
                }
                else if (auto4C294513_val == "HasEnergy") {
                    lv_filterType = c_targetFilterHasEnergy;
                }
                else if (auto4C294513_val == "HasShields") {
                    lv_filterType = c_targetFilterHasShields;
                }
                else if (auto4C294513_val == "Hidden") {
                    lv_filterType = c_targetFilterHidden;
                }
                else if (auto4C294513_val == "Hover") {
                    lv_filterType = c_targetFilterHover;
                }
                else if (auto4C294513_val == "Invulnerable") {
                    lv_filterType = c_targetFilterInvulnerable;
                }
                else if (auto4C294513_val == "Item") {
                    lv_filterType = c_targetFilterItem;
                }
                else if (auto4C294513_val == "Light") {
                    lv_filterType = c_targetFilterLight;
                }
                else if (auto4C294513_val == "Massive") {
                    lv_filterType = c_targetFilterMassive;
                }
                else if (auto4C294513_val == "Mechanical") {
                    lv_filterType = c_targetFilterMechanical;
                }
                else if (auto4C294513_val == "Missile") {
                    lv_filterType = c_targetFilterMissile;
                }
                else if (auto4C294513_val == "Neutral") {
                    lv_filterType = c_targetFilterNeutral;
                }
                else if (auto4C294513_val == "Passive") {
                    lv_filterType = c_targetFilterPassive;
                }
                else if (auto4C294513_val == "Player") {
                    lv_filterType = c_targetFilterPlayer;
                }
                else if (auto4C294513_val == "PreventDefeat") {
                    lv_filterType = c_targetFilterPreventDefeat;
                }
                else if (auto4C294513_val == "PreventReveal") {
                    lv_filterType = c_targetFilterPreventReveal;
                }
                else if (auto4C294513_val == "Psionic") {
                    lv_filterType = c_targetFilterPsionic;
                }
                else if (auto4C294513_val == "RawResource") {
                    lv_filterType = c_targetFilterRawResource;
                }
                else if (auto4C294513_val == "Robotic") {
                    lv_filterType = c_targetFilterRobotic;
                }
                else if (auto4C294513_val == "Self") {
                    lv_filterType = c_targetFilterSelf;
                }
                else if (auto4C294513_val == "Stasis") {
                    lv_filterType = c_targetFilterStasis;
                }
                else if (auto4C294513_val == "Structure") {
                    lv_filterType = c_targetFilterStructure;
                }
                else if (auto4C294513_val == "Uncommandable") {
                    lv_filterType = c_targetFilterUncommandable;
                }
                else if (auto4C294513_val == "UnderConstruction") {
                    lv_filterType = c_targetFilterUnderConstruction;
                }
                else if (auto4C294513_val == "Visible") {
                    lv_filterType = c_targetFilterVisible;
                }
                else if (auto4C294513_val == "Worker") {
                    lv_filterType = c_targetFilterWorker;
                }
                else {
                }
                UnitFilterSetState(lv_unitFilter, lv_filterType, lv_filterState);
            }
            else {
            }
        }
        lv_wordIndex=lv_wordIndex + 1;
        lv_wordOfFilterString = StringWord(lv_newTargetFilterString, lv_wordIndex);
    }
    return lv_unitFilter;
}

bool libNtve_gf_UnitIsInsideTransport (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateInsideTransport);
}

bool libNtve_gf_UnitCanAttackUnit (unit lp_u, unit lp_s) {
    int auto761381D2_as;
    int auto761381D2_ae;
    int auto761381D2_ai;

    // Variable Declarations
    int lv_weapon;
    unitfilter lv_weaponFilter;

    // Variable Initialization
    lv_weapon = 0;
    lv_weaponFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    auto761381D2_as = 1;
    auto761381D2_ae = UnitWeaponCount(lp_u);
    auto761381D2_ai = 1;
    lv_weapon = auto761381D2_as;
    if (auto761381D2_ai > 0 || (auto761381D2_ai == 0 && auto761381D2_as < auto761381D2_ae)) {
        while (lv_weapon <= auto761381D2_ae) {
            lv_weaponFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_u, lv_weapon)), "TargetFilters", UnitGetOwner(lp_u)));
            if ((UnitWeaponIsEnabled(lp_u, lv_weapon) == true) && (UnitFilterMatch(lp_s, UnitGetOwner(lp_u), lv_weaponFilter) == true)) {
                return true;
            }
            else {
            }
            lv_weapon = lv_weapon + auto761381D2_ai;
        }
    }
    else if (auto761381D2_ai < 0 || (auto761381D2_ai == 0 && auto761381D2_ae < auto761381D2_as)) {
        while (lv_weapon >= auto761381D2_ae) {
            lv_weaponFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_u, lv_weapon)), "TargetFilters", UnitGetOwner(lp_u)));
            if ((UnitWeaponIsEnabled(lp_u, lv_weapon) == true) && (UnitFilterMatch(lp_s, UnitGetOwner(lp_u), lv_weaponFilter) == true)) {
                return true;
            }
            else {
            }
            lv_weapon = lv_weapon + auto761381D2_ai;
        }
    }
    return false;
}

bool libNtve_gf_UnitIsUnderConstruction (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateUnderConstruction);
}

void libNtve_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge) {
    // Implementation
    UnitAddChargeRegen(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeRegen(lp_inUnit, lp_inCharge)));
}

void libNtve_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Implementation
    UnitAbilityAddChargeUsed(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeUsed(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libNtve_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Implementation
    UnitAbilityAddChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libNtve_gf_UnitRemoveChargeUsed (unit lp_inUnit, string lp_inCharge) {
    // Implementation
    UnitAddChargeUsed(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeUsed(lp_inUnit, lp_inCharge)));
}

void libNtve_gf_UnitBehaviorRemoveChargeUsed (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Implementation
    UnitBehaviorAddChargeUsed(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeUsed(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

void libNtve_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Implementation
    UnitBehaviorAddChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

void libNtve_gf_UnitRemoveCooldown (unit lp_inUnit, string lp_inCooldown) {
    // Implementation
    UnitAddCooldown(lp_inUnit, lp_inCooldown, (-1.0 * UnitGetCooldown(lp_inUnit, lp_inCooldown)));
}

void libNtve_gf_UnitAbilityRemoveCooldown (unit lp_inUnit, string lp_inAbil, string lp_inCooldown) {
    // Implementation
    UnitAbilityAddCooldown(lp_inUnit, lp_inAbil, lp_inCooldown, (-1.0 * UnitAbilityGetCooldown(lp_inUnit, lp_inAbil, lp_inCooldown)));
}

void libNtve_gf_UnitBehaviorRemoveCooldown (unit lp_inUnit, string lp_inBehavior, string lp_inCooldown) {
    // Implementation
    UnitBehaviorAddCooldown(lp_inUnit, lp_inBehavior, lp_inCooldown, (-1.0 * UnitBehaviorGetCooldown(lp_inUnit, lp_inBehavior, lp_inCooldown)));
}

unitgroup libNtve_gf_ConvertUnitToUnitGroup (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    UnitGroupAdd(lv_group, lp_unit);
    return lv_group;
}

void libNtve_gf_AddUnitGroupToUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup) {
    unitgroup autoCAE39990_g;
    int autoCAE39990_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization
    lv_pickedUnit = null;

    // Implementation
    autoCAE39990_g = lp_sourceUnitGroup;
    autoCAE39990_u = 1;
    while (autoCAE39990_u <= UnitGroupCount(autoCAE39990_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(autoCAE39990_g, autoCAE39990_u);
        UnitGroupAdd(lp_targetUnitGroup, lv_pickedUnit);
        if (lv_pickedUnit == UnitGroupUnit(autoCAE39990_g, autoCAE39990_u)) {
            autoCAE39990_u = autoCAE39990_u + 1;
        }
    }
}

void libNtve_gf_RemoveUnitGroupFromUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup) {
    unitgroup auto153074BC_g;
    int auto153074BC_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization
    lv_pickedUnit = null;

    // Implementation
    auto153074BC_g = lp_sourceUnitGroup;
    auto153074BC_u = 1;
    while (auto153074BC_u <= UnitGroupCount(auto153074BC_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(auto153074BC_g, auto153074BC_u);
        UnitGroupRemove(lp_targetUnitGroup, lv_pickedUnit);
        if (lv_pickedUnit == UnitGroupUnit(auto153074BC_g, auto153074BC_u)) {
            auto153074BC_u = auto153074BC_u + 1;
        }
    }
}

unit libNtve_gf_ClosestUnitToPoint (point lp_point, unitgroup lp_group) {
    unitgroup auto9FF4A9A2_g;
    int auto9FF4A9A2_u;

    // Variable Declarations
    unit lv_pickedUnit;
    unit lv_closestUnit;
    fixed lv_distance;
    fixed lv_distanceShortest;
    point lv_unitLocation;
    fixed lv_xDiff;
    fixed lv_yDiff;

    // Variable Initialization
    lv_pickedUnit = null;
    lv_closestUnit = null;
    lv_distance = 0.0;
    lv_distanceShortest = 0.0;
    lv_unitLocation = null;
    lv_xDiff = 0.0;
    lv_yDiff = 0.0;

    // Implementation
    lv_distanceShortest = -1.0;
    lv_closestUnit = null;
    auto9FF4A9A2_g = lp_group;
    auto9FF4A9A2_u = 1;
    while (auto9FF4A9A2_u <= UnitGroupCount(auto9FF4A9A2_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(auto9FF4A9A2_g, auto9FF4A9A2_u);
        lv_unitLocation = UnitGetPosition(lv_pickedUnit);
        lv_xDiff = (PointGetX(lv_unitLocation) - PointGetX(lp_point));
        lv_yDiff = (PointGetY(lv_unitLocation) - PointGetY(lp_point));
        lv_distance = ((lv_xDiff * lv_xDiff) + (lv_yDiff * lv_yDiff));
        if (((lv_distanceShortest < 0) || (lv_distance < lv_distanceShortest))) {
            lv_distanceShortest = lv_distance;
            lv_closestUnit = lv_pickedUnit;
        }
        else {
        }
        if (lv_pickedUnit == UnitGroupUnit(auto9FF4A9A2_g, auto9FF4A9A2_u)) {
            auto9FF4A9A2_u = auto9FF4A9A2_u + 1;
        }
    }
    return lv_closestUnit;
}

point libNtve_gf_CenterOfUnitGroup (unitgroup lp_unitGroup) {
    unitgroup autoC1C95F67_g;
    int autoC1C95F67_u;

    // Variable Declarations
    unit lv_forUnit;
    point lv_unitLocation;
    fixed lv_xSum;
    fixed lv_ySum;
    int lv_count;

    // Variable Initialization
    lv_forUnit = null;
    lv_unitLocation = null;
    lv_xSum = 0.0;
    lv_ySum = 0.0;
    lv_count = 0;

    // Implementation
    lv_xSum = 0.0;
    lv_ySum = 0.0;
    lv_count = 0;
    autoC1C95F67_g = lp_unitGroup;
    autoC1C95F67_u = 1;
    while (autoC1C95F67_u <= UnitGroupCount(autoC1C95F67_g, c_unitCountAll)) {
        lv_forUnit = UnitGroupUnit(autoC1C95F67_g, autoC1C95F67_u);
        lv_unitLocation = UnitGetPosition(lv_forUnit);
        lv_xSum = (lv_xSum + PointGetX(lv_unitLocation));
        lv_ySum = (lv_ySum + PointGetY(lv_unitLocation));
        lv_count = (lv_count + 1);
        if (lv_forUnit == UnitGroupUnit(autoC1C95F67_g, autoC1C95F67_u)) {
            autoC1C95F67_u = autoC1C95F67_u + 1;
        }
    }
    if ((lv_count == 0)) {
        return null;
    }
    else {
        return Point((lv_xSum / IntToFixed(lv_count)), (lv_ySum / IntToFixed(lv_count)));
    }
}

void libNtve_gf_ShowHidePlacementModels (bool lp_show) {
    // Implementation
    if ((lp_show == true)) {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal ShowPlacement");
    }
    else {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal HidePlacement");
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ScreenButton Clicked
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_ScreenButtonClicked_Func (bool testConds, bool runActions) {
    int auto6600C605_as;
    int auto6600C605_ae;
    int auto6600C605_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6600C605_as = 1;
    auto6600C605_ae = libNtve_gv_c_ScreenButtonMaxCount;
    auto6600C605_ai = 1;
    lv_index = auto6600C605_as;
    if (auto6600C605_ai > 0 || (auto6600C605_ai == 0 && auto6600C605_as < auto6600C605_ae)) {
        while (lv_index <= auto6600C605_ae) {
            if ((EventDialogControl() == libNtve_gv_screenButtons[lv_index])) {
                TriggerExecute(libNtve_gv_screenButtonCallbacks[lv_index], true, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto6600C605_ai;
        }
    }
    else if (auto6600C605_ai < 0 || (auto6600C605_ai == 0 && auto6600C605_ae < auto6600C605_as)) {
        while (lv_index >= auto6600C605_ae) {
            if ((EventDialogControl() == libNtve_gv_screenButtons[lv_index])) {
                TriggerExecute(libNtve_gv_screenButtonCallbacks[lv_index], true, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto6600C605_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_ScreenButtonClicked_Init () {
    libNtve_gt_ScreenButtonClicked = TriggerCreate("libNtve_gt_ScreenButtonClicked_Func");
    TriggerAddEventDialogControl(libNtve_gt_ScreenButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Screen Button
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_FlashScreenButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;
    fixed lv_flashTime;
    fixed lv_flashTimeHalf;
    color lv_color1;
    color lv_color2;
    int lv_image;

    // Variable Initialization
    lv_iD = 0;
    lv_flashTime = 0.0;
    lv_flashTimeHalf = 0.0;
    lv_color1 = Color(0,0,0);
    lv_color2 = Color(0,0,0);
    lv_image = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = libNtve_gv_tP_FlashScreenButtonID;
    lv_flashTime = libNtve_gv_tP_FlashScreenButtonFlashTime;
    lv_color1 = libNtve_gv_tP_FlashScreenButtonColor1;
    lv_color2 = libNtve_gv_tP_FlashScreenButtonColor2;
    lv_flashTimeHalf = (lv_flashTime / 2.0);
    if (((lv_flashTime <= 0.0) || (lv_flashTimeHalf <= 0.0))) {
        return true;
    }
    else {
    }
    while (!((libNtve_gv_screenButtonsFlashStopping[lv_iD] == false))) {
        Wait(0.125, c_timeReal);
    }
    if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == true))) {
        return true;
    }
    else {
    }
    libNtve_gv_screenButtonsFlashing[lv_iD] = true;
    while (true) {
        if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == false) || (libNtve_gv_screenButtonsFlashStopping[lv_iD] == true))) {
            break;
        }
        else {
        }
        libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingBorderType[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingBorderImage[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingHoverImage[lv_iD], PlayerGroupAll());
        Wait(lv_flashTimeHalf, c_timeReal);
        if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == false) || (libNtve_gv_screenButtonsFlashStopping[lv_iD] == true))) {
            break;
        }
        else {
        }
        libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderType[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderImage[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsHoverImage[lv_iD], PlayerGroupAll());
        Wait(lv_flashTimeHalf, c_timeReal);
    }
    libNtve_gv_screenButtonsFlashing[lv_iD] = false;
    libNtve_gv_screenButtonsFlashStopping[lv_iD] = false;
    libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderType[lv_iD], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderImage[lv_iD], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsHoverImage[lv_iD], PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_FlashScreenButton_Init () {
    libNtve_gt_FlashScreenButton = TriggerCreate("libNtve_gt_FlashScreenButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulse Screen Image
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_PulseScreenImage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_screenImageID;
    fixed lv_period;
    fixed lv_transparency1;
    fixed lv_transparency2;
    fixed lv_halfPeriod;

    // Variable Initialization
    lv_screenImageID = 0;
    lv_period = 0.0;
    lv_transparency1 = 0.0;
    lv_transparency2 = 0.0;
    lv_halfPeriod = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_screenImageID = libNtve_gv_tP_PulseScreenImageID;
    lv_period = libNtve_gv_tP_PulseScreenImagePeriod;
    lv_transparency1 = libNtve_gv_tP_PulseScreenImageTransparency1;
    lv_transparency2 = libNtve_gv_tP_PulseScreenImageTransparency2;
    if (((lv_period <= 0.0) || (libNtve_gv_screenImageDialogs[lv_screenImageID] == c_invalidDialogId) || (libNtve_gv_screenImagePulsing[lv_screenImageID] == true))) {
        return true;
    }
    else {
    }
    libNtve_gv_screenImagePulsing[lv_screenImageID] = true;
    lv_halfPeriod = (lv_period / 2.0);
    libNtve_gf_HideScreenImage(true, lv_screenImageID);
    DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), 0.0, lv_transparency1);
    while (true) {
        DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), lv_halfPeriod, lv_transparency2);
        Wait(lv_halfPeriod, c_timeGame);
        if ((libNtve_gv_screenImagePulsing[lv_screenImageID] == false)) {
            return true;
        }
        else {
        }
        DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), lv_halfPeriod, lv_transparency1);
        Wait(lv_halfPeriod, c_timeGame);
        if ((libNtve_gv_screenImagePulsing[lv_screenImageID] == false)) {
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_PulseScreenImage_Init () {
    libNtve_gt_PulseScreenImage = TriggerCreate("libNtve_gt_PulseScreenImage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Map Initialization
//--------------------------------------------------------------------------------------------------
bool libNtve_gt__MapInitialization_Func (bool testConds, bool runActions) {
    playergroup autoF196A52B_g;
    int autoF196A52B_p;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF196A52B_g = PlayerGroupAll();
    autoF196A52B_p = 1;
    while (autoF196A52B_p <= PlayerGroupCount(autoF196A52B_g)) {
        lv_player = PlayerGroupPlayer(autoF196A52B_g, autoF196A52B_p);
        libNtve_gv__GameTimer[lv_player] = TimerCreate();
        TimerStart(libNtve_gv__GameTimer[lv_player], c_timerDurationInfinite, false, c_timeGame);
        if ((libNtve_gf_PlayerInCinematicMode(lv_player) == true)) {
            TimerPause(libNtve_gv__GameTimer[lv_player], true);
        }
        else {
        }
        if (lv_player == PlayerGroupPlayer(autoF196A52B_g, autoF196A52B_p)) {
            autoF196A52B_p = autoF196A52B_p + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt__MapInitialization_Init () {
    libNtve_gt__MapInitialization = TriggerCreate("libNtve_gt__MapInitialization_Func");
    TriggerAddEventMapInit(libNtve_gt__MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libNtve_gt__BB_BossHPChanged_Func (bool testConds, bool runActions) {
    int auto8BB89956_as;
    int auto8BB89956_ae;
    int auto8BB89956_ai;

    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Variable Initialization
    lv_index = 0;
    lv_bossSet = false;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8BB89956_as = 1;
    auto8BB89956_ae = libNtve_gv__BBC_BossBarMaxCount;
    auto8BB89956_ai = 1;
    lv_index = auto8BB89956_as;
    if (auto8BB89956_ai > 0 || (auto8BB89956_ai == 0 && auto8BB89956_as < auto8BB89956_ae)) {
        while (lv_index <= auto8BB89956_ae) {
            if ((libNtve_gv__BB_Boss[lv_index] == EventUnit())) {
                libNtve_gf_RefreshBossBar(lv_index);
            }
            else {
            }
            if ((libNtve_gv__BB_Boss[lv_index] != null)) {
                lv_bossSet = true;
            }
            else {
            }
            lv_index = lv_index + auto8BB89956_ai;
        }
    }
    else if (auto8BB89956_ai < 0 || (auto8BB89956_ai == 0 && auto8BB89956_ae < auto8BB89956_as)) {
        while (lv_index >= auto8BB89956_ae) {
            if ((libNtve_gv__BB_Boss[lv_index] == EventUnit())) {
                libNtve_gf_RefreshBossBar(lv_index);
            }
            else {
            }
            if ((libNtve_gv__BB_Boss[lv_index] != null)) {
                lv_bossSet = true;
            }
            else {
            }
            lv_index = lv_index + auto8BB89956_ai;
        }
    }
    if ((lv_bossSet == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt__BB_BossHPChanged_Init () {
    libNtve_gt__BB_BossHPChanged = TriggerCreate("libNtve_gt__BB_BossHPChanged_Func");
    TriggerEnable(libNtve_gt__BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libNtve_gt__BB_BossHPChanged, null, c_unitPropLife);
    TriggerAddEventUnitProperty(libNtve_gt__BB_BossHPChanged, null, c_unitPropShields);
}

void libNtve_InitTriggers () {
    libNtve_gt_ScreenButtonClicked_Init();
    libNtve_gt_FlashScreenButton_Init();
    libNtve_gt_PulseScreenImage_Init();
    libNtve_gt__MapInitialization_Init();
    libNtve_gt__BB_BossHPChanged_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNtve_InitLib_completed = false;

void libNtve_InitLib () {
    if (libNtve_InitLib_completed) {
        return;
    }

    libNtve_InitVariables();
    libNtve_InitTriggers();

    libNtve_InitLib_completed = true;
}

