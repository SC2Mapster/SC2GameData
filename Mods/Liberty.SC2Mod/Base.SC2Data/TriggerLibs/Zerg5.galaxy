//==================================================================================================
//  Zerg Melee Insane
//==================================================================================================

static const int e_mainSubState_Open6Pool5            = 2;   // 6 pool zergling rush, no gas
static const int e_mainSubState_OpenBasicZergling5    = 3;   // pure zergling, one gas
static const int e_mainSubState_OpenBasicRoach5       = 4;   // roach build, one gas
static const int e_mainSubState_OpenRoachTech5        = 5;   // roach, double gas
static const int e_mainSubState_OpenLingTech5         = 6;   // zergling, double gas
static const int e_mainSubState_OpenQuickExpandGnd5   = 7;   // quick expand

static const int e_mainSubState_OpenBasicAir5         = 8;
static const int e_mainSubState_OpenQuickExpandAir5   = 9;

static const int e_mainSubState_MidLingEarlyBaneling5 = 10;
static const int e_mainSubState_MidLingEarlyRoach5    = 11;
static const int e_mainSubState_MidLingMidBaneling5   = 12;
static const int e_mainSubState_MidLingMidRoach5      = 13;
static const int e_mainSubState_MidLingBaneHydra5     = 14;
static const int e_mainSubState_MidRoachRush5         = 15;
static const int e_mainSubState_MidRoachHydra5        = 16;
static const int e_mainSubState_MidRoachMuta5         = 17;
static const int e_mainSubState_MidLingMuta5          = 18;

static const int e_mainSubState_MidAirDropRush5       = 19;
static const int e_mainSubState_MidAirMutaRush5       = 20;
static const int e_mainSubState_MidAirDrop5           = 21;
static const int e_mainSubState_MidAirMuta5           = 22;
static const int e_mainSubState_MidAirMutaCorr5       = 23;

static const int e_mainSubState_LateRoachHydra5       = 24;
static const int e_mainSubState_LateRoachHydraBrood5  = 25;
static const int e_mainSubState_LateRoachHydraInfest5 = 26;
static const int e_mainSubState_LateRoachHydraBane5   = 27;
static const int e_mainSubState_LateRoachHydraMuta5   = 28;
static const int e_mainSubState_LateUltraHydra5       = 29;
static const int e_mainSubState_LateUltraMuta5        = 30;
static const int e_mainSubState_LateMutaBrood5        = 31;

//--------------------------------------------------------------------------------------------------
//  ZergOpenInitGnd5
//--------------------------------------------------------------------------------------------------
static void ZergOpenInitGnd5(int player) {
    int race = AIGetEnemyRaceVal(player);

    AILimitStockLarva(player, c_ZU_Larva);

    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenBasicRoach5);

    if (race != c_raceMulti) {
        // single enemy
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            if (race == c_raceTerran && AIHasNearbyOpenExpansion(player)) {
                AISetSubStateChance( e_mainSubState_OpenQuickExpandGnd5,  4 );
            }

            // all start locations are accessible on the ground       random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_Open6Pool5,          2,     4,     2,     2 ); //   2,   4,   2,   2
            AISetSubStateChanceRace( e_mainSubState_OpenBasicZergling5,  6,     6,     6,     2 ); //   8,  10,   8,   4
            AISetSubStateChanceRace( e_mainSubState_OpenBasicRoach5,    60,    56,    38,    62 ); //  68,  66,  46,  66
            AISetSubStateChanceRace( e_mainSubState_OpenRoachTech5,     30,    32,    52,    32 ); //  98,  98,  98,  98
            AISetSubStateChanceRace( e_mainSubState_OpenLingTech5,       2,     2,     2,     2 ); // 100, 100, 100, 100
        }
        else {
            if (race == c_raceTerran && AIHasNearbyOpenExpansion(player)) {
                AISetSubStateChance( e_mainSubState_OpenQuickExpandGnd5,  8 );
            }

            // might not be able to reach them on the ground          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_Open6Pool5,          2,     2,     2,     2 ); //   2,   2,   2,   2
            AISetSubStateChanceRace( e_mainSubState_OpenBasicZergling5,  2,     2,     2,     2 ); //   4,   4,   4,   4
            AISetSubStateChanceRace( e_mainSubState_OpenBasicRoach5,    32,    32,    24,    30 ); //  36,  36,  28,  34
            AISetSubStateChanceRace( e_mainSubState_OpenRoachTech5,     62,    62,    70,    64 ); //  98,  98,  98,  98
            AISetSubStateChanceRace( e_mainSubState_OpenLingTech5,       2,     2,     2,     2 ); // 100, 100, 100, 100
        }
    }
    else {
        // multiple enemies
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground
            AISetSubStateChance( e_mainSubState_Open6Pool5,          2 ); //   2
            AISetSubStateChance( e_mainSubState_OpenBasicZergling5,  6 ); //   8
            AISetSubStateChance( e_mainSubState_OpenBasicRoach5,    56 ); //  64
            AISetSubStateChance( e_mainSubState_OpenRoachTech5,     34 ); //  98 
            AISetSubStateChance( e_mainSubState_OpenLingTech5,       2 ); // 100
        }                                                           
        else {                                                      
            // might not be able to reach them on the ground        
            AISetSubStateChance( e_mainSubState_Open6Pool5,          2 ); //   2
            AISetSubStateChance( e_mainSubState_OpenBasicZergling5,  2 ); //   4
            AISetSubStateChance( e_mainSubState_OpenBasicRoach5,    32 ); //  46
            AISetSubStateChance( e_mainSubState_OpenRoachTech5,     64 ); //  98 
            AISetSubStateChance( e_mainSubState_OpenLingTech5,       2 ); // 100
        }
    }

    AISetMainState(player, e_mainState_OpenGnd5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenGndGoMid5
//--------------------------------------------------------------------------------------------------
static void ZergOpenGndGoMid5(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidRoachHydra5);
    
    if (AIGetNumEnemies(player) == 1) {
        if (curSubState == e_mainSubState_Open6Pool5) {                 //  2,     4,     2,     2
            // did a very quick "6 pool" zergling rush with no gas       random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyBaneling5, 20,    12,    32,    12 );  //  20,  12,  32,  12
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,    26,    34,    14,    32 );  //  46,  46,  46,  44
            AISetSubStateChanceRace( e_mainSubState_MidLingMidBaneling5,   20,    12,    32,    12 );  //  66,  58,  78,  56
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,      26,    34,    14,    32 );  //  92,  92,  92,  88
            AISetSubStateChanceRace( e_mainSubState_MidLingMuta5,           8,     8,     8,    12 );  // 100, 100, 100, 100
        }                                                                  
        else if (curSubState == e_mainSubState_OpenBasicZergling5) {    //  6,     6,     6,     2
            // did a basic zergling build with a single gas              random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyBaneling5, 12,    12,    22,    12 );  //  12,  12,  22,  12
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,    20,    20,    10,    20 );  //  32,  32,  32,  32
            AISetSubStateChanceRace( e_mainSubState_MidLingMidBaneling5,   12,    12,    22,    12 );  //  44,  44,  54,  44
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,      20,    20,    10,    20 );  //  64,  64,  64,  64
            AISetSubStateChanceRace( e_mainSubState_MidLingBaneHydra5,     14,    16,    22,    10 );  //  78,  80,  86,  74
            AISetSubStateChanceRace( e_mainSubState_MidRoachHydra5,        10,    10,    10,    10 );  //  88,  90,  96,  84
            AISetSubStateChanceRace( e_mainSubState_MidLingMuta5,          12,    10,     4,    16 );  // 100, 100, 100, 100
        }                                                                  
        else if (curSubState == e_mainSubState_OpenBasicRoach5) {       // 60,    56,    38,    62
            // did a basic roach build with a single gas                 random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,    10,     8,     6,    12 );  //  10,   8,   6,  12
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,      10,     8,     6,    12 );  //  20,  16,  12,  24
            AISetSubStateChanceRace( e_mainSubState_MidRoachRush5,         48,    50,    54,    48 );  //  68,  66,  66,  72
            AISetSubStateChanceRace( e_mainSubState_MidRoachHydra5,        28,    28,    32,    22 );  //  96,  94,  98,  94
            AISetSubStateChanceRace( e_mainSubState_MidRoachMuta5,          4,     6,     2,     6 );  // 100, 100, 100, 100
        }                                                                  
        else if (curSubState == e_mainSubState_OpenRoachTech5) {        // 30,    32,    52,    32
            // did a basic roach opening with double gas                 random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,     4,     4,     2,     6 );  //   4,   4,   2,   6
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,       4,     4,     2,     6 );  //   8,   8,   4,  12
            AISetSubStateChanceRace( e_mainSubState_MidRoachRush5,         18,    16,    14,    20 );  //  26,  24,  18,  32
            AISetSubStateChanceRace( e_mainSubState_MidRoachHydra5,        54,    52,    70,    44 );  //  80,  76,  88,  76
            AISetSubStateChanceRace( e_mainSubState_MidRoachMuta5,         20,    24,    12,    24 );  // 100, 100, 100, 100
        }                                                                  
        else if (curSubState == e_mainSubState_OpenLingTech5) {         //  2,     2,     2,     2
            // did a basic zergling opening but with double gas          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyBaneling5,  8,     8,     6,     8 );  //   8,   8,   6,   8
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,     8,    12,    12,    10 );  //  16,  20,  18,  18
            AISetSubStateChanceRace( e_mainSubState_MidLingMidBaneling5,    8,     8,     6,     8 );  //  24,  28,  24,  26
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,      10,    12,    12,    10 );  //  34,  40,  36,  36
            AISetSubStateChanceRace( e_mainSubState_MidLingBaneHydra5,     28,    26,    36,    18 );  //  62,  66,  72,  54
            AISetSubStateChanceRace( e_mainSubState_MidRoachHydra5,        14,     8,    18,    14 );  //  76,  74,  90,  68
            AISetSubStateChanceRace( e_mainSubState_MidLingMuta5,          24,    26,    10,    32 );  // 100, 100, 100, 100
        }                                                                  
        else if (curSubState == e_mainSubState_OpenQuickExpandGnd5) {   //  0,     0,    ~6,     0
            // did a quick expand, for now only used against terran      random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyBaneling5,  4,     4,     4,     4 );  //   4,   4,   4,   4
            AISetSubStateChanceRace( e_mainSubState_MidLingEarlyRoach5,     4,     4,     4,     4 );  //   8,   8,   8,   8
            AISetSubStateChanceRace( e_mainSubState_MidLingMidBaneling5,   22,    22,    22,    22 );  //  30,  30,  30,  30
            AISetSubStateChanceRace( e_mainSubState_MidLingMidRoach5,      14,    14,    14,    14 );  //  44,  44,  44,  44
            AISetSubStateChanceRace( e_mainSubState_MidLingBaneHydra5,     24,    24,    24,    24 );  //  68,  68,  68,  68
            AISetSubStateChanceRace( e_mainSubState_MidRoachRush5,          4,     4,     4,     4 );  //  72,  72,  72,  72
            AISetSubStateChanceRace( e_mainSubState_MidRoachHydra5,        16,    16,    16,    16 );  //  88,  88,  88,  88
            AISetSubStateChanceRace( e_mainSubState_MidRoachMuta5,          4,     4,     4,     4 );  //  92,  92,  92,  92
            AISetSubStateChanceRace( e_mainSubState_MidLingMuta5,           8,     8,     8,     8 );  // 100, 100, 100, 100
        }
    }
    else {
        if (curSubState == e_mainSubState_Open6Pool5) {  // 2
            // did a very quick "6 pool" zergling rush with no gas
            AISetSubStateChance( e_mainSubState_MidLingEarlyBaneling5,  20 );  //  20
            AISetSubStateChance( e_mainSubState_MidLingEarlyRoach5,     12 );  //  32
            AISetSubStateChance( e_mainSubState_MidLingMidBaneling5,    20 );  //  52
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,       30 );  //  82
            AISetSubStateChance( e_mainSubState_MidLingMuta5,           18 );  // 100
        }                                                               
        else if (curSubState == e_mainSubState_OpenBasicZergling5) {  // 6
            // did a basic zergling build with a single gas             
            AISetSubStateChance( e_mainSubState_MidLingEarlyBaneling5,  10 );  //  10
            AISetSubStateChance( e_mainSubState_MidLingEarlyRoach5,     16 );  //  26
            AISetSubStateChance( e_mainSubState_MidLingMidBaneling5,    10 );  //  36
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,       16 );  //  52
            AISetSubStateChance( e_mainSubState_MidLingBaneHydra5,      20 );  //  72
            AISetSubStateChance( e_mainSubState_MidRoachHydra5,          6 );  //  78
            AISetSubStateChance( e_mainSubState_MidLingMuta5,           22 );  // 100
        }                                                               
        else if (curSubState == e_mainSubState_OpenBasicRoach5) {  // 56
            // did a basic roach build with a single gas                
            AISetSubStateChance( e_mainSubState_MidLingEarlyRoach5,      8 );  //   8
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,        6 );  //  14
            AISetSubStateChance( e_mainSubState_MidRoachRush5,          54 );  //  68
            AISetSubStateChance( e_mainSubState_MidRoachHydra5,         28 );  //  96
            AISetSubStateChance( e_mainSubState_MidRoachMuta5,           4 );  // 100
        }                                                               
        else if (curSubState == e_mainSubState_OpenRoachTech5) {  // 34 
            // did a basic roach opening with double gas to tech up     
            AISetSubStateChance( e_mainSubState_MidLingEarlyRoach5,      4 );  //   4
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,        4 );  //   8
            AISetSubStateChance( e_mainSubState_MidRoachRush5,          16 );  //  24
            AISetSubStateChance( e_mainSubState_MidRoachHydra5,         50 );  //  74
            AISetSubStateChance( e_mainSubState_MidRoachMuta5,          26 );  // 100
        }                                                               
        else if (curSubState == e_mainSubState_OpenLingTech5) {  // 2   
            // did a basic zergling opening but with double gas to tech up
            AISetSubStateChance( e_mainSubState_MidLingEarlyBaneling5,   6 );  //   6
            AISetSubStateChance( e_mainSubState_MidLingEarlyRoach5,      6 );  //  12
            AISetSubStateChance( e_mainSubState_MidLingMidBaneling5,    16 );  //  28
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,       20 );  //  48
            AISetSubStateChance( e_mainSubState_MidLingBaneHydra5,      32 );  //  80
            AISetSubStateChance( e_mainSubState_MidRoachHydra5,          4 );  //  84
            AISetSubStateChance( e_mainSubState_MidLingMuta5,           16 );  // 100
        }                                                               
        else if (curSubState == e_mainSubState_OpenQuickExpandGnd5) {  // 0
            // did a quick expand, should never have been choosen with multiple opponents??
            AISetSubStateChance( e_mainSubState_MidLingMidRoach5,       10 );  //  10
            AISetSubStateChance( e_mainSubState_MidLingBaneHydra5,      10 );  //  20
            AISetSubStateChance( e_mainSubState_MidRoachHydra5,         60 );  //  80
            AISetSubStateChance( e_mainSubState_MidRoachMuta5,          10 );  //  90
            AISetSubStateChance( e_mainSubState_MidLingMuta5,           10 );  // 100
        }
    }

    AISetMainState(player, e_mainState_Mid5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ZergOpen6Pool5
//--------------------------------------------------------------------------------------------------
static void ZergOpen6Pool5(int player) {
    int numZergling;

    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 11, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 6, c_ZU_Zergling );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 12, c_ZU_Drone );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 24, c_ZU_Zergling );
    AISetStock( player, 5, c_ZU_Overlord );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 2, 6, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_ZU_Zergling, c_techCountInProgressOrBetter) < 24) {
            return;
        }
    }

    ZergOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenBasicZergling5
//--------------------------------------------------------------------------------------------------
static void ZergOpenBasicZergling5(int player) {
    // can be followed by Muta mid (ie needs gas to prepare for mutas & zergling speed)
    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 10, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Overlord );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 2, 6, c_continuousMerge);

    if (AIGetTime() < 240) {
        if (AITechCount(player, c_ZU_Zergling, c_techCountCompleteOnly) < 8) {
            return;
        }
    }

    ZergOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenBasicRoach5
//--------------------------------------------------------------------------------------------------
static void ZergOpenBasicRoach5(int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 8, c_ZU_Roach );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Roach );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_ZU_Roach, 2, 4, c_continuousMerge);

    if (AIGetTime() < 270) {
        if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }

    ZergOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenRoachTech5
//--------------------------------------------------------------------------------------------------
static void ZergOpenRoachTech5(int player) {
    int numRoach;

    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 3, c_ZU_Overlord );   
    AISetStock( player, 16, c_ZU_Drone ); 
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Overlord );   
    AISetStock( player, 4, c_ZU_Roach );
    AISetStock( player, 22, c_ZU_Drone ); 
    AISetStock( player, 6, c_ZU_Overlord );  
    AISetStock( player, 12, c_ZU_Roach ); 
    AISetStock( player, 8, c_ZU_Overlord ); 

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 4, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }

    ZergOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenLingTech5
//--------------------------------------------------------------------------------------------------
static void ZergOpenLingTech5(int player) {
    int numZergling;

    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 4, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 28, c_ZU_Zergling );
    AISetStock( player, 7, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 2, 8, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_ZU_Zergling, c_techCountInProgressOrBetter) < 18) {
            return;
        }
    }

    ZergOpenGndGoMid5(player);
}

// OpenQuickExpandGnd5  is below combined with OpenQuickExpandAir5

//--------------------------------------------------------------------------------------------------
//  ZergOpenInitAir4
//--------------------------------------------------------------------------------------------------
static void ZergOpenInitAir5(int player) {
    AILimitStockLarva(player, c_ZU_Larva);

    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenBasicAir5);

    if (AIHasNearbyOpenExpansion(player)) {
        AISetSubStateChance( e_mainSubState_OpenQuickExpandAir5, 30 );
    }

    AISetMainState(player, e_mainState_OpenAir5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenAirGoMid5
//--------------------------------------------------------------------------------------------------
static void ZergOpenAirGoMid5(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidAirMuta5);
    
    if (curSubState == e_mainSubState_OpenBasicAir5) {  // 70
        AISetSubStateChance( e_mainSubState_MidAirDropRush5,  15 ); // 15
        AISetSubStateChance( e_mainSubState_MidAirMutaRush5,  15 ); // 30
        AISetSubStateChance( e_mainSubState_MidAirDrop5,      10 ); // 40
        AISetSubStateChance( e_mainSubState_MidAirMuta5,      30 ); // 70
        AISetSubStateChance( e_mainSubState_MidAirMutaCorr5,  30 ); //100
    } 
    else if (curSubState == e_mainSubState_OpenQuickExpandAir5) {  // 30
        AISetSubStateChance( e_mainSubState_MidAirDropRush5,   5 ); //  5
        AISetSubStateChance( e_mainSubState_MidAirMutaRush5,   5 ); // 10
        AISetSubStateChance( e_mainSubState_MidAirDrop5,      15 ); // 25
        AISetSubStateChance( e_mainSubState_MidAirMuta5,      35 ); // 60
        AISetSubStateChance( e_mainSubState_MidAirMutaCorr5,  40 ); //100
    }

    AISetMainState(player, e_mainState_Mid5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenBasicAir5
//--------------------------------------------------------------------------------------------------
static void ZergOpenBasicAir5(int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 14, c_ZU_Drone );

    AIEnableStock(player);

    //---------------------------------------------------------
    
    if (AIGetTime() < 240) {
        if (AITechCount(player, c_ZB_Extractor, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    ZergOpenAirGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergFastExpand5
//--------------------------------------------------------------------------------------------------
static void ZergFastExpand5 (int player) {
    int state;
    int count = 0;
    int i = -1;
    
    while (i < c_townMax) {
        i = i + 1;
        state = AIGetTownState(player, i);
        if (state == c_townStateClaimed) {
            return; // already expanding
        }
        if (state != c_townStateEstablished) {
            continue;
        }
        if (count == 1) {
            return; // found 2nd town
        }
        count = 1;
    }
    AIExpand(player, AIGetTownLocation(player, c_townMain), c_ZB_Hatchery);
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenQuickExpand4
//--------------------------------------------------------------------------------------------------
static void ZergOpenQuickExpand5(int player) {
    int mainSubState;
    
    AIClearStock(player);
    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 14, c_ZU_Drone );

    if (AITechCount(player, c_ZU_Drone, c_techCountQueuedOrBetter) >= 14) {
        if (AITechCount(player, c_ZB_Hatchery_Alias, c_techCountQueuedOrBetter) < 2) {
            ZergFastExpand5(player);
            AIEnableStock(player);
            return;
        }
    }

    AISetStock( player, 15, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 17, c_ZU_Drone );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 20, c_ZU_Drone );

    AIEnableStock(player);

    if (AITechCount(player, c_ZB_Hatchery_Alias, c_techCountInProgressOrBetter) < 2) {
        return;
    }

    mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_OpenQuickExpandAir5) { ZergOpenAirGoMid5(player); }
    else if (mainSubState == e_mainSubState_OpenQuickExpandGnd5) { ZergOpenGndGoMid5(player); }
    else { ErrorMeleeScript(player, "Invalid zerg quick expand state"); }
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenGnd5
//--------------------------------------------------------------------------------------------------
void ZergOpenGnd5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    AIEarlyDefenseScouting(player);

    if (mainSubState == e_mainSubState_Unset)                    { ZergOpenInitGnd5(player); }
    else if (mainSubState == e_mainSubState_Open6Pool5)          { ZergOpen6Pool5(player); }
    else if (mainSubState == e_mainSubState_OpenBasicZergling5)  { ZergOpenBasicZergling5(player); }
    else if (mainSubState == e_mainSubState_OpenBasicRoach5)     { ZergOpenBasicRoach5(player); }
    else if (mainSubState == e_mainSubState_OpenRoachTech5)      { ZergOpenRoachTech5(player); }
    else if (mainSubState == e_mainSubState_OpenLingTech5)       { ZergOpenLingTech5(player); }
    else if (mainSubState == e_mainSubState_OpenQuickExpandGnd5) { ZergOpenQuickExpand5(player); }
    else { ErrorMeleeScript(player, "Invalid OpenGnd mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ZergOpenAir5
//--------------------------------------------------------------------------------------------------
void ZergOpenAir5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState == e_mainSubState_Unset)                    { ZergOpenInitAir5(player); }
    else if (mainSubState == e_mainSubState_OpenBasicAir5)       { ZergOpenBasicAir5(player); }
    else if (mainSubState == e_mainSubState_OpenQuickExpandAir5) { ZergOpenQuickExpand5(player); }
    else { ErrorMeleeScript(player, "Invalid OpenAir mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ZergGoLate5
//--------------------------------------------------------------------------------------------------
static void ZergGoLate5 (int player) {
    if (AIState(player, e_attackState) == e_attackState_Wait) {
        AIWaveMerge(player, c_waveMain, c_waveAttack);
        AISetAttackState(player, e_attackState_Attack);
    }
    AIResetUserData(player);
    //AISetNumScouts(player, 2);
    AISetFlag(player, e_flagsTimeout, true);
    AISetFlag(player, e_flagsDetect, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsDiversion, true);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AILimitStockLarva(player, c_ZU_Larva);
    AISetMainState(player, e_mainState_Late5, e_mainSubState_Unset);
}

//--------------------------------------------------------------------------------------------------
//  ZergDefaultExtraMidStock5
//--------------------------------------------------------------------------------------------------
static void ZergDefaultExtraMidStock5 (int player) {
    int numHatch = 0;
    int numQueen = 0;
    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        if (AIHasRes(player,300,0)) {
            numHatch = AITechCount(player, c_ZB_Hatchery_Alias, c_techCountCompleteOnly);
            numQueen = AITechCount(player, c_ZU_Queen, c_techCountInProgressOrBetter);
            if (numQueen < numHatch) {
                AISetStockUnitNext( player, numHatch, c_ZU_Queen, c_stockAlways );
            }
            else if (AIHasRes(player,800,0)) {           
                numHatch = AITechCount(player, c_ZB_Hatchery_Alias, c_techCountIncompleteOnly);
                if (numHatch == 0) {
                    AISetStockUnitNext( player, 5, c_ZB_Hatchery_Alias, c_stockAlways );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingEarlyBaneling5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingEarlyBaneling5 (int player) {
    AIClearStock(player);
    
    // currently this is a duplicate of MidLingMidBaneling because the earlier baneling was just worse
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 11, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 6, c_ZU_Zergling );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 12, c_ZU_Drone );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 24, c_ZU_Zergling );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 32, c_ZU_Zergling );
    AISetStock( player, 1, c_ZB_BanelingNest );
    AISetStock( player, 40, c_ZU_Zergling );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 16, c_ZU_Baneling );
    AISetStock( player, 9, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 4, 24, c_continuousMerge);
    if (AITechCount(player, c_ZU_Zergling, c_techCountCompleteOnly) >= 6) {
        AISetAttackStatus(player, c_ZU_Baneling, 1, 6, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Baneling, c_techCountInProgressOrBetter) < 16) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingEarlyRoach5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingEarlyRoach5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Zergling );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 8, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 6, c_ZU_Roach );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Roach );
    AISetStock( player, 18, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 16, c_ZU_Roach );
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 10, c_ZU_Overlord );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 20, c_ZU_Roach );
    AISetStock( player, 11, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Roach );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 6, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) < 20) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingMidBaneling5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingMidBaneling5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 11, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 6, c_ZU_Zergling );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 12, c_ZU_Drone );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 24, c_ZU_Zergling );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 32, c_ZU_Zergling );
    AISetStock( player, 1, c_ZB_BanelingNest );
    AISetStock( player, 40, c_ZU_Zergling );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 16, c_ZU_Baneling );
    AISetStock( player, 9, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 4, 24, c_continuousMerge);
    if (AITechCount(player, c_ZU_Zergling, c_techCountCompleteOnly) >= 6) {
        AISetAttackStatus(player, c_ZU_Baneling, 1, 6, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Baneling, c_techCountInProgressOrBetter) < 16) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingMidRoach5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingMidRoach5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 8, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 18, c_ZU_Drone );
    AISetStock( player, 12, c_ZU_Zergling );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 8, c_ZU_Roach );
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 16, c_ZU_Roach );
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 10, c_ZU_Overlord );
    AISetStock( player, 20, c_ZU_Roach );
    AISetStock( player, 11, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Roach );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 6, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) < 20) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingBaneHydra5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingBaneHydra5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);    
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 4, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 18, c_ZU_Zergling );
    AISetStock( player, 1, c_ZB_BanelingNest );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 30, c_ZU_Zergling );
    AISetStock( player, 16, c_ZU_Baneling );
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Hydralisk );
    AISetStock( player, 11, c_ZU_Overlord );
    AISetStock( player, 16, c_ZU_Hydralisk );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 2, 30, c_continuousMerge);
    if (AITechCount(player, c_ZU_Zergling, c_techCountCompleteOnly) >= 12) {
        AISetAttackStatus(player, c_ZU_Baneling, 1, 4, c_continuousMerge);
        AISetAttackStatus(player, c_ZU_Hydralisk, 1, 2, c_continuousMerge);
    }
    
    if (AIGetTime() < 540) {
        if (AITechCount(player, c_ZU_Hydralisk, c_techCountInProgressOrBetter) < 12) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidRoachRush5
//--------------------------------------------------------------------------------------------------
static void ZergMidRoachRush5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 8, c_ZU_Roach );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Roach );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 18, c_ZU_Drone );
    AISetStock( player, 16, c_ZU_Roach );
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStock( player, 20, c_ZU_Roach );
    AISetStock( player, 11, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Roach );
    AISetStock( player, 22, c_ZU_Drone );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 6, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) < 24) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidRoachHydra5
//--------------------------------------------------------------------------------------------------
static void ZergMidRoachHydra5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 8, c_ZU_Roach );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 1, c_ZB_HydraliskDen );
    AISetStock( player, 8, c_ZU_Hydralisk ); 
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Hydralisk ); 
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStock( player, 16, c_ZU_Hydralisk ); 
    AISetStock( player, 10, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 16, c_continuousMerge);
    AISetAttackStatus(player, c_ZU_Hydralisk, 1, 6, c_continuousMerge);
    
    if (AIGetTime() < 510) {
        if (AITechCount(player, c_ZU_Hydralisk, c_techCountInProgressOrBetter) < 16) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidRoachMuta5
//--------------------------------------------------------------------------------------------------
static void ZergMidRoachMuta5 (int player) {
    AIClearStock(player);
    
    ZergDefaultExtraMidStock5(player);    
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_RoachWarren );
    AISetStock( player, 3, c_ZU_Overlord );   
    AISetStock( player, 16, c_ZU_Drone ); 
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Overlord ); 
    AISetStock( player, 4, c_ZU_Roach );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 6, c_ZU_Overlord );  
    AISetStock( player, 8, c_ZU_Roach );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 12, c_ZU_Roach );
    AISetStock( player, 8, c_ZU_Overlord );  
    AISetStock( player, 16, c_ZU_Roach );
    AISetStock( player, 11, c_ZU_Overlord );  
    AISetStock( player, 12, c_ZU_Mutalisk );
    AISetStock( player, 12, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Roach, 2, 8, c_continuousMerge);
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_ZU_Mutalisk, c_techCountInProgressOrBetter) < 12) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidLingMuta5
//--------------------------------------------------------------------------------------------------
static void ZergMidLingMuta5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 4, c_ZU_Zergling );
    AISetStock( player, 2, c_ZU_Queen );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 18, c_ZU_Zergling );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 1, c_ZR_ZerglingSpeed );    
    AISetStockUnitNext( player, 32, c_ZU_Zergling, c_stockAlways );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 9, c_ZU_Overlord );
    AISetStockUnitNext( player, 40, c_ZU_Zergling, c_stockAlways );
    AISetStock( player, 11, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Mutalisk );
    AISetStockUnitNext( player, 48, c_ZU_Zergling, c_stockAlways );
    AISetStock( player, 16, c_ZU_Mutalisk );
    AISetStock( player, 12, c_ZU_Overlord );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Zergling, 4, 16, c_continuousMerge);
    AISetAttackStatus(player, c_ZU_Mutalisk, 2, 4, c_continuousMerge);
    
    if (AIGetTime() < 540) {
        if (AITechCount(player, c_ZU_Mutalisk, c_techCountInProgressOrBetter) < 16) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidAirDropRush5
//--------------------------------------------------------------------------------------------------
static void ZergMidAirDropRush5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 11, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 16, c_ZU_Drone );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Zergling );
    AISetStock( player, 1, c_ZR_OverlordTransport );
    AISetStock( player, 12, c_ZU_Zergling );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Zergling );
    AISetStock( player, 1, c_ZR_ZerglingSpeed );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 32, c_ZU_Zergling );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 44, c_ZU_Zergling );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 1, c_ZR_OverseerSpeed );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_ZR_OverlordTransport, c_techCountCompleteOnly) > 0) {
        AISetAttackStatus(player, c_ZU_Zergling, 4, 12, c_continuousMerge);
    }
    
    if (AIGetTime() < 540) {
        if (AITechCount(player, c_ZB_Spire_Alias, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidAirMutaRush5
//--------------------------------------------------------------------------------------------------
static void ZergMidAirMutaRush5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 11, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 15, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 16, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 5, c_ZU_Mutalisk );
    AISetStock( player, 17, c_ZU_Drone );
    AISetStock( player, 6, c_ZU_Mutalisk );
    AISetStock( player, 18, c_ZU_Drone );
    AISetStock( player, 5, c_ZU_Overlord );
    AISetStock( player, 8, c_ZU_Mutalisk );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 22, c_ZU_Drone );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Mutalisk, 1, 4, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Mutalisk, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidAirDrop5
//--------------------------------------------------------------------------------------------------
static void ZergMidAirDrop5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 15, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 16, c_ZU_Drone );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 18, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 4, c_ZU_Overlord );
    AISetStock( player, 12, c_ZU_Zergling );
    AISetStock( player, 1, c_ZR_OverlordTransport );
    AISetStock( player, 24, c_ZU_Zergling );
    AISetStock( player, 1, c_ZR_ZerglingSpeed );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 6, c_ZU_Mutalisk );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 8, c_ZU_Mutalisk );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 8, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Mutalisk );

    AIEnableStock(player);

    //---------------------------------------------------------
    
    if (AITechCount(player, c_ZR_OverlordTransport, c_techCountCompleteOnly) > 0) {
        AISetAttackStatus(player, c_ZU_Zergling, 4, 16, c_continuousMerge);
        AISetAttackStatus(player, c_ZU_Mutalisk, 1, 5, c_continuousMerge);
    }
    
    if (AIGetTime() < 540) {
        if (AITechCount(player, c_ZU_Mutalisk, c_techCountInProgressOrBetter) < 10) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidAirMuta5
//--------------------------------------------------------------------------------------------------
static void ZergMidAirMuta5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 15, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 17, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 6, c_ZU_Mutalisk );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 8, c_ZU_Zergling );
    AISetStock( player, 8, c_ZU_Mutalisk );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Mutalisk, 1, 4, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Mutalisk, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMidAirMutaCorr5
//--------------------------------------------------------------------------------------------------
static void ZergMidAirMutaCorr5 (int player) {
    AIClearStock(player);

    ZergDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 2, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Overlord );
    AISetStock( player, 10, c_ZU_Drone );
    AISetStock( player, 2, c_ZU_Overlord );
    AISetStock( player, 13, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 14, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 15, c_ZU_Drone );
    AISetStock( player, 2, c_ZB_Extractor );
    AISetStock( player, 17, c_ZU_Drone );
    AISetStock( player, 1, c_ZB_Lair_Alias );
    AISetStock( player, 3, c_ZU_Overlord );
    AISetStock( player, 20, c_ZU_Drone );
    AISetStock( player, 1, c_ZU_Queen );
    AISetStock( player, 1, c_ZB_Spire_Alias );
    AISetStock( player, 22, c_ZU_Drone );
    AISetStock( player, 6, c_ZU_Overlord );
    AISetStock( player, 4, c_ZU_Mutalisk );
    AISetStock( player, 2, c_ZU_Corruptor );
    AISetStock( player, 7, c_ZU_Overlord );
    AISetStock( player, 24, c_ZU_Drone );
    AISetStock( player, 4, c_ZU_Corruptor );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_ZU_Mutalisk, 1, 4, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_ZU_Corruptor, c_techCountInProgressOrBetter) < 4) {
            return;
        }
    }

    ZergGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  ZergMid5
//--------------------------------------------------------------------------------------------------
void ZergMid5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);
    
    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        AIEarlyDefenseScouting(player);
    }

    if (mainSubState == e_mainSubState_MidLingEarlyBaneling5)    { ZergMidLingEarlyBaneling5(player); }
    else if (mainSubState == e_mainSubState_MidLingEarlyRoach5)  { ZergMidLingEarlyRoach5(player); }
    else if (mainSubState == e_mainSubState_MidLingMidBaneling5) { ZergMidLingMidBaneling5(player); }
    else if (mainSubState == e_mainSubState_MidLingMidRoach5)    { ZergMidLingMidRoach5(player); }
    else if (mainSubState == e_mainSubState_MidLingBaneHydra5)   { ZergMidLingBaneHydra5(player); }
    else if (mainSubState == e_mainSubState_MidRoachRush5)       { ZergMidRoachRush5(player); }
    else if (mainSubState == e_mainSubState_MidRoachHydra5)      { ZergMidRoachHydra5(player); }
    else if (mainSubState == e_mainSubState_MidRoachMuta5)       { ZergMidRoachMuta5(player); }
    else if (mainSubState == e_mainSubState_MidLingMuta5)        { ZergMidLingMuta5(player); }
    else if (mainSubState == e_mainSubState_MidAirDropRush5)     { ZergMidAirDropRush5(player); }
    else if (mainSubState == e_mainSubState_MidAirMutaRush5)     { ZergMidAirMutaRush5(player); }
    else if (mainSubState == e_mainSubState_MidAirDrop5)         { ZergMidAirDrop5(player); }
    else if (mainSubState == e_mainSubState_MidAirMuta5)         { ZergMidAirMuta5(player); }
    else if (mainSubState == e_mainSubState_MidAirMutaCorr5)     { ZergMidAirMutaCorr5(player); }
    else { ErrorMeleeScript(player, "Invalid Mid mainSubState"); }
}

//==================================================================================================
//  LATE GAME
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ZergRecoveryStart5
//--------------------------------------------------------------------------------------------------
static void ZergRecoveryStart5 (int player) {

    AISetStock( player, 1, c_ZB_Hatchery_Alias );
    AISetStock( player, 1, c_ZU_Drone );
    AISetStockFarms( player, c_ZU_Overlord, c_stockNeededFarms);
    AISetStock( player, 10, c_ZU_Drone );

}

//--------------------------------------------------------------------------------------------------
//  ZergImportantUpgrades5
//--------------------------------------------------------------------------------------------------
static void ZergImportantUpgrades5 (int player) {

    if (AITechCount(player, c_ZU_Hydralisk, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_ZR_HydraliskRange );
    }

    if (AITechCount(player, c_ZU_Infestor, c_techCountInProgressOrBetter) >= 3) {
        AISetStock( player, 1, c_ZR_InfestorParasite );
    }

    if (AITechCount(player, c_ZU_Baneling, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_ZR_BanelingSpeed );
    }

    if (AITechCount(player, c_ZU_Zergling, c_techCountInProgressOrBetter) >= 12) {
        AISetStock( player, 1, c_ZR_ZerglingSpeed );
    }

    if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_ZR_RoachUnderground );
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergMinorUpgrades5
//--------------------------------------------------------------------------------------------------
static void ZergMinorUpgrades5 (int player) {

    if (AITechCount(player, c_ZU_Baneling, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_ZR_BanelingSpeed );
    }

    if (AITechCount(player, c_ZU_Zergling, c_techCountInProgressOrBetter) >= 12) {
        AISetStock( player, 1, c_ZR_ZerglingSpeed );
        AISetStock( player, 1, c_ZR_ZerglingHaste );
    }

    if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_ZR_RoachSpeed );
        AISetStock( player, 1, c_ZR_RoachUnderground );
    }

    if (AITechCount(player, c_ZU_Hydralisk, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_ZR_HydraliskRange );
    }

    if (AITechCount(player, c_ZU_Infestor, c_techCountInProgressOrBetter) >= 3) {
        AISetStock( player, 1, c_ZR_InfestorParasite );
        AISetStock( player, 1, c_ZR_InfestorEnergy );
    }
    
    if (AITechCount(player, c_ZU_Ultralisk, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_ZR_UltraliskArmor );
    }

    AINewTechStock(player);
    AITechStockAdd(c_ZR_GroundCarapace1);
    AITechStockAdd(c_ZR_GroundCarapace2);
    AITechStockAdd(c_ZR_GroundCarapace3);
    AISetStockTechNext(player);

    if (AITechCount(player, c_ZU_Zergling, c_techCountInProgressOrBetter) >= 10) {
        AINewTechStock(player);
        AITechStockAdd(c_ZR_MeleeAttacks1);
        AITechStockAdd(c_ZR_MeleeAttacks2);
        AITechStockAdd(c_ZR_MeleeAttacks3);
        AISetStockTechNext(player);
    }

    if (AITechCount(player, c_ZU_Roach, c_techCountInProgressOrBetter) +
        AITechCount(player, c_ZU_Hydralisk, c_techCountInProgressOrBetter) >= 10)
    {
        AINewTechStock(player);
        AITechStockAdd(c_ZR_MissileAttacks1);
        AITechStockAdd(c_ZR_MissileAttacks2);
        AITechStockAdd(c_ZR_MissileAttacks3);
        AISetStockTechNext(player);
    }
    
    if (AITechCount(player, c_ZU_Mutalisk, c_techCountCompleteOnly) +
        AITechCount(player, c_ZU_Corruptor, c_techCountCompleteOnly) >= 6)
    {
        AINewTechStock(player);
        AITechStockAdd(c_ZR_FlyerAttacks1);
        AITechStockAdd(c_ZR_FlyerAttacks2);
        AITechStockAdd(c_ZR_FlyerAttacks3);
        AITechStockAdd(c_ZR_FlyerCarapace1);
        AITechStockAdd(c_ZR_FlyerCarapace2);
        AITechStockAdd(c_ZR_FlyerCarapace3);
        AISetStockTechNext(player);
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergExtraLateStock5
//--------------------------------------------------------------------------------------------------
static void ZergExtraLateStock5 (int player) {
    int numHatch = 0;
    int numQueen = 0;
    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        if (AIHasRes(player,400,0)) {
            numHatch = AITechCount(player, c_ZB_Hatchery_Alias, c_techCountCompleteOnly);
            numQueen = AITechCount(player, c_ZU_Queen, c_techCountInProgressOrBetter);
            if (numQueen < numHatch) {
                AISetStockUnitNext( player, numHatch, c_ZU_Queen, c_stockAlways );
            }
            else if (AIHasRes(player,800,0)) {           
                numHatch = AITechCount(player, c_ZB_Hatchery_Alias, c_techCountIncompleteOnly);
                if (numHatch == 0) {
                    AISetStockUnitNext( player, 5, c_ZB_Hatchery_Alias, c_stockAlways );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergDefenseMainTown5
//--------------------------------------------------------------------------------------------------
static void ZergDefenseMainTown5 (int player) {   
    int mainTown;
    int state; 
    int spineCrawlerInTown;
    int sporeCrawlerInTown;
    int spineCrawlerCount;
    int sporeCrawlerCount;

    mainTown = AIGetMainTown(player);

    state = AIGetTownState(player, mainTown);
    if (state != c_townStateEstablished) {
        return;
    }
    if (AIGetBuildingCountInTown(player, mainTown, c_ZB_Hatchery_Alias, c_techCountCompleteOnly) < 1) {
        return;
    }
    if (AIGetTownEstablishedTime(player, mainTown) + 180.0 > AIGetTime()) {
        return;
    }

    spineCrawlerInTown = AIGetBuildingCountInTown(player, mainTown, c_ZB_SpineCrawler, c_techCountCompleteOnly);
    if (spineCrawlerInTown < 2) {
        spineCrawlerCount = AITechCount(player, c_ZB_SpineCrawler, c_techCountCompleteOnly) + 1;
        AISetStockEx(player, mainTown, spineCrawlerCount, c_ZB_SpineCrawler, c_makeDefense, 0);
        return;
    }

    sporeCrawlerInTown = AIGetBuildingCountInTown(player, mainTown, c_ZB_SporeCrawler, c_techCountCompleteOnly);
    if (sporeCrawlerInTown < 3) {
        sporeCrawlerCount = AITechCount(player, c_ZB_SporeCrawler, c_techCountCompleteOnly) + 1;
        AISetStockEx(player, mainTown, sporeCrawlerCount, c_ZB_SporeCrawler, c_makeResourceDefense, 0);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergDefenseOtherTowns5
//--------------------------------------------------------------------------------------------------
static void ZergDefenseOtherTowns5 (int player) {    
    int i = 0;
    int town;
    int mainTown;
    int state;
    int minLeftInTown;
    bool makeNydusNetwork = false;

    mainTown = AIGetMainTown(player);
    while (i < c_townMax) {
        town = i;
        i = i + 1;

        if (town == mainTown) {
            continue;
        }

        state = AIGetTownState(player, town);
        if (state != c_townStateEstablished) {
            continue;
        }
        if (AIGetBuildingCountInTown(player, town, c_ZB_Hatchery_Alias, c_techCountCompleteOnly) < 1) {
            continue;
        }
        if (AIGetTownEstablishedTime(player, town) + 180.0 > AIGetTime()) {
            continue;
        }
        if (AIGetMineralAmountLeft(player, town) < 1000) {
            continue;
        }
        
        AISetStockEx(player, town, 2, c_ZB_SpineCrawler, c_makeDefense, 0);

        // After making 3 spine crawler, create 2 spore crawlers in each non-main town
        if (AIGetBuildingCountInTown(player, town, c_ZB_SpineCrawler, c_techCountCompleteOnly) >= 2) {
            AISetStockEx(player, town, 2, c_ZB_SporeCrawler, c_makeResourceDefense, 0);
        }

        // Request 1 nydus worm be made in each non-main town
        if (AITechCount(player, c_ZB_NydusNetwork, c_techCountCompleteOnly)) {
            AISetStockEx(player, town, 1, c_ZB_NydusWorm, c_makeDefense, 0);
        }
        else {
            makeNydusNetwork = true;
        }
    }

    if (makeNydusNetwork) {
        AISetStockEx(player, c_townMain, 1, c_ZB_NydusNetwork, c_makeDefense, 0);
    }
}

//--------------------------------------------------------------------------------------------------
//  ZergMakeCounters5
//--------------------------------------------------------------------------------------------------
static void ZergMakeCounters5 (int player) {
    AIMakeCounters(player, c_ZU_Zergling,       c_stockAlways);
    AIMakeCounters(player, c_ZU_Queen,          c_stockAlways);
    AIMakeCounters(player, c_ZU_Roach,          c_stockAlways);
    AIMakeCounters(player, c_ZU_Overseer,       c_stockAlways);
    AIMakeCounters(player, c_ZU_Hydralisk,      c_stockAlways);
    AIMakeCounters(player, c_ZU_Mutalisk,       c_stockAlways);
    AIMakeCounters(player, c_ZU_Corruptor,      c_stockAlways);
    AIMakeCounters(player, c_ZU_Infestor,       c_stockAlways);
    AIMakeCounters(player, c_ZU_Baneling,       c_stockAlways);
    AIMakeCounters(player, c_ZU_Ultralisk,      c_stockAlways);
    AIMakeCounters(player, c_ZU_BroodLord,      c_stockAlways);
}


//--------------------------------------------------------------------------------------------------
//  ZergLateGameArmy5 Helper functions
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  ZergLateRoachHydra5
//--------------------------------------------------------------------------------------------------
static bool ZergLateRoachHydra5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this is our default late game subState needs to always return valid
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  40 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 18, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  58 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 30, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 24, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 48, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Baneling, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 60, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateRoachHydraBrood5
//--------------------------------------------------------------------------------------------------
static bool ZergLateRoachHydraBrood5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_ZB_Spire_Alias, c_techCountCompleteOnly);
        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  40 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 2, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 2, c_ZU_BroodLord, c_stockAlways );
        return true;  //  58 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 6, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 18, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 40, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateRoachHydraInfest5
//--------------------------------------------------------------------------------------------------
static bool ZergLateRoachHydraInfest5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        return true;  //  42 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 16, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  66 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 30, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 24, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player,  6, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Baneling, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 42, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateRoachHydraBane5
//--------------------------------------------------------------------------------------------------
static bool ZergLateRoachHydraBane5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this build is fine anytime (no worse then teching to default).
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Baneling, c_stockAlways );
        return true;  //  40 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 18, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 14, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Baneling, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  64 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 30, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 24, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Baneling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player,  6, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Baneling, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 36, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 48, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateRoachHydraMuta5
//--------------------------------------------------------------------------------------------------
static bool ZergLateRoachHydraMuta5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  42 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 8, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  66 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 20, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 16, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 24, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 36, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 40, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateUltraHydra5
//--------------------------------------------------------------------------------------------------
static bool ZergLateUltraHydra5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  46 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  62 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 20, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Infestor, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 22, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 38, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Ultralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateUltraMuta5
//--------------------------------------------------------------------------------------------------
static bool ZergLateUltraMuta5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_ZU_Zergling, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Roach, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 6, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 8, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 6, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_Roach, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  48 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  68 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 12, c_ZU_Hydralisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Ultralisk, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 22, c_ZU_Roach, c_stockAlways );   
        AISetStockUnitNext( player, 36, c_ZU_Hydralisk, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ZergLateMutaBrood5
//--------------------------------------------------------------------------------------------------
static bool ZergLateMutaBrood5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_ZB_Lair_Alias, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_ZB_Spire_Alias, c_techCountCompleteOnly);
        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 3, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding
        AISetStockUnitNext( player, 6, c_ZU_Mutalisk, c_stockAlways );
        return true;  //  12 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 8, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 4, c_ZU_Corruptor, c_stockAlways );
        return true;  //  24 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 12, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 2, c_ZU_BroodLord, c_stockAlways );
        return true;  //  40 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 16, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 8, c_ZU_Corruptor, c_stockAlways );
        return true;  //  64 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 12, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 10, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Mutalisk, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_Corruptor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_ZU_BroodLord, c_stockAlways );
        AISetStockUnitNext( player, 30, c_ZU_Corruptor, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  IsSubStateStillValid
//--------------------------------------------------------------------------------------------------
static bool IsSubStateStillValid (int player, int subState) {
    if (subState == e_mainSubState_LateRoachHydra5)             { return ZergLateRoachHydra5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateRoachHydraBrood5)   { return ZergLateRoachHydraBrood5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateRoachHydraInfest5)  { return ZergLateRoachHydraInfest5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateRoachHydraBane5)    { return ZergLateRoachHydraBane5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateRoachHydraMuta5)    { return ZergLateRoachHydraMuta5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateUltraHydra5)        { return ZergLateUltraHydra5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateUltraMuta5)         { return ZergLateUltraMuta5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMutaBrood5)         { return ZergLateMutaBrood5(player, e_armyTypeValidate); }
    else { ErrorMeleeScript(player, "Invalid Late SubState in IsSubStateStillValid??"); }
    return false;
}

//--------------------------------------------------------------------------------------------------
//  ZergChooseNextLateGameArmy5
//--------------------------------------------------------------------------------------------------
static void ZergChooseNextLateGameArmy5 (int player, int state) {
    int subState;
    int subStateTime;
    bool stillValid;

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState >= e_mainSubState_LateRoachHydra5) {
        if (subState <= e_mainSubState_LateUltraMuta5) {
            subStateTime = AIGetUserInt(player, c_lateGameTimeIndex);
            if (subStateTime > AIGetTime()) {
                stillValid = IsSubStateStillValid(player, subState);
                if (stillValid) {
                    return;  // keep using the previous state
                }
            }
        }
    }

    // need to choose a new late game state
    
    AINewChooseSubState(player, e_lateRollState, 1, 1000, e_mainSubState_LateRoachHydra5);

    if (AIGetNumEnemies(player) == 1) {
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydra5,       40,    40,    10,    40 ); //  40,  40,  10,  40
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBrood5,  20,    20,    30,    20 ); //  60,  60,  40,  60
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraInfest5,  4,     4,     4,     2 ); //  64,  64,  44,  62
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBane5,    8,     6,    20,    10 ); //  72,  70,  64,  72
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraMuta5,    8,    10,     4,     8 ); //  80,  80,  68,  80
            AISetSubStateChanceRace( e_mainSubState_LateUltraHydra5,        4,     4,     6,     4 ); //  84,  84,  74,  84
            AISetSubStateChanceRace( e_mainSubState_LateUltraMuta5,         6,     6,     6,     6 ); //  90,  90,  80,  90
            AISetSubStateChanceRace( e_mainSubState_LateMutaBrood5,        10,    10,    20,    10 ); // 100, 100, 100, 100
        }
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground            random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydra5,       24,    32,     8,    32 ); //  24,  32,   8,  32
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBrood5,  12,    16,    24,    16 ); //  36,  48,  32,  48
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraInfest5,  4,     4,     4,     2 ); //  40,  52,  36,  50
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBane5,    8,     4,    12,     8 ); //  48,  56,  48,  58
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraMuta5,    6,     8,     4,     6 ); //  54,  64,  52,  64
            AISetSubStateChanceRace( e_mainSubState_LateUltraHydra5,        2,     2,     4,     2 ); //  56,  66,  56,  66
            AISetSubStateChanceRace( e_mainSubState_LateUltraMuta5,         4,     4,     4,     4 ); //  60,  70,  60,  70
            AISetSubStateChanceRace( e_mainSubState_LateMutaBrood5,        40,    30,    40,    30 ); // 100, 100, 100, 100
        }
        else {
            // may or may not be able to reach them on the ground        random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydra5,       30,    30,     8,    30 ); //  30,  30,   8,  30
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBrood5,  16,    16,    26,    16 ); //  46,  46,  34,  46
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraInfest5,  4,     4,     4,     2 ); //  50,  50,  38,  48
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraBane5,    8,     6,    16,    10 ); //  58,  56,  54,  58
            AISetSubStateChanceRace( e_mainSubState_LateRoachHydraMuta5,    8,    10,     4,     8 ); //  66,  66,  58,  66
            AISetSubStateChanceRace( e_mainSubState_LateUltraHydra5,        4,     4,     4,     4 ); //  70,  70,  62,  70
            AISetSubStateChanceRace( e_mainSubState_LateUltraMuta5,         6,     6,     6,     6 ); //  76,  76,  68,  76
            AISetSubStateChanceRace( e_mainSubState_LateMutaBrood5,        24,    24,    32,    24 ); // 100, 100, 100, 100
        }
    }
    else {
        // originally these multiplayer values were going to be different, so I'm leaving these seperate for now
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground 
            AISetSubStateChance( e_mainSubState_LateRoachHydra5,       40); //   40
            AISetSubStateChance( e_mainSubState_LateRoachHydraBrood5,  20); //   60
            AISetSubStateChance( e_mainSubState_LateRoachHydraInfest5,  4); //   64
            AISetSubStateChance( e_mainSubState_LateRoachHydraBane5,    8); //   72
            AISetSubStateChance( e_mainSubState_LateRoachHydraMuta5,    8); //   80
            AISetSubStateChance( e_mainSubState_LateUltraHydra5,        4); //   84
            AISetSubStateChance( e_mainSubState_LateUltraMuta5,         6); //   90
            AISetSubStateChance( e_mainSubState_LateMutaBrood5,        10); //  100
        }
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground
            AISetSubStateChance( e_mainSubState_LateRoachHydra5,       24); //   24
            AISetSubStateChance( e_mainSubState_LateRoachHydraBrood5,  12); //   36
            AISetSubStateChance( e_mainSubState_LateRoachHydraInfest5,  4); //   40
            AISetSubStateChance( e_mainSubState_LateRoachHydraBane5,    8); //   48
            AISetSubStateChance( e_mainSubState_LateRoachHydraMuta5,    6); //   54
            AISetSubStateChance( e_mainSubState_LateUltraHydra5,        2); //   56
            AISetSubStateChance( e_mainSubState_LateUltraMuta5,         4); //   60
            AISetSubStateChance( e_mainSubState_LateMutaBrood5,        40); //  100
        }
        else {
            // may or may not be able to reach them on the ground
            AISetSubStateChance( e_mainSubState_LateRoachHydra5,       30); //   30
            AISetSubStateChance( e_mainSubState_LateRoachHydraBrood5,  16); //   46
            AISetSubStateChance( e_mainSubState_LateRoachHydraInfest5,  4); //   50
            AISetSubStateChance( e_mainSubState_LateRoachHydraBane5,    8); //   58
            AISetSubStateChance( e_mainSubState_LateRoachHydraMuta5,    8); //   66
            AISetSubStateChance( e_mainSubState_LateUltraHydra5,        4); //   70
            AISetSubStateChance( e_mainSubState_LateUltraMuta5,         6); //   76
            AISetSubStateChance( e_mainSubState_LateMutaBrood5,        24); //  100
        }
    }

    subState = AIChooseSubState();

    stillValid = IsSubStateStillValid(player, subState);
    if (!stillValid) {
        subState = e_mainSubState_LateRoachHydra5;   // this subState needs to always return valid
    }
    
    AISetUserInt(player, c_lateGameStateIndex, subState);
    AISetUserInt(player, c_lateGameTimeIndex, FixedToInt(AIGetTime()) + c_lateGameFrequency);
}

//--------------------------------------------------------------------------------------------------
//  ZergLateGameArmy5
//--------------------------------------------------------------------------------------------------
static void ZergLateGameArmy5 (int player, int state) {
    int subState;

    if (state == e_armyTypeChoose) {
        ZergChooseNextLateGameArmy5(player, state);
        return;
    }

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState == e_mainSubState_LateRoachHydra5)             { ZergLateRoachHydra5(player, state); }
    else if (subState == e_mainSubState_LateRoachHydraBrood5)   { ZergLateRoachHydraBrood5(player, state); }
    else if (subState == e_mainSubState_LateRoachHydraInfest5)  { ZergLateRoachHydraInfest5(player, state); }
    else if (subState == e_mainSubState_LateRoachHydraBane5)    { ZergLateRoachHydraBane5(player, state); }
    else if (subState == e_mainSubState_LateRoachHydraMuta5)    { ZergLateRoachHydraMuta5(player, state); }
    else if (subState == e_mainSubState_LateUltraHydra5)        { ZergLateUltraHydra5(player, state); }
    else if (subState == e_mainSubState_LateUltraMuta5)         { ZergLateUltraMuta5(player, state); }
    else if (subState == e_mainSubState_LateMutaBrood5)         { ZergLateMutaBrood5(player, state); }
    else { ErrorMeleeScript(player, "Invalid Late SubState"); }
}


//--------------------------------------------------------------------------------------------------
//  ZergLate5
//--------------------------------------------------------------------------------------------------
void ZergLate5 (int player) {
    // only allow scouting if I have an overseer to scout with, ie stop using overloards
    AIScoutingEnableWithPreReq(player, 1, c_ZU_Overseer, 1, c_ZR_OverseerSpeed, c_techCountCompleteOnly);
    // calculate a limit on how much simultaneous teching can happen
    AISetTechLimitLevels(player);


// ****************** Start Restock ****************** //
    AIClearStock(player);

// Very basic recovery start
    ZergRecoveryStart5(player);

// Very basic farms & peons
    AISetStockFarms( player, c_ZU_Overlord, c_stockNormalFarms);
    AISetStockPeons( player, 16, c_ZU_Drone, c_stockMinPeons, c_stockAlways);

// Desperate expand (we're about to run out of minerals/gas)
    AIDefaultExpansion(player, c_ZB_Hatchery, 3000, 1000, c_expandVitalHard);
    AISetStockUnitNext( player, 1, c_ZU_Queen, c_stockAlways );

// Choose/validate what type of endgame army we'd like to make
    ZergLateGameArmy5(player, e_armyTypeChoose);

// Bare minimum army
    ZergLateGameArmy5(player, e_armyTypeMinimum);

// Basic peons
    AISetStockPeons( player, 24, c_ZU_Drone, c_stockMinPeons, c_stockAlways);

// Urgent early detection
    if (AIGetCloakedAttacker(player) != null) {
        AISetStock( player, 1, c_ZU_Overseer );
    }

// Barely adequete army including anti-air
    ZergLateGameArmy5(player, e_armyTypeBase);

// Basic towns, farms, & peons
    AIDefaultEconomy(player, c_ZB_Hatchery_Alias, c_ZB_Extractor, c_ZU_Overlord, c_ZU_Drone, 60, c_stockAlways);

// Low expand (we're running low on minerals/gas)
    AIDefaultExpansion(player, c_ZB_Hatchery, 5000, 2500, c_expandVitalHard);
    
// Minimum normal detection
    if (AISuspectDetectionDanger(player)) {
        AISetStock( player, 1, c_ZU_Overseer );
    }

// Basic small army
    ZergLateGameArmy5(player, e_armyTypeSmall);
    
// Very important tech & a scout
    AISetStock( player, 1, c_ZR_Burrow );
    AISetStock( player, 1, c_ZR_OverseerSpeed );
    AISetStock( player, 1, c_ZU_Overseer ); 

// Basic production buildings
    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 1, c_ZB_RoachWarren );

// Make Counter Units
    ZergMakeCounters5(player);
    
// Medium sized army
    ZergLateGameArmy5(player, e_armyTypeMedium);

// Normal expand
    AIDefaultExpansion(player, c_ZB_Hatchery, 12000, 6000, c_expandNormalHard);
    
// Multiple detectors & scouts & a transport
    AISetStock( player, 1, c_ZR_OverlordTransport );
    AISetStock( player, 1, c_ZU_Overlord ); 
    AISetStockUnitNext( player, 2, c_ZU_Overseer, c_stockAlways );

// Important upgrades
    ZergImportantUpgrades5(player);

// Main base defense
    ZergDefenseMainTown5(player);

// Addition production buildings
    AISetStock( player, 1, c_ZB_HydraliskDen );
    ZergExtraLateStock5(player);

// Multiple transports if needed
    if (AIWantsMultipleTransport(player)) {
        AISetStockUnitNext( player, 4, c_ZU_Overlord, c_stockAlways );
    }

// Large sized army
    ZergLateGameArmy5(player, e_armyTypeLarge);

// Other towns defense
    ZergDefenseOtherTowns5(player);

// Minor upgrades
    ZergMinorUpgrades5(player);

// Extra detection & scouts & transports
    AISetStockUnitNext( player, 4, c_ZU_Overseer, c_stockAlways );
    AISetStockUnitNext( player, 6, c_ZU_Overlord, c_stockAlways );
  
// Extra production buildings
    AISetStockUnitNext( player, 1, c_ZB_Spire_Alias,        c_stockAlways );
    AISetStockUnitNext( player, 1, c_ZB_InfestationPit,     c_stockAlways );
    AISetStockUnitNext( player, 1, c_ZB_Hive,               c_stockAlways );
    AISetStockUnitNext( player, 3, c_ZB_Hatchery_Alias,     c_stockAlways );
    AISetStockUnitNext( player, 3, c_ZU_Queen,              c_stockAlways );

// Extra research buildings
    if (AIHasRes(player,650,500)) {
        AISetStockUnitNext( player, 3, c_ZB_EvolutionChamber, c_stockAlways );
    }

// Entire Army
    ZergLateGameArmy5(player, e_armyTypeFull);

// Idle expand (very low priority, to prevent us from sitting around with idle peons)
    AIDefaultExpansion(player, c_ZB_Hatchery, 24000, 12000, c_expandIdleHard);

    AIEnableStock(player);    
// ****************** End Restock ****************** //

}
