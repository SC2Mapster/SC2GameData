//==================================================================================================
//  Terran Melee Insane
//==================================================================================================

static const int e_mainSubState_OpenPureMarine5      = 2; // triple barracks, no gas
static const int e_mainSubState_OpenReaperRush5      = 3; // reaper rush, one gas
static const int e_mainSubState_OpenMarineMix5       = 4; // double barracks, one gas
static const int e_mainSubState_OpenTechBoom5        = 5; // single barracks, double gas

static const int e_mainSubState_OpenBasicAir5        = 6;
static const int e_mainSubState_OpenQuickExpandAir5  = 7;

static const int e_mainSubState_MidMarineRush5       = 8;
static const int e_mainSubState_MidMarineReaper5     = 9;
static const int e_mainSubState_MidMarineMarauder5   = 10;
static const int e_mainSubState_MidMarauderMarine5   = 11;
static const int e_mainSubState_MidMMPlusMedivac5    = 12;
static const int e_mainSubState_MidMMPlusSiege5      = 13;
static const int e_mainSubState_MidMMPlusThor5       = 14;
static const int e_mainSubState_MidReaperRush5       = 15;
static const int e_mainSubState_MidBansheeRush5      = 16;

static const int e_mainSubState_MidAirDropRush5      = 17;
static const int e_mainSubState_MidAirFlierRush5     = 18;
static const int e_mainSubState_MidAirDrop5          = 19;
static const int e_mainSubState_MidAirViking5        = 20;
static const int e_mainSubState_MidAirCloakBanshee5  = 21;
static const int e_mainSubState_MidAirBattlecruiser5 = 22;

static const int e_mainSubState_LateMMMediViking5      = 23;
static const int e_mainSubState_LateMMMediGhost5       = 24;
static const int e_mainSubState_LateMMMediSeiege5      = 25;
static const int e_mainSubState_LateMMMediThor5        = 26;
static const int e_mainSubState_LateMMMediBattle5      = 27;
static const int e_mainSubState_LateMMMediHarass5      = 28;
static const int e_mainSubState_LateSiegeThor5         = 29;
static const int e_mainSubState_LateVikingBattle5      = 30;
static const int e_mainSubState_LateVikingRavenBattle5 = 31;

static const int e_harassTypeReaper5  = 1;
static const int e_harassTypeBanshee5 = 2;
static const int e_harassTypeNuke5    = 3;

//--------------------------------------------------------------------------------------------------
//  TerranOpenInitGnd5
//--------------------------------------------------------------------------------------------------
static void TerranOpenInitGnd5(int player) {
    AISetDifficulty(player, c_diffEarlyGameRepair, true);

    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenMarineMix5);

    // Terran quick expand will only work if we wall in and expand to an
    //  air location, so not using this for now.
    //if (AIHasNearbyOpenExpansion(player)) {
    //    AISetSubStateChance( e_mainSubState_OpenQuickExpandGnd5,  5 );
    //}

    if (AIGetNumEnemies(player) == 1) {
        // single enemy
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground      random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_OpenPureMarine5,    4,     2,     6,     4 ); //   4,   2,   6,   4
            AISetSubStateChanceRace( e_mainSubState_OpenReaperRush5,    4,     4,     2,     4 ); //   8,   6,   8,   8
            AISetSubStateChanceRace( e_mainSubState_OpenMarineMix5,    90,    90,    88,    90 ); //  98,  96,  96,  98
            AISetSubStateChanceRace( e_mainSubState_OpenTechBoom5,      2,     4,     4,     2 ); // 100, 100, 100, 100
        }                                                              
        else {                                                         
            // might not be able to reach them on the ground         random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_OpenPureMarine5,    2,     2,     2,     2 ); //   2,   2,   2,   2
            AISetSubStateChanceRace( e_mainSubState_OpenReaperRush5,    2,     2,     2,     2 ); //   4,   4,   4,   4
            AISetSubStateChanceRace( e_mainSubState_OpenMarineMix5,    86,    84,    84,    88 ); //  90,  88,  88,  92
            AISetSubStateChanceRace( e_mainSubState_OpenTechBoom5,     10,    12,    12,     8 ); // 100, 100, 100, 100
        }
    }
    else {
        // multiple enemies
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground
            AISetSubStateChance( e_mainSubState_OpenPureMarine5,    4 ); //   4
            AISetSubStateChance( e_mainSubState_OpenReaperRush5,    2 ); //   6 
            AISetSubStateChance( e_mainSubState_OpenMarineMix5,    90 ); //  96 
            AISetSubStateChance( e_mainSubState_OpenTechBoom5,      4 ); // 100
        }                                                          
        else {                                                     
            // might not be able to reach them on the ground       
            AISetSubStateChance( e_mainSubState_OpenPureMarine5,    2 ); //   2
            AISetSubStateChance( e_mainSubState_OpenReaperRush5,    2 ); //   4 
            AISetSubStateChance( e_mainSubState_OpenMarineMix5,    84 ); //  88 
            AISetSubStateChance( e_mainSubState_OpenTechBoom5,     12 ); // 100
        }
    }

    AISetMainState(player, e_mainState_OpenGnd5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenGndGoMid5
//--------------------------------------------------------------------------------------------------
static void TerranOpenGndGoMid5(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidMarineMarauder5);
     
    if (AIGetNumEnemies(player) == 1) {
        if (curSubState == e_mainSubState_OpenPureMarine5) {          //  4,     2,     6,     4
            // triple barracks, no gas                                 random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidMarineRush5,      28,    28,    32,    20 );  //  28,  28,  32,  20
            AISetSubStateChanceRace( e_mainSubState_MidMarineReaper5,    12,    12,    12,    16 );  //  40,  40,  44,  36
            AISetSubStateChanceRace( e_mainSubState_MidMarineMarauder5,  22,    22,    22,    24 );  //  62,  62,  66,  60
            AISetSubStateChanceRace( e_mainSubState_MidMarauderMarine5,  24,    24,    20,    26 );  //  86,  86,  86,  86
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusMedivac5,    6,     6,     6,     6 );  //  92,  92,  92,  92
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusSiege5,      6,     6,     6,     6 );  //  98,  98,  98,  98
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusThor5,       2,     2,     2,     2 );  // 100, 100, 100, 100
        }                                                                
        else if (curSubState == e_mainSubState_OpenReaperRush5) {     //  4,     4,     2,     4
            // reaper rush, one gas                                    random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidMarineRush5,       4,     4,     4,     4 );  //   4,   4,   4,   4
            AISetSubStateChanceRace( e_mainSubState_MidMarineReaper5,    20,    24,    16,    16 );  //  24,  28,  20,  20
            AISetSubStateChanceRace( e_mainSubState_MidMarineMarauder5,  10,    10,    12,    10 );  //  34,  38,  32,  30
            AISetSubStateChanceRace( e_mainSubState_MidMarauderMarine5,  16,    14,    16,    16 );  //  50,  52,  48,  46
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusMedivac5,   10,    10,    10,    10 );  //  60,  62,  58,  56
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusSiege5,     10,    10,    10,    10 );  //  70,  72,  68,  66
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusThor5,       4,     4,     4,     4 );  //  74,  76,  72,  70
            AISetSubStateChanceRace( e_mainSubState_MidReaperRush5,      26,    24,    28,    30 );  // 100, 100, 100, 100
        }                                                                
        else if (curSubState == e_mainSubState_OpenMarineMix5) {      // 90,    90,    88,    90
            // double barracks, one gas                                random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidMarineRush5,       4,     4,     4,     4 );  //   4,   4,   4,   4
            AISetSubStateChanceRace( e_mainSubState_MidMarineReaper5,     2,     2,     2,     2 );  //   6,   6,   6,   6
            AISetSubStateChanceRace( e_mainSubState_MidMarineMarauder5,  22,    26,    24,    18 );  //  28,  32,  30,  24
            AISetSubStateChanceRace( e_mainSubState_MidMarauderMarine5,  28,    34,    16,    28 );  //  56,  66,  46,  52
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusMedivac5,   20,    20,    22,    18 );  //  76,  86,  68,  70
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusSiege5,     20,    10,    28,    24 );  //  96,  96,  96,  94
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusThor5,       2,     2,     2,     4 );  //  98,  98,  98,  98
            AISetSubStateChanceRace( e_mainSubState_MidReaperRush5,       2,     2,     2,     2 );  // 100, 100, 100, 100
        }                                                                
        else if (curSubState == e_mainSubState_OpenTechBoom5) {       //  2,     4,     4,     2 
            // single barracks, double gas                             random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidMarineReaper5,     2,     2,     2,     2 );  //   2,   2,   2,   2
            AISetSubStateChanceRace( e_mainSubState_MidMarineMarauder5,   8,     8,     8,     6 );  //  10,  10,  10,   8
            AISetSubStateChanceRace( e_mainSubState_MidMarauderMarine5,   8,     8,     8,    10 );  //  18,  18,  18,  18
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusMedivac5,   16,    16,    16,    12 );  //  34,  34,  34,  30
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusSiege5,     22,    18,    30,    22 );  //  56,  52,  64,  52
            AISetSubStateChanceRace( e_mainSubState_MidMMPlusThor5,      18,    18,    16,    20 );  //  74,  70,  80,  72
            AISetSubStateChanceRace( e_mainSubState_MidReaperRush5,       2,     2,     2,     2 );  //  76,  72,  82,  74
            AISetSubStateChanceRace( e_mainSubState_MidBansheeRush5,     24,    28,    18,    26 );  // 100, 100, 100, 100
        }
    }
    else {
        if (curSubState == e_mainSubState_OpenPureMarine5) { // 2
            // triple barracks, no gas
            AISetSubStateChance( e_mainSubState_MidMarineRush5,      18 );  //  18
            AISetSubStateChance( e_mainSubState_MidMarineReaper5,     2 );  //  20
            AISetSubStateChance( e_mainSubState_MidMarineMarauder5,  26 );  //  46
            AISetSubStateChance( e_mainSubState_MidMarauderMarine5,  24 );  //  70
            AISetSubStateChance( e_mainSubState_MidMMPlusMedivac5,   12 );  //  82
            AISetSubStateChance( e_mainSubState_MidMMPlusSiege5,     16 );  //  98
            AISetSubStateChance( e_mainSubState_MidMMPlusThor5,       2 );  // 100
        }                                                            
        else if (curSubState == e_mainSubState_OpenReaperRush5) { // 2
            // reaper rush, one gas                                  
            AISetSubStateChance( e_mainSubState_MidMarineRush5,       4 );  //   4
            AISetSubStateChance( e_mainSubState_MidMarineReaper5,    28 );  //  32
            AISetSubStateChance( e_mainSubState_MidMarineMarauder5,  12 );  //  44
            AISetSubStateChance( e_mainSubState_MidMarauderMarine5,  12 );  //  56
            AISetSubStateChance( e_mainSubState_MidMMPlusMedivac5,   12 );  //  68
            AISetSubStateChance( e_mainSubState_MidMMPlusSiege5,      4 );  //  72
            AISetSubStateChance( e_mainSubState_MidMMPlusThor5,       2 );  //  74
            AISetSubStateChance( e_mainSubState_MidReaperRush5,      26 );  // 100
        }                                                            
        else if (curSubState == e_mainSubState_OpenMarineMix5) { // 84
            // double barracks, one gas                              
            AISetSubStateChance( e_mainSubState_MidMarineRush5,       4 );  //   4
            AISetSubStateChance( e_mainSubState_MidMarineReaper5,     4 );  //   8
            AISetSubStateChance( e_mainSubState_MidMarineMarauder5,  24 );  //  32
            AISetSubStateChance( e_mainSubState_MidMarauderMarine5,  20 );  //  52
            AISetSubStateChance( e_mainSubState_MidMMPlusMedivac5,   18 );  //  70
            AISetSubStateChance( e_mainSubState_MidMMPlusSiege5,     22 );  //  92
            AISetSubStateChance( e_mainSubState_MidMMPlusThor5,       4 );  //  96
            AISetSubStateChance( e_mainSubState_MidReaperRush5,       4 );  // 100
        }                                                            
        else if (curSubState == e_mainSubState_OpenTechBoom5) { //  12
            // single barracks, double gas                           
            AISetSubStateChance( e_mainSubState_MidMarineReaper5,     2 );  //   2
            AISetSubStateChance( e_mainSubState_MidMarineMarauder5,   8 );  //  10
            AISetSubStateChance( e_mainSubState_MidMarauderMarine5,   8 );  //  18
            AISetSubStateChance( e_mainSubState_MidMMPlusMedivac5,   16 );  //  34
            AISetSubStateChance( e_mainSubState_MidMMPlusSiege5,     18 );  //  52
            AISetSubStateChance( e_mainSubState_MidMMPlusThor5,      20 );  //  72
            AISetSubStateChance( e_mainSubState_MidReaperRush5,       4 );  //  76
            AISetSubStateChance( e_mainSubState_MidBansheeRush5,     24 );  // 100
        }
    }
    
    AISetMainState(player, e_mainState_Mid5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenPureMarine5
//--------------------------------------------------------------------------------------------------
static void TerranOpenPureMarine5 (int player) {
    int numMarine;

    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 4, c_TB_Barracks );  
    AISetStock( player, 1, c_TU_Marine );  
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 4, c_TU_Marine );  
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 6, c_TU_Marine );  
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 10, c_TU_Marine ); 
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 14, c_TU_Marine ); 

    AIEnableStock(player);

    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_TU_SCV, 1, c_TB_Barracks, c_techCountCompleteOnly);
    AISetAttackStatus(player, c_TU_Marine, 2, 6, c_continuousMerge);

    if (AIGetTime() < 270) {
        if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) < 14) {
            return;
        }
    }

    TerranOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenReaperRush5
//--------------------------------------------------------------------------------------------------
static void TerranOpenReaperRush5 (int player) {

    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 11, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 2, c_TU_Reaper );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 4, c_TU_Reaper );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_ReaperSpeed );
    AISetStock( player, 6, c_TU_Reaper );
    AISetStock( player, 18, c_TU_SCV );    
    AISetStock( player, 3, c_TB_SupplyDepot );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    if ( (AITechCount(player, c_TB_Refinery, c_techCountCompleteOnly) == 1) &&
         (AITechCount(player, c_TB_Barracks, c_techCountInProgressOrBetter) >= 2) ) {
        AISetGasPeonCountOverride(player, c_townMain, 3);
    }

    AIScoutingEnableWithPreReq(player, 11, c_TU_SCV, 1, c_TB_SupplyDepot, c_techCountInProgressOrBetter);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_TU_Reaper, c_techCountCompleteOnly) < 4) {
            return;
        }
    }

    AISetGasPeonCountOverride(player, c_townMain, c_defaultGasPeonCount);
    TerranOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenMarineMix5
//--------------------------------------------------------------------------------------------------
static void TerranOpenMarineMix5 (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 5, c_TU_Marine );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_TU_SCV, 2, c_TB_Barracks, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_TU_Marine, 2, 20, c_continuousMerge);

    if (AIGetTime() < 240) {
        if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) < 5) {
            return;
        }
    }

    TerranOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenTechBoom5
//--------------------------------------------------------------------------------------------------
static void TerranOpenTechBoom5 (int player) {
    int numMarine;

    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 16, c_TU_SCV );

    AIEnableStock(player);

    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_TU_SCV, 2, c_TB_OrbitalCommand, c_techCountInProgressOrBetter);

    if (AIGetTime() < 240) {
        if (AITechCount(player, c_TB_OrbitalCommand, c_techCountCompleteOnly) < 1) {
            return;
        }
    }

    TerranOpenGndGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenInitAir4
//--------------------------------------------------------------------------------------------------
static void TerranOpenInitAir5(int player) {
    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenBasicAir5);

    if (AIHasNearbyOpenExpansion(player)) {
        AISetSubStateChance( e_mainSubState_OpenQuickExpandAir5, 15 );
    }

    AISetMainState(player, e_mainState_OpenAir5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenAirGoMid5
//--------------------------------------------------------------------------------------------------
static void TerranOpenAirGoMid5(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidAirViking5);
    
    if (curSubState == e_mainSubState_OpenBasicAir5) {  // 85
        AISetSubStateChance( e_mainSubState_MidAirDropRush5,      25 ); //  25
        AISetSubStateChance( e_mainSubState_MidAirFlierRush5,     25 ); //  50
        AISetSubStateChance( e_mainSubState_MidAirDrop5,          10 ); //  60
        AISetSubStateChance( e_mainSubState_MidAirViking5,        10 ); //  70
        AISetSubStateChance( e_mainSubState_MidAirCloakBanshee5,  10 ); //  80
        AISetSubStateChance( e_mainSubState_MidAirBattlecruiser5, 20 ); // 100
    }
    else if (curSubState == e_mainSubState_OpenQuickExpandAir5) {  // 15
        AISetSubStateChance( e_mainSubState_MidAirDropRush5,      10 ); //  10
        AISetSubStateChance( e_mainSubState_MidAirFlierRush5,     10 ); //  20
        AISetSubStateChance( e_mainSubState_MidAirDrop5,          20 ); //  40
        AISetSubStateChance( e_mainSubState_MidAirViking5,        25 ); //  65
        AISetSubStateChance( e_mainSubState_MidAirCloakBanshee5,  10 ); //  75
        AISetSubStateChance( e_mainSubState_MidAirBattlecruiser5, 25 ); // 100
    }

    AISetMainState(player, e_mainState_Mid5, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenBasicAir5
//--------------------------------------------------------------------------------------------------
static void TerranOpenBasicAir5(int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    if (AIGetTime() < 120) {
        if (AITechCount(player, c_TB_SupplyDepot, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    TerranOpenAirGoMid5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranFastExpand5
//--------------------------------------------------------------------------------------------------
static void TerranFastExpand5 (int player) {
    int state;
    int count = 0;
    int i = -1;
    
    while (i < c_townMax) {
        i = i + 1;
        state = AIGetTownState(player, i);
        if (state == c_townStateClaimed) {
            return; // already expanding
        }
        if (state != c_townStateEstablished) {
            continue;
        }
        if (count == 1) {
            return; // found 2nd town
        }
        count = 1;
    }
    AIExpand(player, AIGetTownLocation(player, c_townMain), c_TB_CommandCenter);
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenQuickExpand4
//--------------------------------------------------------------------------------------------------
static void TerranOpenQuickExpand5(int player) {
    int mainSubState;
    
    AIClearStock(player);
    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 13, c_TU_SCV );

    if (AITechCount(player, c_TU_SCV, c_techCountQueuedOrBetter) >= 15) {
        if (AITechCount(player, c_TB_CommandCenter_Alias, c_techCountQueuedOrBetter) < 2) {
            TerranFastExpand5(player);
            AIEnableStock(player);
            return;
        }
    }

    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 20, c_TU_SCV );

    AIEnableStock(player);

    if (AITechCount(player, c_TB_CommandCenter_Alias, c_techCountInProgressOrBetter) < 2) {
        return;
    }

    mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_OpenQuickExpandAir5) { TerranOpenAirGoMid5(player); }
    //else if (mainSubState == e_mainSubState_OpenQuickExpandGnd5) { TerranOpenGndGoMid5(player); }
    else { ErrorMeleeScript(player, "Invalid terran quick expand state"); }
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenGnd5
//--------------------------------------------------------------------------------------------------
void TerranOpenGnd5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    AIEarlyDefenseScouting(player);

    if (mainSubState == e_mainSubState_Unset)                 { TerranOpenInitGnd5(player); }
    else if (mainSubState == e_mainSubState_OpenPureMarine5)  { TerranOpenPureMarine5(player); }
    else if (mainSubState == e_mainSubState_OpenReaperRush5)  { TerranOpenReaperRush5(player); }
    else if (mainSubState == e_mainSubState_OpenMarineMix5)   { TerranOpenMarineMix5(player); }
    else if (mainSubState == e_mainSubState_OpenTechBoom5)    { TerranOpenTechBoom5(player); }
    else { ErrorMeleeScript(player, "Invalid OpenGnd mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  TerranOpenAir5
//--------------------------------------------------------------------------------------------------
void TerranOpenAir5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState == e_mainSubState_Unset)                    { TerranOpenInitAir5(player); }
    else if (mainSubState == e_mainSubState_OpenBasicAir5)       { TerranOpenBasicAir5(player); }
    else if (mainSubState == e_mainSubState_OpenQuickExpandAir5) { TerranOpenQuickExpand5(player); }
    else { ErrorMeleeScript(player, "Invalid OpenAir mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  TerranGoLate5
//--------------------------------------------------------------------------------------------------
static void TerranGoLate5 (int player) {
    if (AIState(player, e_attackState) == e_attackState_Wait) {
        AIWaveMerge(player, c_waveMain, c_waveAttack);
        AISetAttackState(player, e_attackState_Attack);
    }
    AIResetUserData(player);
    //AISetNumScouts(player, 2);
    AISetFlag(player, e_flagsTimeout, true);
    AISetFlag(player, e_flagsDetect, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsDiversion, true);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AISetDifficulty(player, c_diffEarlyGameRepair, false);
    AISetMainState(player, e_mainState_Late5, e_mainSubState_Unset);
}

//--------------------------------------------------------------------------------------------------
//  TerranDefaultExtraMidStock5
//--------------------------------------------------------------------------------------------------
static void TerranDefaultExtraMidStock5 (int player) {
    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        if (AIHasRes(player,550,0)) {
            AISetStockUnitNext( player, 3, c_TB_Barracks, c_stockAlways );
            if (AITechCount(player, c_TB_Barracks, c_techCountInProgressOrBetter) >= 3) {
                if (AITechCount(player, c_TB_Factory, c_techCountInProgressOrBetter) > 0) {
                    AISetStockUnitNext( player, 3, c_TB_Factory, c_stockAlways );
                }
                if (AITechCount(player, c_TB_Starport, c_techCountInProgressOrBetter) > 0) {
                    AISetStockUnitNext( player, 3, c_TB_Starport, c_stockAlways );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMarineRush5
//--------------------------------------------------------------------------------------------------
static void TerranMidMarineRush5 (int player) {
    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);    
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 4, c_TB_Barracks );  
    AISetStock( player, 1, c_TU_Marine );  
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 4, c_TU_Marine );  
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 6, c_TU_Marine );  
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 10, c_TU_Marine ); 
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 14, c_TU_Marine ); 
    AISetStock( player, 1, c_TB_Refinery ); 
    AISetStock( player, 18, c_TU_SCV );
    AISetStockUnitNext( player, 18, c_TU_Marine, c_stockAlways );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_Refinery ); 
    AISetStockUnitNext( player, 22, c_TU_Marine, c_stockAlways );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 3, c_TB_BarracksTechLab );
    AISetStock( player, 22, c_TU_SCV );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineShield );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
    AISetStock( player, 9, c_TU_Marauder );
    AISetStockUnitNext( player, 26, c_TU_Marine, c_stockAlways );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 9, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_Marauder );
    AISetStock( player, 10, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 28, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 15, c_TU_Marauder, c_stockAlways );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 2, 10, c_continuousMerge);

    if (AIGetTime() < 510) {
        if (AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) < 12) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMarineReaper5
//--------------------------------------------------------------------------------------------------
static void TerranMidMarineReaper5 (int player) {

    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 11, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 2, c_TU_Reaper );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 4, c_TU_Reaper );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_ReaperSpeed );
    AISetStock( player, 6, c_TU_Reaper );
    AISetStock( player, 18, c_TU_SCV );    
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 20, c_TU_SCV );  
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 4, c_TB_Barracks );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 22, c_TU_SCV );  
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 8, c_TU_Marauder );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 1, c_TB_BarracksTechLab );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 10, c_TU_Marauder );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_MarineShield );
    AISetStock( player, 13, c_TU_Marauder );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStock( player, 16, c_TU_Marauder );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marauder, 2, 4, c_continuousMerge);
    if (AITechCount(player, c_TU_Reaper, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_TU_Marauder, 1, 2, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) < 13) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMarineMarauder5
//--------------------------------------------------------------------------------------------------
static void TerranMidMarineMarauder5 (int player) {
    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 5, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 4, c_TB_Barracks );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 7, c_TU_Marine );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 9, c_TU_Marine );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 3, c_TB_BarracksTechLab );
    AISetStock( player, 11, c_TU_Marine );
    AISetStock( player, 7, c_TU_Marauder );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_MarineShield );
    AISetStock( player, 10, c_TU_Marauder );
    AISetStock( player, 15, c_TU_Marine );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 13, c_TU_Marauder, c_stockAlways );
    AISetStockUnitNext( player, 17, c_TU_Marine, c_stockAlways );
    AISetStock( player, 9, c_TB_SupplyDepot );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 4, 7, c_continuousMerge);    
    if (AITechCount(player, c_TU_Marine, c_techCountCompleteOnly) >= 5) {
        AISetAttackStatus(player, c_TU_Marauder, 1, 3, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) < 17) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMarauderMarine5
//--------------------------------------------------------------------------------------------------
static void TerranMidMarauderMarine5 (int player) {
    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 5, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 3, c_TB_BarracksTechLab );
    AISetStock( player, 4, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 9, c_TU_Marauder );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 7, c_TU_Marine );
    AISetStock( player, 12, c_TU_Marauder );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 9, c_TU_Marine );
    AISetStockUnitNext( player, 15, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 11, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 18, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 1, c_TR_MarineShield );
    AISetStock( player, 9, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 13, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 21, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 10, c_TB_SupplyDepot );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 2, 24, c_continuousMerge);
    AISetAttackStatus(player, c_TU_Marauder, 1, 6, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TR_MarineShield, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMMPlusMedivac5
//--------------------------------------------------------------------------------------------------
static void TerranMidMMPlusMedivac5 (int player) {
    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 5, c_TU_Marine );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 1, c_TB_Starport );
    AISetStock( player, 7, c_TU_Marine );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 9, c_TU_Marine );
    AISetStock( player, 8, c_TU_Marauder );
    AISetStock( player, 1, c_TU_Medivac );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 11, c_TU_Marine );
    AISetStock( player, 10, c_TU_Marauder );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 22, c_TU_SCV );
    AISetStockUnitNext( player, 13, c_TU_Marine, c_stockAlways );
    AISetStock( player, 3, c_TU_Medivac );
    AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 13, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 14, c_TU_Marauder, c_stockAlways );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 4, 24, c_continuousMerge);    
    if (AITechCount(player, c_TU_Marine, c_techCountCompleteOnly) >= 8) {
        AISetAttackStatus(player, c_TU_Medivac, 1, 3, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Medivac, c_techCountInProgressOrBetter) < 3) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMMPlusSiege5
//--------------------------------------------------------------------------------------------------
static void TerranMidMMPlusSiege5 (int player) {
    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 5, c_TU_Marine );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 7, c_TU_Marine );
    AISetStock( player, 1, c_TB_FactoryTechLab );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 22, c_TU_SCV );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 9, c_TU_Marine );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_SiegeTankSiege );
    AISetStock( player, 8, c_TU_Marauder );
    AISetStock( player, 11, c_TU_Marine );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_Factory );
    AISetStock( player, 2, c_TU_SiegeTank );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 13, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 9, c_TB_SupplyDepot );
    AISetStock( player, 24, c_TU_SCV );
    AISetStock( player, 10, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 15, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 3, c_TU_SiegeTank );
    AISetStock( player, 2, c_TB_FactoryTechLab );
    AISetStock( player, 11, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 17, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 14, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 5, c_TU_SiegeTank );
    AISetStock( player, 12, c_TB_SupplyDepot );
    AISetStockUnitNext( player, 19, c_TU_Marine, c_stockAlways );
    AISetStockUnitNext( player, 16, c_TU_Marauder, c_stockAlways );
    AISetStock( player, 13, c_TB_SupplyDepot );   

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 4, 20, c_continuousMerge);
    if (AITechCount(player, c_TU_Marine, c_techCountCompleteOnly) >= 9) {
        AISetAttackStatus(player, c_TU_Marauder, 1, 6, c_continuousMerge);
        AISetAttackStatus(player, c_TU_SiegeTank_Alias, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 510) {
        if (AITechCount(player, c_TU_SiegeTank_Alias, c_techCountInProgressOrBetter) < 5) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidMMPlusThor5
//--------------------------------------------------------------------------------------------------
static void TerranMidMMPlusThor5 (int player) {
    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 1, c_TB_Armory );
    AISetStock( player, 1, c_TB_FactoryTechLab );
    AISetStock( player, 2, c_TB_Factory );
    AISetStock( player, 3, c_TU_Marine );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 1, c_TU_Thor );
    AISetStock( player, 5, c_TU_Marine );
    AISetStock( player, 2, c_TB_FactoryTechLab );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Thor );
    AISetStock( player, 1, c_TU_Marauder );
    AISetStock( player, 3, c_TU_Thor );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 5, c_TU_Thor );
    AISetStock( player, 1, c_TR_ThorCannons );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marauder );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Marine, 6, 24, c_continuousMerge);
    AISetAttackStatus(player, c_TU_Marauder, 1, 4, c_continuousMerge);
    if (AITechCount(player, c_TU_Marine, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_TU_Thor, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TR_ThorCannons, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidReaperRush5
//--------------------------------------------------------------------------------------------------
static void TerranMidReaperRush5 (int player) {
    
    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 11, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 2, c_TU_Reaper );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 4, c_TU_Reaper );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_ReaperSpeed );
    AISetStock( player, 6, c_TU_Reaper );
    AISetStock( player, 18, c_TU_SCV );    
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 8, c_TU_Reaper );  
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 3, c_TB_Barracks );
    AISetStock( player, 20, c_TU_SCV ); 
    AISetStock( player, 5, c_TB_SupplyDepot );   
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 6, c_TB_SupplyDepot );  
    AISetStock( player, 22, c_TU_SCV ); 
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 7, c_TB_SupplyDepot );  
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 24, c_TU_SCV ); 
    AISetStock( player, 8, c_TU_Marauder );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 8, c_TB_SupplyDepot );  

    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_TU_Reaper, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_TU_Marauder, 1, 4, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidBansheeRush5
//--------------------------------------------------------------------------------------------------
static void TerranMidBansheeRush5 (int player) {
    
    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);
    
    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TB_StarportTechLab );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Banshee );
    AISetStock( player, 1, c_TR_BansheeCloak );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Banshee );
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_BarracksTechLab );
    AISetStock( player, 6, c_TU_Banshee );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TU_Marauder );
    AISetStock( player, 1, c_TR_MarineStimPack );
    AISetStock( player, 2, c_TU_Marauder );
    AISetStock( player, 2, c_TB_BarracksTechLab );
    AISetStock( player, 1, c_TR_MarauderSlow );
    AISetStock( player, 4, c_TU_Marauder );
    AISetStock( player, 7, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Viking );
    AISetStock( player, 6, c_TU_Marauder );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Viking );
    AISetStock( player, 8, c_TU_Marauder );

    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_TU_Banshee, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_TU_Marauder, 2, 4, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Viking, c_techCountInProgressOrBetter) < 2) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirDropRush5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirDropRush5 (int player) {
    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 17, c_TU_SCV );
    AISetStock( player, 1, c_TB_Starport );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 1, c_TU_Medivac );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 2, c_TU_Medivac );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 10, c_TU_Marine );
    AISetStock( player, 2, c_TU_Viking );
    AISetStock( player, 12, c_TU_Marine );
    AISetStock( player, 22, c_TU_SCV );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 16, c_TU_Marine );

    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_TU_Medivac, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_TU_Marine, 6, 10, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Viking, c_techCountCompleteOnly) < 2) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirFlierRush5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirFlierRush5 (int player) {
    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 15, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 17, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 19, c_TU_SCV );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 4, c_TU_Viking );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 6, c_TU_Viking );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 8, c_TU_Viking );;
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 8, c_TU_Marine );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Viking_Alias, 2, 6, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_TU_Viking_Alias, c_techCountCompleteOnly) < 6) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirDrop5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirDrop5 (int player) {
    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 16, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 17, c_TU_SCV );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 1, c_TB_BarracksReactor );
    AISetStock( player, 19, c_TU_SCV );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 2, c_TU_Viking );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 2, c_TU_Medivac );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 10, c_TU_Marine );
    AISetStock( player, 3, c_TU_Viking );
    AISetStock( player, 3, c_TU_Medivac );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 14, c_TU_Marine );
    AISetStock( player, 5, c_TU_Viking );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_Marine );
    AISetStock( player, 7, c_TU_Viking );
    AISetStock( player, 8, c_TB_SupplyDepot );
    AISetStock( player, 20, c_TU_Marine );
    AISetStock( player, 9, c_TB_SupplyDepot );
    AISetStock( player, 24, c_TU_Marine );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Viking_Alias, 2, 7, c_continuousMerge);
    if (AITechCount(player, c_TU_Medivac, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_TU_Marine, 8, 16, c_continuousMerge);
    }
    
    if (AIGetTime() < 600) {
        if (AITechCount(player, c_TU_Viking_Alias, c_techCountCompleteOnly) < 7) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirViking5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirViking5 (int player) {
    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 21, c_TU_SCV );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 4, c_TU_Viking );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 6, c_TU_Viking );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 8, c_TU_Viking );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_Viking );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Viking_Alias, 2, 12, c_continuousMerge);
    
    if (AIGetTime() < 600) {
        if (AITechCount(player, c_TU_Viking_Alias, c_techCountCompleteOnly) < 12) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirCloakBanshee5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirCloakBanshee5 (int player) {

    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 17, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 19, c_TU_SCV );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Banshee );
    AISetStock( player, 1, c_TR_BansheeCloak );
    AISetStock( player, 21, c_TU_SCV );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 4, c_TU_Banshee );
    AISetStock( player, 22, c_TU_SCV );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 6, c_TB_SupplyDepot );
    AISetStock( player, 24, c_TU_SCV );
    AISetStock( player, 6, c_TU_Banshee );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 7, c_TB_SupplyDepot );

    AIEnableStock(player);

    //---------------------------------------------------------
    
    // attack is done by diversion wave with banshees

    if (AIGetTime() < 510) {
        if (AITechCount(player, c_TU_Banshee, c_techCountInProgressOrBetter) < 6) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMidAirBattlecruiser5
//--------------------------------------------------------------------------------------------------
static void TerranMidAirBattlecruiser5 (int player) {

    AISetFlag(player, e_flagsDiversion, true);

    AIClearStock(player);

    TerranDefaultExtraMidStock5(player);
    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 10, c_TU_SCV );
    AISetStock( player, 1, c_TB_SupplyDepot );
    AISetStock( player, 12, c_TU_SCV );
    AISetStock( player, 1, c_TB_Refinery );
    AISetStock( player, 13, c_TU_SCV );
    AISetStock( player, 2, c_TB_Refinery );
    AISetStock( player, 14, c_TU_SCV );
    AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 17, c_TU_SCV );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_OrbitalCommand );
    AISetStock( player, 2, c_TB_SupplyDepot );
    AISetStock( player, 18, c_TU_SCV );
    AISetStock( player, 2, c_TB_Starport );
    AISetStock( player, 19, c_TU_SCV );
    AISetStock( player, 1, c_TU_Marine );
    AISetStock( player, 20, c_TU_SCV );
    AISetStock( player, 2, c_TU_Marine );
    AISetStock( player, 3, c_TB_SupplyDepot );
    AISetStock( player, 22, c_TU_SCV );
    AISetStock( player, 1, c_TB_FusionCore );
    AISetStock( player, 2, c_TB_StarportTechLab );
    AISetStock( player, 4, c_TU_Marine );
    AISetStock( player, 4, c_TB_SupplyDepot );
    AISetStock( player, 2, c_TU_Battlecruiser );
    AISetStock( player, 6, c_TU_Marine );
    AISetStock( player, 5, c_TB_SupplyDepot );
    AISetStock( player, 1, c_TR_BattlecruiserYamato );
    AISetStock( player, 24, c_TU_SCV );
    AISetStock( player, 8, c_TU_Marine );
    AISetStock( player, 2, c_TU_Viking );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_TU_Battlecruiser, 1, 2, c_continuousMerge);

    if (AIGetTime() < 540) {
        if (AITechCount(player, c_TU_Battlecruiser, c_techCountCompleteOnly) < 2) {
            return;
        }
    }

    TerranGoLate5(player);
}

//--------------------------------------------------------------------------------------------------
//  TerranMid5
//--------------------------------------------------------------------------------------------------
void TerranMid5 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        AIScoutingEnable(player, 12, c_TU_SCV);
        AIEarlyDefenseScouting(player);
    }
    else {
        AIScoutingEnable(player, 1, c_TU_Medivac);
    }

    if (mainSubState == e_mainSubState_MidMarineRush5)            { TerranMidMarineRush5(player); }
    else if (mainSubState == e_mainSubState_MidMarineReaper5)     { TerranMidMarineReaper5(player); }
    else if (mainSubState == e_mainSubState_MidMarineMarauder5)   { TerranMidMarineMarauder5(player); }
    else if (mainSubState == e_mainSubState_MidMarauderMarine5)   { TerranMidMarauderMarine5(player); }
    else if (mainSubState == e_mainSubState_MidMMPlusMedivac5)    { TerranMidMMPlusMedivac5(player); }
    else if (mainSubState == e_mainSubState_MidMMPlusSiege5)      { TerranMidMMPlusSiege5(player); }
    else if (mainSubState == e_mainSubState_MidMMPlusThor5)       { TerranMidMMPlusThor5(player); }
    else if (mainSubState == e_mainSubState_MidReaperRush5)       { TerranMidReaperRush5(player); }
    else if (mainSubState == e_mainSubState_MidBansheeRush5)      { TerranMidBansheeRush5(player); }
    else if (mainSubState == e_mainSubState_MidAirDropRush5)      { TerranMidAirDropRush5(player); }
    else if (mainSubState == e_mainSubState_MidAirFlierRush5)     { TerranMidAirFlierRush5(player); }
    else if (mainSubState == e_mainSubState_MidAirDrop5)          { TerranMidAirDrop5(player); }
    else if (mainSubState == e_mainSubState_MidAirViking5)        { TerranMidAirViking5(player); }
    else if (mainSubState == e_mainSubState_MidAirCloakBanshee5)  { TerranMidAirCloakBanshee5(player); }
    else if (mainSubState == e_mainSubState_MidAirBattlecruiser5) { TerranMidAirBattlecruiser5(player); }
    else { ErrorMeleeScript(player, "Invalid Mid mainSubState"); }
}

//==================================================================================================
//  LATE GAME
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  TerranRecoveryStart5
//--------------------------------------------------------------------------------------------------
static void TerranRecoveryStart5 (int player) {

    AISetStock( player, 1, c_TB_CommandCenter_Alias );
    AISetStock( player, 1, c_TU_SCV );
    AISetStockFarms( player, c_TB_SupplyDepot, c_stockNeededFarms);
    AISetStock( player, 10, c_TU_SCV );

}

//--------------------------------------------------------------------------------------------------
//  TerranImportantUpgrades5
//--------------------------------------------------------------------------------------------------
static void TerranImportantUpgrades5 (int player) {

    if (AITechCount(player, c_TU_SiegeTank_Alias, c_techCountInProgressOrBetter) >= 2) {
        AISetStock( player, 1, c_TR_SiegeTankSiege );
    }

    if (AITechCount(player, c_TU_Banshee, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_TR_BansheeCloak );
    }

    if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) >= 12) {
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStock( player, 1, c_TR_MarineShield );
    }
    
    if (AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) >= 8) {
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStock( player, 1, c_TR_MarauderSlow );
    }

    if (AITechCount(player, c_TU_Ghost, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_TR_GhostCloak );
    }

    if (AITechCount(player, c_TU_Battlecruiser, c_techCountInProgressOrBetter) >= 3) {
        AISetStock( player, 1, c_TR_BattlecruiserYamato );
    }

    if (AITechCount(player, c_TU_Hellion, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_TR_HellionDamage );
    }
    
    if (AITechCount(player, c_TU_Reaper, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_TR_ReaperSpeed );
    }
}

//--------------------------------------------------------------------------------------------------
//  TerranMinorUpgrades5
//--------------------------------------------------------------------------------------------------
static void TerranMinorUpgrades5 (int player) {

    if (AITechCount(player, c_TU_SiegeTank_Alias, c_techCountInProgressOrBetter) >= 2) {
        AISetStock( player, 1, c_TR_SiegeTankSiege );
    }

    if (AITechCount(player, c_TU_Banshee, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_TR_BansheeCloak);
    }
    
    if (AITechCount(player, c_TU_Raven, c_techCountInProgressOrBetter) >= 4) {        
        AISetStock( player, 1, c_TR_RavenMissiles );
        AISetStock( player, 1, c_TR_RavenEnergy );
        AISetStock( player, 1, c_TR_RavenTimed );
    }

    if (AITechCount(player, c_TU_Battlecruiser, c_techCountInProgressOrBetter) >= 3) {
        AISetStock( player, 1, c_TR_BattlecruiserYamato );
        AISetStock( player, 1, c_TR_BattlecruiserEnergy );
    }

    if (AITechCount(player, c_TU_Ghost, c_techCountCompleteOnly) >= 1) {
        AISetStock( player, 1, c_TR_GhostCloak );
        AISetStock( player, 1, c_TR_GhostEnergy );
    }

    if (AITechCount(player, c_TU_Hellion, c_techCountInProgressOrBetter) >= 5) {
        AISetStock( player, 1, c_TR_HellionDamage );
    }

    if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) >= 10) {
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStock( player, 1, c_TR_MarineShield );
    }
    
    if (AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) >= 8) {
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStock( player, 1, c_TR_MarauderSlow );
    }
    
    if (AITechCount(player, c_TU_Thor, c_techCountInProgressOrBetter) >= 3) {
        AISetStock( player, 1, c_TR_ThorCannons );
    }

    if (AITechCount(player, c_TU_Medivac, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_TR_MedivacEnergy );
    }
    
    if (AITechCount(player, c_TU_Reaper, c_techCountInProgressOrBetter) >= 6) {
        AISetStock( player, 1, c_TR_ReaperSpeed );
    }

    if (AITechCount(player, c_TU_Marine, c_techCountInProgressOrBetter) +
        AITechCount(player, c_TU_Marauder, c_techCountInProgressOrBetter) +        
        AITechCount(player, c_TU_Reaper, c_techCountInProgressOrBetter) >= 12)
    {
        AINewTechStock(player);
        AITechStockAdd(c_TR_InfantryWeapons1);
        AITechStockAdd(c_TR_InfantryWeapons2);
        AITechStockAdd(c_TR_InfantryWeapons3);
        AITechStockAdd(c_TR_InfantryArmor1);
        AITechStockAdd(c_TR_InfantryArmor2);
        AITechStockAdd(c_TR_InfantryArmor3);
        AISetStockTechNext(player);
    }

    if (AITechCount(player, c_TU_SiegeTank_Alias, c_techCountInProgressOrBetter) +
        AITechCount(player, c_TU_Hellion, c_techCountInProgressOrBetter) >= 5)
    {
        AINewTechStock(player);
        AITechStockAdd(c_TR_VehicleWeapons1);
        AITechStockAdd(c_TR_VehicleWeapons2);
        AITechStockAdd(c_TR_VehicleWeapons3);
        AITechStockAdd(c_TR_VehiclePlating1);
        AITechStockAdd(c_TR_VehiclePlating2);
        AITechStockAdd(c_TR_VehiclePlating3);
        AISetStockTechNext(player);
    }

    if (AITechCount(player, c_TU_Viking_Alias, c_techCountInProgressOrBetter) +
        AITechCount(player, c_TU_Banshee, c_techCountInProgressOrBetter) >= 5)
    {
        AINewTechStock(player);
        AITechStockAdd(c_TR_ShipWeapons1);
        AITechStockAdd(c_TR_ShipWeapons2);
        AITechStockAdd(c_TR_ShipWeapons3);
        AITechStockAdd(c_TR_ShipPlating1);
        AITechStockAdd(c_TR_ShipPlating2);
        AITechStockAdd(c_TR_ShipPlating3);
        AISetStockTechNext(player);
    }
    
    if (AITechCount(player, c_TB_MissileTurret, c_techCountInProgressOrBetter) +
        AITechCount(player, c_TB_PlanetaryFortress, c_techCountInProgressOrBetter) >= 4) {
        AISetStock( player, 1, c_TR_MissileTurretRange);
    }

    if (AITechCount(player, c_TB_Bunker, c_techCountCompleteOnly) >= 1) {
        AISetStock( player, 1, c_TR_BunkerSpace);
    }

    AISetStock( player, 1, c_TR_BuildingArmor);
}

//--------------------------------------------------------------------------------------------------
//  TerranDefenseMainTown5
//--------------------------------------------------------------------------------------------------
static void TerranDefenseMainTown5 (int player) {   
    int mainTown;
    int state; 
    int turretInTown;
    int bunkerInTown;
    int turretCount;
    int bunkerCount;
    int commandInTown;
    int orbitalCount;

    mainTown = AIGetMainTown(player);

    state = AIGetTownState(player, mainTown);
    if (state != c_townStateEstablished) {
        return;
    }

    turretInTown = AIGetBuildingCountInTown(player, mainTown, c_TB_MissileTurret, c_techCountCompleteOnly);
    if (turretInTown < 3) {
        turretCount = AITechCount(player, c_TB_MissileTurret, c_techCountCompleteOnly) + 1;
        AISetStockEx(player, mainTown, turretCount, c_TB_MissileTurret, c_makeResourceDefense, 0);
        return;
    }

    bunkerInTown = AIGetBuildingCountInTown(player, mainTown, c_TB_Bunker, c_techCountCompleteOnly);
    if (bunkerInTown < 2) {
        bunkerCount = AITechCount(player, c_TB_Bunker, c_techCountCompleteOnly) + 1;
        AISetStockEx(player, mainTown, bunkerCount, c_TB_Bunker, c_makeDefense, 0);
        return;
    }

    commandInTown = AIGetBuildingCountInTown(player, mainTown, c_TB_CommandCenter, c_techCountCompleteOnly);
    if (commandInTown > 0) {
        orbitalCount = AITechCount(player, c_TB_OrbitalCommand, c_techCountCompleteOnly) + 1;
        AISetStockEx(player, mainTown, orbitalCount, c_TB_OrbitalCommand, c_makeDefault, 0);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  TerranDefenseOtherTowns5
//--------------------------------------------------------------------------------------------------
static void TerranDefenseOtherTowns5 (int player) {
    int i = 0;
    int town;
    int mainTown;
    int state;
    int minLeftInTown;
    int orbitalTotal = AITechCount(player, c_TB_OrbitalCommand, c_techCountQueuedOrBetter);
    int orbitalIncomplete = AITechCount(player, c_TB_OrbitalCommand, c_techCountIncompleteOnly);
    int planetaryIncomplete;
    
    mainTown = AIGetMainTown(player);

    while (i < c_townMax) {
        town = i;
        i = i + 1;

        if (town == mainTown) {
            continue;
        }
        state = AIGetTownState(player, town);
        if (state != c_townStateEstablished) {
            continue;
        }

        minLeftInTown = AIGetMineralAmountLeft(player, town);
        if (orbitalIncomplete == 0) {
            if (AIGetBuildingCountInTown(player, town, c_TB_CommandCenter, c_techCountCompleteOnly) > 0) {
                if (orbitalTotal < 3) {
                    AISetStockEx(player, town, 1, c_TB_OrbitalCommand, c_makeDefault, 0);
                    orbitalIncomplete = orbitalIncomplete + 1;
                    orbitalTotal = orbitalTotal + 1;
                    continue;
                }
                else {
                    planetaryIncomplete = AITechCount(player, c_TB_PlanetaryFortress, c_techCountIncompleteOnly);
                    if (planetaryIncomplete == 0) {
                        if (minLeftInTown > 1000) {
                            AISetStockEx(player, town, 1, c_TB_PlanetaryFortress, c_makeDefault, 0);
                            continue;
                        }
                    }
                }
            }
        }

        if (minLeftInTown > 1000) {
            if (AIGetBuildingCountInTown(player, town, c_TB_PlanetaryFortress, c_techCountInProgressOrBetter) > 0) {
                AISetStockEx(player, town, 3, c_TB_MissileTurret, c_makeResourceDefense | c_nearDropoff, 0);
                continue;
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  TerranMakeCounters5
//--------------------------------------------------------------------------------------------------
static void TerranMakeCounters5 (int player) {
    AIMakeCounters(player, c_TU_Marine,                 c_stockAlways);
    AIMakeCounters(player, c_TU_Marauder,               c_stockAlways);
    AIMakeCounters(player, c_TU_Reaper,                 c_stockAlways);
    AIMakeCounters(player, c_TU_Ghost,                  c_stockAlways);
    AIMakeCounters(player, c_TU_Hellion,                c_stockAlways);
    AIMakeCounters(player, c_TU_SiegeTank,              c_stockAlways);
    AIMakeCounters(player, c_TU_Thor,                   c_stockAlways);
    AIMakeCounters(player, c_TU_Viking,                 c_stockAlways);
    AIMakeCounters(player, c_TU_Raven,                  c_stockAlways);
    AIMakeCounters(player, c_TU_Banshee,                c_stockAlways);
    AIMakeCounters(player, c_TU_Battlecruiser,          c_stockAlways);
}


//--------------------------------------------------------------------------------------------------
//  TerranLateGameArmy5 Helper functions
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediViking5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediViking5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this is our default late game subState needs to always return valid
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        return true;  //  44 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marine, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineShield );
        AISetStockUnitNext( player, 4, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marauder, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 30, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 36, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 48, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 36, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Medivac, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediGhost5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediGhost5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this build is fine anytime (no worse then teching to default).
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        return true;  //  48 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 2, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marine, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineShield );
        AISetStockUnitNext( player, 8, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Viking, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 30, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 48, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 36, c_TU_Marauder, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediSeiege5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediSeiege5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this build is fine anytime (no worse then teching to default).
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_SiegeTank, c_stockAlways );
        AISetStock( player, 1, c_TR_SiegeTankSiege );
        return true;  //  40 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_SiegeTank, c_stockAlways );
        return true;  //  58 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 30, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 36, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_SiegeTank, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediThor5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediThor5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_TB_Factory, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_TB_Starport, c_techCountCompleteOnly);

        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        return true;  //  46 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Thor, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediBattle5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediBattle5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_TB_Starport, c_techCountCompleteOnly);
        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  46 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Medivac, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 36, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateMMMediHarass5
//--------------------------------------------------------------------------------------------------
static bool TerranLateMMMediHarass5 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this build is fine anytime (no worse then teching to default).
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );      
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 6, c_TU_Marauder, c_stockAlways );
        AISetStock( player, 1, c_TR_MarineStimPack );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 4, c_TU_Reaper, c_stockAlways );
        AISetStockUnitNext( player, 14, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Banshee, c_stockAlways );
        return true;  //  44 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 6, c_TU_Reaper, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Banshee, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        return true;  //  66 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Viking, c_stockAlways );        
        AISetStockUnitNext( player, 8, c_TU_Reaper, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Banshee, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 30, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 46, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 32, c_TU_Marauder, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateSiegeThor5
//--------------------------------------------------------------------------------------------------
static bool TerranLateSiegeThor5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_TB_Factory, c_techCountCompleteOnly);
        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 8, c_TU_Marine, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding
        AISetStockUnitNext( player, 2, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_SiegeTank, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 3, c_TU_SiegeTank, c_stockAlways );        
        AISetStock( player, 1, c_TR_SiegeTankSiege );
        AISetStockUnitNext( player, 1, c_TU_Thor, c_stockAlways );
        return true;  //  27 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts        
        AISetStockUnitNext( player, 4, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Thor, c_stockAlways );
        return true;  //  42 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 6, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 3, c_TU_Thor, c_stockAlways );
        return true;  //  64 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TB_Factory,            c_stockAlways );
        AISetStockUnitNext( player, 4, c_TB_FactoryTechLab,     c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Ghost, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_SiegeTank, c_stockAlways );
        AISetStockUnitNext( player, 24, c_TU_Marine, c_stockAlways );
        AISetStockUnitNext( player, 18, c_TU_Marauder, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Medivac, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Thor, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_SiegeTank, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateVikingBattle5
//--------------------------------------------------------------------------------------------------
static bool TerranLateVikingBattle5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_TB_Starport, c_techCountCompleteOnly);
        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 3, c_TU_Viking, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 6, c_TU_Viking, c_stockAlways );  
        return true;  //  12 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 10, c_TU_Viking, c_stockAlways );
        return true;  //  20 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  44 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 6, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 3, c_TB_Starport,           c_stockAlways );
        AISetStockUnitNext( player, 3, c_TB_StarportTechLab,    c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TB_Starport,           c_stockAlways );
        AISetStockUnitNext( player, 4, c_TB_StarportTechLab,    c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Raven, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Banshee, c_stockAlways );
        AISetStockUnitNext( player, 22, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  TerranLateVikingRavenBattle5
//--------------------------------------------------------------------------------------------------
static bool TerranLateVikingRavenBattle5 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_TB_Starport, c_techCountCompleteOnly);
        return (techCount >= 2);
    }


    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 3, c_TU_Viking, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding  
        AISetStockUnitNext( player, 6, c_TU_Viking, c_stockAlways );  
        return true;  //  12 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 8, c_TU_Viking, c_stockAlways );
        return true;  //  16 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TU_Raven, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  44 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 3, c_TB_Starport,           c_stockAlways );
        AISetStockUnitNext( player, 3, c_TB_StarportTechLab,    c_stockAlways );
        AISetStockUnitNext( player, 6, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 12, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 4, c_TU_Raven, c_stockAlways );
        return true;  //  68 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_TB_Starport,           c_stockAlways );
        AISetStockUnitNext( player, 4, c_TB_StarportTechLab,    c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 10, c_TU_Raven, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Viking, c_stockAlways );
        AISetStockUnitNext( player, 16, c_TU_Battlecruiser, c_stockAlways );
        AISetStockUnitNext( player, 8, c_TU_Banshee, c_stockAlways );
        AISetStockUnitNext( player, 20, c_TU_Battlecruiser, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  IsSubStateStillValid
//--------------------------------------------------------------------------------------------------
static bool IsSubStateStillValid (int player, int subState) {
    if (subState == e_mainSubState_LateMMMediViking5)            { TerranLateMMMediViking5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMMMediGhost5)        { TerranLateMMMediGhost5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMMMediSeiege5)       { TerranLateMMMediSeiege5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMMMediThor5)         { TerranLateMMMediThor5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMMMediBattle5)       { TerranLateMMMediBattle5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateMMMediHarass5)       { TerranLateMMMediHarass5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateSiegeThor5)          { TerranLateSiegeThor5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateVikingBattle5)       { TerranLateVikingBattle5(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateVikingRavenBattle5)  { TerranLateVikingRavenBattle5(player, e_armyTypeValidate); }
    else { ErrorMeleeScript(player, "Invalid Late SubState in IsSubStateStillValid??"); }
    return false;
}

//--------------------------------------------------------------------------------------------------
//  TerranChooseNextLateGameArmy5
//--------------------------------------------------------------------------------------------------
static void TerranChooseNextLateGameArmy5 (int player, int state) {
    int subState;
    int subStateTime;
    bool stillValid;

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState >= e_mainSubState_LateMMMediViking5) {
        if (subState <= e_mainSubState_LateVikingRavenBattle5) {
            subStateTime = AIGetUserInt(player, c_lateGameTimeIndex);
            if (subStateTime > AIGetTime()) {
                stillValid = IsSubStateStillValid(player, subState);
                if (stillValid) {
                    return;  // keep using the previous state
                }
            }
        }
    }

    // need to choose a new late game state
    
    AINewChooseSubState(player, e_lateRollState, 1, 1000, e_mainSubState_LateMMMediViking5);

    if (AIGetNumEnemies(player) == 1) {
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground           random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateMMMediViking5,      16,    20,    16,    16 ); //  16,  20,  16,  16
            AISetSubStateChanceRace( e_mainSubState_LateMMMediGhost5,       20,    30,    12,    12 ); //  36,  50,  28,  28
            AISetSubStateChanceRace( e_mainSubState_LateMMMediSeiege5,      16,    10,    22,    20 ); //  52,  60,  50,  48
            AISetSubStateChanceRace( e_mainSubState_LateMMMediThor5,        12,     8,    12,    12 ); //  64,  68,  62,  60
            AISetSubStateChanceRace( e_mainSubState_LateMMMediBattle5,       4,     6,     4,     4 ); //  68,  74,  66,  64
            AISetSubStateChanceRace( e_mainSubState_LateMMMediHarass5,      12,    12,    12,    12 ); //  80,  86,  78,  76
            AISetSubStateChanceRace( e_mainSubState_LateSiegeThor5,         10,     4,    12,    12 ); //  90,  90,  90,  88
            AISetSubStateChanceRace( e_mainSubState_LateVikingBattle5,       4,     4,     4,     4 ); //  94,  94,  94,  92
            AISetSubStateChanceRace( e_mainSubState_LateVikingRavenBattle5,  6,     6,     6,     8 ); // 100, 100, 100, 100
        }
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground             random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateMMMediViking5,      12,    12,    12,    12 ); //  12,  12,  12,  12
            AISetSubStateChanceRace( e_mainSubState_LateMMMediGhost5,       10,    16,     8,     6 ); //  22,  28,  20,  18
            AISetSubStateChanceRace( e_mainSubState_LateMMMediSeiege5,      12,     8,    16,    14 ); //  34,  36,  36,  32
            AISetSubStateChanceRace( e_mainSubState_LateMMMediThor5,         8,     8,     8,     6 ); //  42,  44,  44,  38
            AISetSubStateChanceRace( e_mainSubState_LateMMMediBattle5,       6,     6,     4,     4 ); //  48,  50,  48,  42
            AISetSubStateChanceRace( e_mainSubState_LateMMMediHarass5,      10,     8,    10,    10 ); //  58,  58,  58,  52
            AISetSubStateChanceRace( e_mainSubState_LateSiegeThor5,          2,     2,     2,     2 ); //  60,  60,  60,  54
            AISetSubStateChanceRace( e_mainSubState_LateVikingBattle5,      16,    16,    16,    16 ); //  76,  76,  76,  70
            AISetSubStateChanceRace( e_mainSubState_LateVikingRavenBattle5, 24,    24,    24,    30 ); // 100, 100, 100, 100
        }
        else {
            // may or may not be able to reach them on the ground         random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateMMMediViking5,      14,    16,    14,    12 ); //  14,  16,  14,  12
            AISetSubStateChanceRace( e_mainSubState_LateMMMediGhost5,       18,    22,    10,    10 ); //  32,  38,  24,  22
            AISetSubStateChanceRace( e_mainSubState_LateMMMediSeiege5,      12,     8,    18,    16 ); //  44,  46,  42,  38
            AISetSubStateChanceRace( e_mainSubState_LateMMMediThor5,        10,     8,    10,     8 ); //  54,  54,  52,  46
            AISetSubStateChanceRace( e_mainSubState_LateMMMediBattle5,       4,     4,     4,     4 ); //  58,  58,  56,  50
            AISetSubStateChanceRace( e_mainSubState_LateMMMediHarass5,      10,    10,    10,    10 ); //  68,  68,  66,  60
            AISetSubStateChanceRace( e_mainSubState_LateSiegeThor5,          4,     4,     6,     4 ); //  72,  72,  72,  64
            AISetSubStateChanceRace( e_mainSubState_LateVikingBattle5,      12,    12,    12,    12 ); //  84,  84,  84,  76
            AISetSubStateChanceRace( e_mainSubState_LateVikingRavenBattle5, 16,    16,    16,    24 ); // 100, 100, 100, 100
        }
    }
    else {
        // originally these multiplayer values were going to be different, so I'm leaving these seperate for now
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground 
            AISetSubStateChance( e_mainSubState_LateMMMediViking5,      16); //  16
            AISetSubStateChance( e_mainSubState_LateMMMediGhost5,       20); //  36
            AISetSubStateChance( e_mainSubState_LateMMMediSeiege5,      16); //  52
            AISetSubStateChance( e_mainSubState_LateMMMediThor5,        12); //  64
            AISetSubStateChance( e_mainSubState_LateMMMediBattle5,       4); //  68
            AISetSubStateChance( e_mainSubState_LateMMMediHarass5,      12); //  80
            AISetSubStateChance( e_mainSubState_LateSiegeThor5,         10); //  90
            AISetSubStateChance( e_mainSubState_LateVikingBattle5,       4); //  94
            AISetSubStateChance( e_mainSubState_LateVikingRavenBattle5,  6); // 100
        }        
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground
            AISetSubStateChance( e_mainSubState_LateMMMediViking5,      12); //  12
            AISetSubStateChance( e_mainSubState_LateMMMediGhost5,       10); //  22
            AISetSubStateChance( e_mainSubState_LateMMMediSeiege5,      12); //  34
            AISetSubStateChance( e_mainSubState_LateMMMediThor5,         8); //  42
            AISetSubStateChance( e_mainSubState_LateMMMediBattle5,       6); //  48
            AISetSubStateChance( e_mainSubState_LateMMMediHarass5,      10); //  58
            AISetSubStateChance( e_mainSubState_LateSiegeThor5,          2); //  60
            AISetSubStateChance( e_mainSubState_LateVikingBattle5,      16); //  76
            AISetSubStateChance( e_mainSubState_LateVikingRavenBattle5, 24); // 100
        }
        else {
            // may or may not be able to reach them on the ground
            AISetSubStateChance( e_mainSubState_LateMMMediViking5,      14); //  14
            AISetSubStateChance( e_mainSubState_LateMMMediGhost5,       18); //  32
            AISetSubStateChance( e_mainSubState_LateMMMediSeiege5,      12); //  44
            AISetSubStateChance( e_mainSubState_LateMMMediThor5,        10); //  54
            AISetSubStateChance( e_mainSubState_LateMMMediBattle5,       4); //  58
            AISetSubStateChance( e_mainSubState_LateMMMediHarass5,      10); //  68
            AISetSubStateChance( e_mainSubState_LateSiegeThor5,          4); //  72
            AISetSubStateChance( e_mainSubState_LateVikingBattle5,      12); //  84
            AISetSubStateChance( e_mainSubState_LateVikingRavenBattle5, 16); // 100
        }
    }

    subState = AIChooseSubState();

    stillValid = IsSubStateStillValid(player, subState);
    if (!stillValid) {
        subState = e_mainSubState_LateMMMediViking5;   // this subState needs to always return valid
    }
    
    AISetUserInt(player, c_lateGameStateIndex, subState);
    AISetUserInt(player, c_lateGameTimeIndex, FixedToInt(AIGetTime()) + c_lateGameFrequency);
}

//--------------------------------------------------------------------------------------------------
//  TerranLateGameArmy5
//--------------------------------------------------------------------------------------------------
static void TerranLateGameArmy5 (int player, int state) {
    int subState;

    if (state == e_armyTypeChoose) {
        TerranChooseNextLateGameArmy5(player, state);
        return;
    }

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState == e_mainSubState_LateMMMediViking5)            { TerranLateMMMediViking5(player, state); }
    else if (subState == e_mainSubState_LateMMMediGhost5)        { TerranLateMMMediGhost5(player, state); }
    else if (subState == e_mainSubState_LateMMMediSeiege5)       { TerranLateMMMediSeiege5(player, state); }
    else if (subState == e_mainSubState_LateMMMediThor5)         { TerranLateMMMediThor5(player, state); }
    else if (subState == e_mainSubState_LateMMMediBattle5)       { TerranLateMMMediBattle5(player, state); }
    else if (subState == e_mainSubState_LateMMMediHarass5)       { TerranLateMMMediHarass5(player, state); }
    else if (subState == e_mainSubState_LateSiegeThor5)          { TerranLateSiegeThor5(player, state); }
    else if (subState == e_mainSubState_LateVikingBattle5)       { TerranLateVikingBattle5(player, state); }
    else if (subState == e_mainSubState_LateVikingRavenBattle5)  { TerranLateVikingRavenBattle5(player, state); }
    else { ErrorMeleeScript(player, "Invalid Late SubState"); }
}

//--------------------------------------------------------------------------------------------------
//  TerranHarass5
//--------------------------------------------------------------------------------------------------
void TerranHarass5 (int player) {

    // Nuke harrassment
    if (AITechCount(player, c_TU_Ghost, c_techCountCompleteOnly) >= 2) {
        if (AITechCount(player, c_TB_GhostAcademy, c_techCountCompleteOnly) >= 1) {
            AISetStock( player, 1, c_TR_GhostCloak );
            if (AITechCount(player, c_TR_GhostCloak, c_techCountCompleteOnly) >= 1) {
                AISetStock( player, 1, c_TU_Nuke );
            }
        }
    }
}


//--------------------------------------------------------------------------------------------------
//  TerranLate5
//--------------------------------------------------------------------------------------------------
void TerranLate5 (int player) {
    // only allow scouting if I have an viking to scout with, ie stop using workers
    AIScoutingEnable(player, 1, c_TU_Medivac);
    // calculate a limit on how much simultaneous teching can happen
    AISetTechLimitLevels(player);


// ****************** Start Restock ****************** //
    AIClearStock(player);

// Very basic recovery start
    TerranRecoveryStart5(player);

// Very basic farms & peons
    AISetStockFarms( player, c_TB_SupplyDepot, c_stockNormalFarms);
    AISetStockPeons( player, 16, c_TU_SCV, c_stockMinPeons, c_stockAlways);

// Desperate expand (we're about to run out of minerals/gas)
    AIDefaultExpansion(player, c_TB_CommandCenter, 3000, 1000, c_expandVitalHard);

// Choose/validate what type of endgame army we'd like to make
    TerranLateGameArmy5(player, e_armyTypeChoose);

// Bare minimum army
    TerranLateGameArmy5(player, e_armyTypeMinimum);

// Basic peons
    AISetStockPeons( player, 24, c_TU_SCV, c_stockMinPeons, c_stockAlways);

// Urgent early detection
    if (AIGetCloakedAttacker(player) != null) {
        AISetStock( player, 1, c_TB_OrbitalCommand );
    }

// Barely adequete army including anti-air
    TerranLateGameArmy5(player, e_armyTypeBase);
    
// Basic towns, farms, & peons
    AIDefaultEconomy(player, c_TB_CommandCenter_Alias, c_TB_Refinery, c_TB_SupplyDepot, c_TU_SCV, 50, c_stockAlways);

// Low expand (we're running low on minerals/gas)
    AIDefaultExpansion(player, c_TB_CommandCenter, 5000, 2500, c_expandVitalHard);

// Minimum normal detection
    if (AISuspectDetectionDanger(player)) {
        AISetStock( player, 1, c_TB_OrbitalCommand );
    }

// Basic small army
    TerranLateGameArmy5(player, e_armyTypeSmall);
    
// Very important tech & a scout
    AISetStock( player, 1, c_TU_Medivac ); 

// Basic production buildings
    AISetStock( player, 2, c_TB_Barracks );
    AISetStock( player, 1, c_TB_BarracksTechLab );
    AISetStock( player, 1, c_TB_Factory );
    AISetStock( player, 1, c_TB_FactoryTechLab );

// Make Counter Units
    TerranMakeCounters5(player);
    
// Medium sized army
    TerranLateGameArmy5(player, e_armyTypeMedium);

// Normal expand
    AIDefaultExpansion(player, c_TB_CommandCenter, 12000, 6000, c_expandNormalHard);

// Multiple detectors & scouts & a transport
    AISetStockUnitNext( player, 2, c_TU_Medivac, c_stockAlways );
    AISetStockUnitNext( player, 2, c_TU_Raven, c_stockAlways );

// Important upgrades
    TerranImportantUpgrades5(player);

// Main base defense
    TerranDefenseMainTown5(player);

// Addition production buildings
    AISetStockUnitNext( player, 3, c_TB_Barracks,           c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_BarracksTechLab,    c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_BarracksReactor,    c_stockAlways );
    AISetStockUnitNext( player, 2, c_TB_BarracksTechLab,    c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_Factory,            c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_FactoryTechLab,     c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_Starport,           c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_StarportTechLab,    c_stockAlways );

// Multiple transports if needed
    if (AIWantsMultipleTransport(player)) {
        AISetStockUnitNext( player, 5, c_TU_Medivac, c_stockAlways );
    }

// Terran harrassment
    TerranHarass5(player);

// Large sized army
    TerranLateGameArmy5(player, e_armyTypeLarge);

// Other towns defense
    TerranDefenseOtherTowns5(player);

// Minor upgrades
    TerranMinorUpgrades5(player);
    
// Extra detection & scouts & transports
    AISetStockUnitNext( player, 4, c_TU_Raven, c_stockAlways );
    AISetStockUnitNext( player, 6, c_TU_Medivac, c_stockAlways );
    
// Extra production buildings
    AISetStockUnitNext( player, 4, c_TB_Barracks,           c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_BarracksTechLab,    c_stockAlways );
    AISetStockUnitNext( player, 1, c_TB_BarracksReactor,    c_stockAlways );
    AISetStockUnitNext( player, 3, c_TB_BarracksTechLab,    c_stockAlways );
    AISetStockUnitNext( player, 3, c_TB_Factory,            c_stockAlways );
    AISetStockUnitNext( player, 3, c_TB_FactoryTechLab,     c_stockAlways );
    AISetStockUnitNext( player, 3, c_TB_Starport,           c_stockAlways );
    AISetStockUnitNext( player, 3, c_TB_StarportTechLab,    c_stockAlways );

// Extra research buildings
    if (AIHasRes(player,650,500)) {
        AISetStockUnitNext( player, 2, c_TB_EngineeringBay, c_stockAlways );
        AISetStockUnitNext( player, 2, c_TB_Armory, c_stockAlways );
    }

// Entire Army
    TerranLateGameArmy5(player, e_armyTypeFull);

// Idle expand (very low priority, to prevent us from sitting around with idle peons)
    AIDefaultExpansion(player, c_TB_CommandCenter, 24000, 12000, c_expandIdleHard);

    AIEnableStock(player);    
// ****************** End Restock ****************** //

}
