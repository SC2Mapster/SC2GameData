//==================================================================================================
//  Protoss Melee Very Hard
//==================================================================================================

static const int e_mainSubState_OpenPureZealot4       = 2; // double gate, no gas
static const int e_mainSubState_OpenZealotCyb4        = 3; // single gate, one gas, cybcore
static const int e_mainSubState_OpenZealotTech4       = 4; // single gate, double gas, cybcore

static const int e_mainSubState_OpenBasicAir4         = 5;
static const int e_mainSubState_OpenQuickExpandAir4   = 6;

static const int e_mainSubState_MidZealotRush4        = 7;
static const int e_mainSubState_MidZealotAttack4      = 8;
static const int e_mainSubState_MidZealotSentry4      = 9;
static const int e_mainSubState_MidZealotStalker4     = 10;
static const int e_mainSubState_MidZealotImmortal4    = 11;
static const int e_mainSubState_MidZealotColossus4    = 12;
static const int e_mainSubState_MidDarkTemplarRush4   = 13;
static const int e_mainSubState_MidGndVoidRayRush4    = 14;

static const int e_mainSubState_MidAirDropRush4       = 15;
static const int e_mainSubState_MidAirVoidRayRush4    = 16;
static const int e_mainSubState_MidAirDrop4           = 17;
static const int e_mainSubState_MidAirVoidRay4        = 18;
static const int e_mainSubState_MidAirCarrier4        = 19;

static const int e_mainSubState_LateZSSArchon4        = 20;
static const int e_mainSubState_LateZSSHighTemplar4   = 21;
static const int e_mainSubState_LateZSSImmortal4      = 22;
static const int e_mainSubState_LateZSSColossus4      = 22;
static const int e_mainSubState_LateZSSCarrier4       = 23;
static const int e_mainSubState_LateZSSMothership4    = 24;
static const int e_mainSubState_LateCarrierMother4    = 25;
static const int e_mainSubState_LateCarrVoidPhoe4     = 26;


//--------------------------------------------------------------------------------------------------
//  ProtossOpenInitGnd4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenInitGnd4(int player) {
    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenZealotCyb4);

    if (AIGetNumEnemies(player) == 1) {
        // single enemy
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground       random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_OpenPureZealot4,    16,    40,     6,    10 ); //  16,  40,   6,  10
            AISetSubStateChanceRace( e_mainSubState_OpenZealotCyb4,     80,    58,    90,    86 ); //  96,  98,  96,  96
            AISetSubStateChanceRace( e_mainSubState_OpenZealotTech4,     4,     2,     4,     4 ); // 100, 100, 100, 100
        }
        else {
            // might not be able to reach them on the ground          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_OpenPureZealot4,     6,    12,     4,     6 ); //   6,  12,   4,   6
            AISetSubStateChanceRace( e_mainSubState_OpenZealotCyb4,     84,    82,    86,    84 ); //  90,  94,  90,  90
            AISetSubStateChanceRace( e_mainSubState_OpenZealotTech4,    10,     6,    10,    10 ); // 100, 100, 100, 100
        }
    }
    else {
        // multiple enemies
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground
            AISetSubStateChance( e_mainSubState_OpenPureZealot4,    20 ); //  20
            AISetSubStateChance( e_mainSubState_OpenZealotCyb4,     76 ); //  96 
            AISetSubStateChance( e_mainSubState_OpenZealotTech4,     4 ); // 100
        }
        else {
            // might not be able to reach them on the ground
            AISetSubStateChance( e_mainSubState_OpenPureZealot4,    10 ); //  10
            AISetSubStateChance( e_mainSubState_OpenZealotCyb4,     78 ); //  88 
            AISetSubStateChance( e_mainSubState_OpenZealotTech4,    12 ); // 100
        }
    }

    AISetMainState(player, e_mainState_OpenGnd4, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenGndGoMid4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenGndGoMid4(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidZealotStalker4);
    
    if (AIGetNumEnemies(player) == 1) {
        if (curSubState == e_mainSubState_OpenPureZealot4) {           // 16,    40,     6,    10
            // double gate, no gas                                      random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidZealotRush4,       52,    40,    50,    50 );  //  52,  40,  50,  50
            AISetSubStateChanceRace( e_mainSubState_MidZealotAttack4,     24,    30,    10,    30 );  //  76,  70,  60,  80
            AISetSubStateChanceRace( e_mainSubState_MidZealotSentry4,     12,    15,    20,    10 );  //  88,  85,  80,  90
            AISetSubStateChanceRace( e_mainSubState_MidZealotStalker4,    12,    15,    20,    10 );  // 100, 100, 100, 100
        }
        else if (curSubState == e_mainSubState_OpenZealotCyb4) {       // 80,    58,    90,    86
            // single gate, one gas, cybcore                            random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidZealotAttack4,      2,     4,     2,     2 );  //   2,   4,   2,   2
            AISetSubStateChanceRace( e_mainSubState_MidZealotSentry4,     20,    24,    12,    10 );  //  22,  28,  14,  12
            AISetSubStateChanceRace( e_mainSubState_MidZealotStalker4,    24,    32,    12,    16 );  //  46,  60,  26,  28
            AISetSubStateChanceRace( e_mainSubState_MidZealotImmortal4,   30,    24,    16,    60 );  //  76,  84,  42,  88
            AISetSubStateChanceRace( e_mainSubState_MidZealotColossus4,   20,    12,    56,     8 );  //  96,  96,  98,  96
            AISetSubStateChanceRace( e_mainSubState_MidDarkTemplarRush4,   2,     2,     2,     2 );  //  98,  98,  99,  98
            AISetSubStateChanceRace( e_mainSubState_MidGndVoidRayRush4,    2,     2,     2,     2 );  // 100, 100, 100, 100
        }
        else if (curSubState == e_mainSubState_OpenZealotTech4) {       //  4,     2,     4,     4
            // single gate, double gas, cybcore                          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_MidZealotSentry4,       2,     4,     2,     2 );  //   2,   4,   2,   2
            AISetSubStateChanceRace( e_mainSubState_MidZealotStalker4,      2,     4,     2,     2 );  //   4,   8,   4,   4
            AISetSubStateChanceRace( e_mainSubState_MidZealotImmortal4,     6,     6,     6,    14 );  //  10,  14,  10,  18
            AISetSubStateChanceRace( e_mainSubState_MidZealotColossus4,    16,     6,    40,    10 );  //  26,  20,  50,  28
            AISetSubStateChanceRace( e_mainSubState_MidDarkTemplarRush4,   34,    40,    20,    36 );  //  60,  60,  70,  64
            AISetSubStateChanceRace( e_mainSubState_MidGndVoidRayRush4,    40,    40,    30,    36 );  // 100, 100, 100, 100
        }
    }
    else {
        if (curSubState == e_mainSubState_OpenPureZealot4) { // 20
            // double gate, no gas
            AISetSubStateChance( e_mainSubState_MidZealotRush4,       38 );  // 38
            AISetSubStateChance( e_mainSubState_MidZealotAttack4,     30 );  // 68
            AISetSubStateChance( e_mainSubState_MidZealotSentry4,     16 );  // 84
            AISetSubStateChance( e_mainSubState_MidZealotStalker4,    16 );  // 100
        }
        else if (curSubState == e_mainSubState_OpenZealotCyb4) { // 76
            // single gate, one gas, cybcore
            AISetSubStateChance( e_mainSubState_MidZealotAttack4,      4 );  //  4
            AISetSubStateChance( e_mainSubState_MidZealotSentry4,     20 );  // 24
            AISetSubStateChance( e_mainSubState_MidZealotStalker4,    24 );  // 48
            AISetSubStateChance( e_mainSubState_MidZealotImmortal4,   36 );  // 84
            AISetSubStateChance( e_mainSubState_MidZealotColossus4,   16 );  // 100
        }
        else if (curSubState == e_mainSubState_OpenZealotTech4) { //  4
            // single gate, double gas, cybcore
            AISetSubStateChance( e_mainSubState_MidZealotSentry4,      4 );  //  4
            AISetSubStateChance( e_mainSubState_MidZealotStalker4,     4 );  //  8
            AISetSubStateChance( e_mainSubState_MidZealotImmortal4,    6 );  // 14
            AISetSubStateChance( e_mainSubState_MidZealotColossus4,   10 );  // 24
            AISetSubStateChance( e_mainSubState_MidDarkTemplarRush4,  36 );  // 60
            AISetSubStateChance( e_mainSubState_MidGndVoidRayRush4,   40 );  // 100
        }
    }

    AISetMainState(player, e_mainState_Mid4, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ProtossGoLate4
//--------------------------------------------------------------------------------------------------
static void ProtossGoLate4 (int player) {
    if (AIState(player, e_attackState) == e_attackState_Wait) {
        AIWaveMerge(player, c_waveMain, c_waveAttack);
        AISetAttackState(player, e_attackState_Attack);
    }
    AIResetUserData(player);
    //AISetNumScouts(player, 2);
    AISetFlag(player, e_flagsTimeout, true);
    AISetFlag(player, e_flagsDetect, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsDiversion, true);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AISetMainState(player, e_mainState_Late4, e_mainSubState_Unset);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenPureZealot4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenPureZealot4 (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 7, c_PU_Zealot );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 1, 1, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_PU_Zealot, c_techCountInProgressOrBetter) < 5) {
            return;
        }
    }
    
    ProtossOpenGndGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenZealotCyb4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenZealotCyb4 (int player) {
    int numZealot;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Assimilator, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 1, 20, c_continuousMerge);

    if (AIGetTime() < 240) {
        if (AITechCount(player, c_PB_CyberneticsCore, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    ProtossOpenGndGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenZealotTech4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenZealotTech4 (int player) {
    int numZealot;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 2, c_PB_Assimilator, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 1, 20, c_continuousMerge);

    if (AIGetTime() < 240) {
        if (AITechCount(player, c_PB_CyberneticsCore, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    ProtossOpenGndGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenInitAir4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenInitAir4(int player) {   
    AINewChooseSubState(player, e_openRollState, 1, 1000, e_mainSubState_OpenBasicAir4);

    if (AIHasNearbyOpenExpansion(player)) {
        AISetSubStateChance( e_mainSubState_OpenQuickExpandAir4, 10 );
    }

    AISetMainState(player, e_mainState_OpenAir4, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAirGoMid4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenAirGoMid4(int player) {
    int curSubState = AIState(player, e_mainSubState);

    AINewChooseSubState(player, e_middleRollState, 1, 1000, e_mainSubState_MidAirCarrier4);

    if (curSubState == e_mainSubState_OpenBasicAir4) {  // 90
        AISetSubStateChance( e_mainSubState_MidAirCarrier4,     30 ); // 30
        AISetSubStateChance( e_mainSubState_MidAirDropRush4,    30 ); // 60
        AISetSubStateChance( e_mainSubState_MidAirVoidRayRush4, 15 ); // 75
        AISetSubStateChance( e_mainSubState_MidAirVoidRay4,     15 ); // 90
        AISetSubStateChance( e_mainSubState_MidAirDrop4,        10 ); //100
    }
    else if (curSubState == e_mainSubState_OpenQuickExpandAir4) {  // 10
        AISetSubStateChance( e_mainSubState_MidAirCarrier4,     50 ); // 50
        AISetSubStateChance( e_mainSubState_MidAirVoidRay4,     30 ); // 80
        AISetSubStateChance( e_mainSubState_MidAirDrop4,        10 ); // 90
        AISetSubStateChance( e_mainSubState_MidAirVoidRayRush4,  5 ); // 95
        AISetSubStateChance( e_mainSubState_MidAirDropRush4,     5 ); //100
    }

    AISetMainState(player, e_mainState_Mid4, AIChooseSubState());
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenBasicAir4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenBasicAir4(int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 11, c_PU_Probe );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    // don't start scouting or attacking

    if (AIGetTime() < 120) {
        if (AITechCount(player, c_PB_Pylon, c_techCountInProgressOrBetter) < 1) {
            return;
        }
    }

    ProtossOpenAirGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossFastExpand4
//--------------------------------------------------------------------------------------------------
static void ProtossFastExpand4 (int player) {
    int state;
    int count = 0;
    int i = -1;
    
    while (i < c_townMax) {
        i = i + 1;
        state = AIGetTownState(player, i);
        if (state == c_townStateClaimed) {
            return; // already expanding
        }
        if (state != c_townStateEstablished) {
            continue;
        }
        if (count == 1) {
            return; // found 2nd town
        }
        count = 1;
    }
    AIExpand(player, AIGetTownLocation(player, c_townMain), c_PB_Nexus);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenQuickExpandAir4
//--------------------------------------------------------------------------------------------------
static void ProtossOpenQuickExpandAir4(int player) {
    int mainSubState;
    
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 14) {
        if (AITechCount(player, c_PB_Nexus, c_techCountQueuedOrBetter) < 2) {
            ProtossFastExpand4(player);
            AIEnableStock(player);
            return;
        }
    }

    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    // don't start scouting or attacking

    if (AITechCount(player, c_PB_Nexus, c_techCountInProgressOrBetter) < 2) {
        return;
    }

    mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_OpenQuickExpandAir4) { ProtossOpenAirGoMid4(player); }
    //else if (mainSubState == e_mainSubState_OpenQuickExpandGnd4) { ProtossOpenGndGoMid4(player); }
    else { ErrorMeleeScript(player, "Invalid Protoss quick expand state"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenGnd4
//--------------------------------------------------------------------------------------------------
void ProtossOpenGnd4 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    AIEarlyDefenseScouting(player);

    if (mainSubState == e_mainSubState_Unset)                      { ProtossOpenInitGnd4(player); }
    else if (mainSubState == e_mainSubState_OpenPureZealot4)       { ProtossOpenPureZealot4(player); }
    else if (mainSubState == e_mainSubState_OpenZealotCyb4)        { ProtossOpenZealotCyb4(player); }
    else if (mainSubState == e_mainSubState_OpenZealotTech4)       { ProtossOpenZealotTech4(player); }
    else { ErrorMeleeScript(player, "Invalid OpenGnd mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAir4
//--------------------------------------------------------------------------------------------------
void ProtossOpenAir4 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState == e_mainSubState_Unset)                    { ProtossOpenInitAir4(player); }
    else if (mainSubState == e_mainSubState_OpenBasicAir4)       { ProtossOpenBasicAir4(player); }
    else if (mainSubState == e_mainSubState_OpenQuickExpandAir4) { ProtossOpenQuickExpandAir4(player); }
    else { ErrorMeleeScript(player, "Invalid OpenAir mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossDefaultExtraMidStock4
//--------------------------------------------------------------------------------------------------
static void ProtossDefaultExtraMidStock4 (int player) {
    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        if (AIHasRes(player,650,0)) {
            AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockAlways );
            if (AITechCount(player, c_PB_Gateway, c_techCountInProgressOrBetter) >= 4) {
                if (AITechCount(player, c_PB_RoboticsFacility, c_techCountInProgressOrBetter) > 0) {
                    AISetStockUnitNext( player, 3, c_PB_RoboticsFacility, c_stockAlways );
                }
                if (AITechCount(player, c_PB_Stargate, c_techCountInProgressOrBetter) > 0) {
                    AISetStockUnitNext( player, 3, c_PB_Stargate, c_stockAlways );
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotRush4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotRush4 (int player) {

    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 7, c_PU_Zealot );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 9, c_PU_Zealot );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStockUnitNext( player, 11, c_PU_Zealot, c_stockAlways );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 21, c_PU_Probe );
    AISetStockUnitNext( player, 6, c_PU_Stalker, c_stockAlways );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStockUnitNext( player, 13, c_PU_Zealot, c_stockAlways );
    AISetStock( player, 8, c_PB_Pylon ); 
    AISetStock( player, 1, c_PB_RoboticsFacility ); 
    AISetStockUnitNext( player, 15, c_PU_Zealot, c_stockAlways );  

    AIEnableStock(player);
    
    //---------------------------------------------------------
   
    AISetAttackStatus(player, c_PU_Zealot, 1, 3, c_continuousMerge);

    if (AIGetTime() < 540) {
        if (AITechCount(player, c_PU_Zealot, c_techCountInProgressOrBetter) < 13) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotAttack4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotAttack4 (int player) {    
    int numStalker;

    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 7, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 6, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStockUnitNext( player, 9, c_PU_Zealot, c_stockAlways );
    AISetStock( player, 1, c_PB_RoboticsFacility ); 
    AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStockUnitNext( player, 10, c_PU_Stalker, c_stockAlways );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_PU_Zealot, 2, 5, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 1, 2, c_continuousMerge);
    
    if (AIGetTime() < 540) {
        if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) < 8) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotSentry4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotSentry4 (int player) {
    AIClearStock(player);
 
    ProtossDefaultExtraMidStock4(player);    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Sentry );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 3, c_PU_Sentry );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 1, c_PR_SentryHallucination );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 5, c_PU_Sentry );
    AISetStock( player, 7, c_PU_Zealot );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStockUnitNext( player, 9, c_PU_Zealot, c_stockAlways );
    AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
    AISetStockUnitNext( player, 12, c_PU_Zealot, c_stockAlways );
    AISetStock( player, 8, c_PB_Pylon );

    AIEnableStock(player);

    //---------------------------------------------------------
 
    AISetAttackStatus(player, c_PU_Zealot, 2, 6, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_PU_Sentry, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_Sentry, c_techCountInProgressOrBetter) < 6) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotStalker4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotStalker4 (int player) {
    int numStalker;

    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player); 
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 5, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility ); 
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 7, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 10, c_PU_Stalker );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 4, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_PU_Stalker, 1, 3, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) < 7) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotImmortal4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotImmortal4 (int player) {
    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player);   
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Sentry );
    AISetStock( player, 3, c_PU_Immortal );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 4, c_PU_Immortal );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 20, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_PU_Immortal, 1, 2, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_Immortal, c_techCountInProgressOrBetter) < 4) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidZealotColossus4
//--------------------------------------------------------------------------------------------------
static void ProtossMidZealotColossus4 (int player) {
    AIClearStock(player);
  
    ProtossDefaultExtraMidStock4(player); 
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PB_RoboticsBay );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Colossus );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 7, c_PU_Zealot );
    AISetStock( player, 2, c_PU_Colossus );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 2, c_PU_Stalker );   
    AISetStock( player, 7, c_PB_Pylon ); 

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 20, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 6) {
        AISetAttackStatus(player, c_PU_Colossus, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) < 2) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidDarkTemplarRush4
//--------------------------------------------------------------------------------------------------
static void ProtossMidDarkTemplarRush4 (int player) {
    int numDT;

    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PB_TwilightCouncil );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PB_DarkShrine );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 4, c_PU_DarkTemplar );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Stalker );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 20, c_continuousMerge);
    AISetAttackStatus(player, c_PU_DarkTemplar, 1, 4, c_continuousMerge);

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_DarkTemplar, c_techCountCompleteOnly) < 4) {
            return;
        }
    }

    ProtossOpenGndGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidGndVoidRayRush4
//--------------------------------------------------------------------------------------------------
static void ProtossMidGndVoidRayRush4 (int player) {
    int numStalker;

    AIClearStock(player);

    ProtossDefaultExtraMidStock4(player); 
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 5, c_PU_VoidRay );
    AISetStock( player, 1, c_PU_Stalker );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 20, c_continuousMerge);
    AISetAttackStatus(player, c_PU_VoidRay, 2, 2, c_continuousMerge);

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 4) {
            return;
        }
    }

    ProtossOpenGndGoMid4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirDropRush4
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirDropRush4 (int player) {
    AIClearStock(player);
    
    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PU_WarpPrism );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 2, c_PU_Observer );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 5, c_PU_Stalker );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_WarpPrism, 1, 1, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly) < 2) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirVoidRayRush4
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirVoidRayRush4 (int player) {
    AIClearStock(player);
    
    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 1, c_PU_VoidRay );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_VoidRay, 1, 1, c_continuousMerge);
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 3) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirDrop4
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirDrop4 (int player) {
    AIClearStock(player);
    
    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 2, c_PB_RoboticsFacility );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 2, c_PU_WarpPrism );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 3, c_PU_WarpPrism );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStock( player, 5, c_PU_Stalker );
    AISetStock( player, 7, c_PB_Pylon );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_PU_WarpPrism, c_techCountCompleteOnly) >= 3) {
        AISetAttackStatus(player, c_PU_Zealot, 1, 8, c_continuousMerge);
        AISetAttackStatus(player, c_PU_Stalker, 1, 4, c_continuousMerge);
        AISetAttackStatus(player, c_PU_Immortal, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 510) {
        if (AITechCount(player, c_PU_Immortal, c_techCountInProgressOrBetter) < 2) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirVoidRay4
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirVoidRay4 (int player) {
    AIClearStock(player);
    
    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 11, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 1, c_PB_Forge );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 5, c_PU_VoidRay );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 6, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 1, c_PB_PhotonCannon );
    AISetStock( player, 7, c_PU_VoidRay );
    AISetStock( player, 2, c_PB_PhotonCannon );
    AISetStock( player, 2, c_PU_Phoenix );
    AISetStock( player, 8, c_PB_Pylon );
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_VoidRay, 1, 5, c_continuousMerge);
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 7) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirCarrier4
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirCarrier4 (int player) {
    AIClearStock(player);
    
    ProtossDefaultExtraMidStock4(player);
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 11, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PB_FleetBeacon );
    AISetStock( player, 1, c_PU_VoidRay );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Carrier );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 1, c_PB_Forge );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Carrier );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PB_PhotonCannon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 3, c_PU_Carrier );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Carrier );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_PU_Carrier, 1, 3, c_continuousMerge);
    
    if (AIGetTime() < 660) {
        if (AITechCount(player, c_PU_Carrier, c_techCountCompleteOnly) < 3) {
            return;
        }
    }
    
    ProtossGoLate4(player);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMid4
//--------------------------------------------------------------------------------------------------
void ProtossMid4 (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (AIGetGroundStartLocs(PlayerStartLocation(player)) > 0) {
        AIScoutingEnable(player, 12, c_PU_Probe);
        AIEarlyDefenseScouting(player);
    }
    else {
        AIScoutingEnable(player, 1, c_PU_Observer);
    }

    if (mainSubState == e_mainSubState_MidZealotRush4)           { ProtossMidZealotRush4(player); }
    else if (mainSubState == e_mainSubState_MidZealotAttack4)    { ProtossMidZealotAttack4(player); }
    else if (mainSubState == e_mainSubState_MidZealotSentry4)    { ProtossMidZealotSentry4(player); }
    else if (mainSubState == e_mainSubState_MidZealotStalker4)   { ProtossMidZealotStalker4(player); }
    else if (mainSubState == e_mainSubState_MidZealotImmortal4)  { ProtossMidZealotImmortal4(player); }
    else if (mainSubState == e_mainSubState_MidZealotColossus4)  { ProtossMidZealotColossus4(player); }
    else if (mainSubState == e_mainSubState_MidDarkTemplarRush4) { ProtossMidDarkTemplarRush4(player); }
    else if (mainSubState == e_mainSubState_MidGndVoidRayRush4)  { ProtossMidGndVoidRayRush4(player); }
    else if (mainSubState == e_mainSubState_MidAirDropRush4)     { ProtossMidAirDropRush4(player); }
    else if (mainSubState == e_mainSubState_MidAirVoidRayRush4)  { ProtossMidAirVoidRayRush4(player); }
    else if (mainSubState == e_mainSubState_MidAirDrop4)         { ProtossMidAirDrop4(player); }
    else if (mainSubState == e_mainSubState_MidAirVoidRay4)      { ProtossMidAirVoidRay4(player); }
    else if (mainSubState == e_mainSubState_MidAirCarrier4)      { ProtossMidAirCarrier4(player); }
    else { ErrorMeleeScript(player, "Invalid Mid mainSubState"); }
}

//==================================================================================================
//  LATE GAME
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ProtossRecoveryStart4
//--------------------------------------------------------------------------------------------------
static void ProtossRecoveryStart4 (int player) {

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 1, c_PU_Probe );
    AISetStockFarms( player, c_PB_Pylon, c_stockNeededFarms);
    AISetStock( player, 10, c_PU_Probe );

}

//--------------------------------------------------------------------------------------------------
//  ProtossImportantUpgrades4
//--------------------------------------------------------------------------------------------------
static void ProtossImportantUpgrades4 (int player) {

    if (AITechCount(player, c_PU_HighTemplar, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
    }

    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 8) {
        AISetStock( player, 1, c_PR_ZealotCharge );
    }

    if (AITechCount(player, c_PU_Stalker, c_techCountCompleteOnly) >= 8) {
        AISetStock( player, 1, c_PR_StalkerBlink );
    }

    if (AITechCount(player, c_PU_Colossus, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_PR_ColossusRange );
    }
    
    if (AITechCount(player, c_PU_Sentry, c_techCountCompleteOnly) >= 5) {
        AISetStock( player, 1, c_PR_SentryHallucination );
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossMinorUpgrades4
//--------------------------------------------------------------------------------------------------
static void ProtossMinorUpgrades4 (int player) {

    if (AITechCount(player, c_PU_HighTemplar, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
        AISetStock( player, 1, c_PR_HighTemplarEnergy );
    }

    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 4) {
        AISetStock( player, 1, c_PR_ZealotCharge );
    }

    if (AITechCount(player, c_PU_Stalker, c_techCountCompleteOnly) >= 4) {
        AISetStock( player, 1, c_PR_StalkerBlink );
    }

    if (AITechCount(player, c_PU_Colossus, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_PR_ColossusRange );
    }

    if (AITechCount(player, c_PU_Observer, c_techCountCompleteOnly) >= 2) {
        AISetStock( player, 1, c_PR_ObserverSpeed );
    }
    
    if (AITechCount(player, c_PU_Sentry, c_techCountCompleteOnly) >= 4) {
        AISetStock( player, 1, c_PR_SentryHallucination );
    }

    if (AITechCount(player, c_PU_WarpPrism, c_techCountCompleteOnly) >= 1) {
        AISetStock( player, 1, c_PR_WarpPrismSpeed );
    }
    
    AINewTechStock(player);
    AITechStockAdd(c_PR_Shields1);
    AITechStockAdd(c_PR_Shields2);
    AITechStockAdd(c_PR_Shields3);
    AITechStockAdd(c_PR_GroundWeapons1);
    AITechStockAdd(c_PR_GroundWeapons2);
    AITechStockAdd(c_PR_GroundWeapons3);
    AITechStockAdd(c_PR_GroundArmor1);
    AITechStockAdd(c_PR_GroundArmor2);
    AITechStockAdd(c_PR_GroundArmor3);
    AISetStockTechNext(player);

    if (AITechCount(player, c_PU_Phoenix, c_techCountCompleteOnly) +
        AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) +
        AITechCount(player, c_PU_Carrier, c_techCountCompleteOnly) >= 4)
    {
        AINewTechStock(player);
        AITechStockAdd(c_PR_AirWeapons1);
        AITechStockAdd(c_PR_AirWeapons2);
        AITechStockAdd(c_PR_AirWeapons3);
        AITechStockAdd(c_PR_AirArmor1);
        AITechStockAdd(c_PR_AirArmor2);
        AITechStockAdd(c_PR_AirArmor3);
        AISetStockTechNext(player);
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossDefenseMainTown4
//--------------------------------------------------------------------------------------------------
static void ProtossDefenseMainTown4 (int player) {
    int mainTown;
    int state;
    int pylonInTown;
    int cannonInTown;
    int obeliskInTown;
    int pylonCount;
    int cannonCount;
    int obeliskCount;

    mainTown = AIGetMainTown(player);

    state = AIGetTownState(player, mainTown);
    if (state != c_townStateEstablished) {
        return;
    }

    // make 1 pylon so we can make cannons
    pylonInTown = AIGetBuildingCountInTown(player, mainTown, c_PB_Pylon, c_techCountCompleteOnly);
    pylonCount = AITechCount(player, c_PB_Pylon, c_techCountCompleteOnly) + 1;
    if (pylonInTown == 0) {
        AISetStockEx(player, mainTown, pylonCount, c_PB_Pylon, c_makeExpanPower, 0);
        return;
    }

    // make 1 cannon close to the first pylon
    cannonInTown = AIGetBuildingCountInTown(player, mainTown, c_PB_PhotonCannon, c_techCountInProgressOrBetter);
    cannonCount = AITechCount(player, c_PB_PhotonCannon, c_techCountCompleteOnly) + 1;
    if (cannonInTown == 0) {
        AISetStockEx(player, mainTown, cannonCount, c_PB_PhotonCannon, c_makeDefense, 0);
        return;
    }

    // once first cannon is going, make a backup pylon
    if (pylonInTown == 1) {
        AISetStockEx(player, mainTown, pylonCount, c_PB_Pylon, c_makeExpanPower, 0);
        return;
    }

    // once the second pylon is done, make 2 more cannons
    if (cannonInTown < 3) {
        AISetStockEx(player, mainTown, cannonCount, c_PB_PhotonCannon, c_makeDefense, 0);
        return;
    }

}

//--------------------------------------------------------------------------------------------------
//  ProtossDefenseOtherTowns4
//--------------------------------------------------------------------------------------------------
static void ProtossDefenseOtherTowns4 (int player) {
    int i = 0;
    int town;
    int mainTown;
    int state;
    int power;
    int defense;
    int darkplyon;

    mainTown = AIGetMainTown(player);

    while (i < c_townMax) {
        town = i;
        i = i + 1;

        if (town == mainTown) {
            continue;
        }

        state = AIGetTownState(player, town);
        if (state != c_townStateEstablished) {
            continue;
        }

        if (AIGetBuildingCountInTown(player, town, c_PB_Nexus, c_techCountInProgressOrBetter) < 1) {
            continue;
        }

        // make 1 pylon so we can make cannons
        power = AIGetBuildingCountInTown(player, town, c_PB_Pylon, c_techCountCompleteOnly);
        if (power == 0) {
            AISetStockEx(player, town, 1, c_PB_Pylon, c_makeExpanPower, 0);
            continue;
        }

        // make 1 cannon close to the first pylon
        defense = AIGetBuildingCountInTown(player, town, c_PB_PhotonCannon, c_techCountInProgressOrBetter);
        if (defense == 0) {
            AISetStockEx(player, town, 1, c_PB_PhotonCannon, c_makeDefense, 0);
            continue;
        }

        // once first cannon is going, make a backup pylon
        if (power == 1) {
            AISetStockEx(player, town, 2, c_PB_Pylon, c_makeExpanPower, 0);
            continue;
        }

        // once the second pylon is done, make 2 more cannons
        if (defense < 3) {
            AISetStockEx(player, town, 3, c_PB_PhotonCannon, c_makeDefense, 0);
            continue;
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossMakeCounters4
//--------------------------------------------------------------------------------------------------
static void ProtossMakeCounters4 (int player) {
    AIMakeCounters(player, c_PU_Zealot,      c_stockAlways);
    AIMakeCounters(player, c_PU_Stalker,     c_stockAlways);
    AIMakeCounters(player, c_PU_Sentry,      c_stockAlways);
    AIMakeCounters(player, c_PU_Immortal,    c_stockAlways);
    AIMakeCounters(player, c_PU_HighTemplar, c_stockAlways);
    AIMakeCounters(player, c_PU_DarkTemplar, c_stockAlways);
    AIMakeCounters(player, c_PU_Archon,      c_stockAlways);
    AIMakeCounters(player, c_PU_Phoenix,     c_stockAlways);
    AIMakeCounters(player, c_PU_VoidRay,     c_stockAlways);
    AIMakeCounters(player, c_PU_Carrier,     c_stockAlways);
    AIMakeCounters(player, c_PU_Observer,    c_stockAlways);
    AIMakeCounters(player, c_PU_Colossus,    c_stockAlways);
    //AIMakeCounters(player, c_PU_Mothership,  c_stockAlways); mothership is way too slow, don't make one for now
}


//--------------------------------------------------------------------------------------------------
//  ProtossLateGameArmy4 Helper functions
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSArchon4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSArchon4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_TwilightCouncil, c_techCountCompleteOnly);

        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 7, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Sentry, c_stockAlways );
        return true;  //  30 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_PU_HighTemplar, c_stockAlways );
        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
        AISetStockUnitNext( player, 10, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_HighTemplar, c_stockAlways );
        return true;  //  52 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 2, c_PU_Archon, c_stockAlways );
        AISetStockUnitNext( player, 14, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Archon, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Archon, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 10, c_PU_Archon, c_stockAlways );   
        AISetStockUnitNext( player, 16, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Stalker, c_stockAlways );              
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways );   
        AISetStockUnitNext( player, 8, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_Archon, c_stockAlways );
        AISetStockUnitNext( player, 22, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Archon, c_stockAlways );  
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSHighTemplar4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSHighTemplar4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_TwilightCouncil, c_techCountCompleteOnly);

        return (techCount >= 1);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 7, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Sentry, c_stockAlways );
        return true;  //  30 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_PU_HighTemplar, c_stockAlways );
        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
        AISetStockUnitNext( player, 10, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_HighTemplar, c_stockAlways );
        return true;  //  52 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 6, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 14, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_HighTemplar, c_stockAlways );
        return true;  //  80 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 20, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_HighTemplar, c_stockAlways );  
        AISetStockUnitNext( player, 12, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 14, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 24, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 30, c_PU_Zealot, c_stockAlways ); 
        AISetStockUnitNext( player, 20, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 24, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 14, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 36, c_PU_Zealot, c_stockAlways ); 
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSImmortal4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSImmortal4 (int player, int state) {
    if (state == e_armyTypeValidate) {
        // this is our default late game subState needs to always return valid
        return true;
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Sentry, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_PU_Immortal, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Immortal, c_stockAlways );
        return true;  //  52 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 6, c_PU_Immortal, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Immortal, c_stockAlways );
        return true;  //  76 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 10, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Immortal, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Immortal, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_Immortal, c_stockAlways ); 
        AISetStockUnitNext( player, 20, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 20, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 18, c_PU_Zealot, c_stockAlways ); 
        AISetStockUnitNext( player, 18, c_PU_Immortal, c_stockAlways );  
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSColossus4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSColossus4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_RoboticsBay, c_techCountCompleteOnly);

        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Zealot, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_PU_Colossus, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Colossus, c_stockAlways );
        return true;  //  54 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 12, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Colossus, c_stockAlways );
        return true;  //  76 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 12, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 6, c_PU_Colossus, c_stockAlways );   
        AISetStockUnitNext( player, 16, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Colossus, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Stalker, c_stockAlways );  
        AISetStockUnitNext( player, 20, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 24, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Colossus, c_stockAlways );  
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSCarrier4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSCarrier4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly);

        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 7, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Sentry, c_stockAlways );
        return true;  //  30 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 1, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Carrier, c_stockAlways );
        return true;  //  48 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 3, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Carrier, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 6, c_PU_Carrier, c_stockAlways );   
        AISetStockUnitNext( player, 16, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 24, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Carrier, c_stockAlways );  
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateZSSMothership4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateZSSMothership4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly);

        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 4, c_PU_Zealot, c_stockAlways );
        return true;  //  8 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 2, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Stalker, c_stockAlways );
        return true;  //  18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters
        AISetStockUnitNext( player, 4, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 7, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 5, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Sentry, c_stockAlways );
        return true;  //  30 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 10, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Mothership, c_stockAlways );
        return true;  //  52 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 12, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_HighTemplar, c_stockAlways );
        return true;  //  72 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 4, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 16, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 12, c_PU_Sentry, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_HighTemplar, c_stockAlways );
        AISetStockUnitNext( player, 24, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Stalker, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Sentry, c_stockAlways ); 
        AISetStockUnitNext( player, 4, c_PU_VoidRay, c_stockAlways );
        AISetStockUnitNext( player, 18, c_PU_HighTemplar, c_stockAlways );  
        AISetStockUnitNext( player, 28, c_PU_Zealot, c_stockAlways );
        AISetStockUnitNext( player, 24, c_PU_Stalker, c_stockAlways );  
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateCarrierMother4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateCarrierMother4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_FleetBeacon, c_techCountCompleteOnly);
        if (techCount < 2) {
            return false;
        }

        techCount = AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly);

        return (techCount >= 2);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 1, c_PU_Carrier, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 3, c_PU_Carrier, c_stockAlways );
        return true;  // 18 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 4, c_PU_Carrier, c_stockAlways );        
        AISetStockUnitNext( player, 1, c_PU_Mothership, c_stockAlways );
        return true;  //  32 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 7, c_PU_Carrier, c_stockAlways );
        return true;  //  50 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 10, c_PU_Carrier, c_stockAlways );
        return true;  //  68 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 32, c_PU_Carrier, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateCarrVoidPhoe4
//--------------------------------------------------------------------------------------------------
static bool ProtossLateCarrVoidPhoe4 (int player, int state) {
    int techCount;

    if (state == e_armyTypeValidate) {
        techCount = AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly);
        techCount += AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly);

        return (techCount >= 3);
    }

    if (state == e_armyTypeMinimum) {
        // bare minimum army, only thing higher priority is bare minimum economy
        AISetStockUnitNext( player, 2, c_PU_VoidRay, c_stockAlways );
        return true;  //  6 food cap
    }
    if (state == e_armyTypeBase) {
        // barely adequete army including anti-air, higher priority than full economy and low expanding        
        AISetStockUnitNext( player, 4, c_PU_VoidRay, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Phoenix, c_stockAlways );
        return true;  //  14 food cap
    }
    if (state == e_armyTypeSmall) {
        // small army, higher priority then important tech, basic production, basic defense, counters           
        AISetStockUnitNext( player, 1, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_VoidRay, c_stockAlways );
        AISetStockUnitNext( player, 2, c_PU_Phoenix, c_stockAlways );
        return true;  //  28 food cap
    }
    if (state == e_armyTypeMedium) {
        // medium army, higher priority then general expansion, extra production, extra transports/scouts
        AISetStockUnitNext( player, 2, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 8, c_PU_VoidRay, c_stockAlways );
        AISetStockUnitNext( player, 4, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 3, c_PU_Carrier, c_stockAlways );
        return true;  //  50 food cap
    }
    if (state == e_armyTypeLarge) {
        // large army, higher priority then extra town defense & misc upgrades
        AISetStockUnitNext( player, 4, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 1, c_PU_Mothership, c_stockAlways );
        AISetStockUnitNext( player, 10, c_PU_VoidRay, c_stockAlways );
        AISetStockUnitNext( player, 6, c_PU_Phoenix, c_stockAlways );
        return true;  //  74 food cap
    }
    if (state == e_armyTypeFull) {
        // full army, lowest priority, this is the very last part of the stock
        AISetStockUnitNext( player, 10, c_PU_Phoenix, c_stockAlways );
        AISetStockUnitNext( player, 20, c_PU_Carrier, c_stockAlways );
        AISetStockUnitNext( player, 18, c_PU_VoidRay, c_stockAlways );
        return true;  //  200 food cap
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
//  IsSubStateStillValid
//--------------------------------------------------------------------------------------------------
static bool IsSubStateStillValid (int player, int subState) {
    if (subState == e_mainSubState_LateZSSArchon4)           { return ProtossLateZSSArchon4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateZSSHighTemplar4) { return ProtossLateZSSHighTemplar4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateZSSImmortal4)    { return ProtossLateZSSImmortal4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateZSSColossus4)    { return ProtossLateZSSColossus4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateZSSCarrier4)     { return ProtossLateZSSCarrier4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateZSSMothership4)  { return ProtossLateZSSMothership4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateCarrierMother4)  { return ProtossLateCarrierMother4(player, e_armyTypeValidate); }
    else if (subState == e_mainSubState_LateCarrVoidPhoe4)        { return ProtossLateCarrVoidPhoe4(player, e_armyTypeValidate); }
    else { ErrorMeleeScript(player, "Invalid Late SubState in IsSubStateStillValid??"); }
    return false;
}

//--------------------------------------------------------------------------------------------------
//  ProtossChooseNextLateGameArmy4
//--------------------------------------------------------------------------------------------------
static void ProtossChooseNextLateGameArmy4 (int player, int state) {
    int subState;
    int subStateTime;
    bool stillValid;

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState >= e_mainSubState_LateZSSArchon4) {
        if (subState <= e_mainSubState_LateCarrVoidPhoe4) {
            subStateTime = AIGetUserInt(player, c_lateGameTimeIndex);
            if (subStateTime > AIGetTime()) {
                stillValid = IsSubStateStillValid(player, subState);
                if (stillValid) {
                    return;  // keep using the previous state
                }
            }
        }
    }

    // need to choose a new late game state
    
    AINewChooseSubState(player, e_lateRollState, 1, 1000, e_mainSubState_LateZSSArchon4);

    if (AIGetNumEnemies(player) == 1) {
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground        random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateZSSImmortal4,    25,    30,    25,    25 ); //  25,  30,  25,  25
            AISetSubStateChanceRace( e_mainSubState_LateZSSHighTemplar4, 20,     5,    25,    20 ); //  40,  35,  50,  40
            AISetSubStateChanceRace( e_mainSubState_LateZSSArchon4,      10,    15,    10,    10 ); //  55,  50,  60,  55
            AISetSubStateChanceRace( e_mainSubState_LateZSSColossus4,    25,    30,    20,    25 ); //  80,  80,  80,  80
            AISetSubStateChanceRace( e_mainSubState_LateZSSCarrier4,      2,     2,     2,     2 ); //  82,  82,  82,  82
            AISetSubStateChanceRace( e_mainSubState_LateZSSMothership4,   4,     4,     4,     4 ); //  86,  86,  86,  86
            AISetSubStateChanceRace( e_mainSubState_LateCarrierMother4,  10,    10,    10,    10 ); //  96,  96,  96,  96
            AISetSubStateChanceRace( e_mainSubState_LateCarrVoidPhoe4,    4,     4,     4,     4 ); // 100, 100, 100, 100
        }
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground          random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateZSSImmortal4,    10,    10,     9,    10 ); //  10,  10,   9,  10
            AISetSubStateChanceRace( e_mainSubState_LateZSSHighTemplar4,  5,     2,     9,     5 ); //  15,  12,  18,  15
            AISetSubStateChanceRace( e_mainSubState_LateZSSArchon4,       5,     5,     3,     5 ); //  20,  17,  21,  20
            AISetSubStateChanceRace( e_mainSubState_LateZSSColossus4,     5,     8,     4,     5 ); //  25,  25,  25,  25
            AISetSubStateChanceRace( e_mainSubState_LateZSSCarrier4,      5,     5,     5,     5 ); //  30,  30,  30,  30
            AISetSubStateChanceRace( e_mainSubState_LateZSSMothership4,   5,     5,     5,     5 ); //  35,  35,  35,  35
            AISetSubStateChanceRace( e_mainSubState_LateCarrierMother4,  55,    55,    55,    55 ); //  90,  90,  90,  90
            AISetSubStateChanceRace( e_mainSubState_LateCarrVoidPhoe4,   10,    10,    10,    10 ); // 100, 100, 100, 100
        }
        else {
            // may or may not be able to reach them on the ground     random protoss terran zerg
            AISetSubStateChanceRace( e_mainSubState_LateZSSImmortal4,    20,    25,    20,    20 ); //  20,  25,  20,  20
            AISetSubStateChanceRace( e_mainSubState_LateZSSHighTemplar4, 15,     5,    20,    15 ); //  35,  30,  40,  35
            AISetSubStateChanceRace( e_mainSubState_LateZSSArchon4,      10,    10,    10,    10 ); //  45,  40,  50,  45
            AISetSubStateChanceRace( e_mainSubState_LateZSSColossus4,    20,    25,    15,    20 ); //  65,  65,  65,  65
            AISetSubStateChanceRace( e_mainSubState_LateZSSCarrier4,      4,     4,     4,     4 ); //  69,  69,  69,  69
            AISetSubStateChanceRace( e_mainSubState_LateZSSMothership4,   6,     6,     6,     6 ); //  75,  75,  75,  75
            AISetSubStateChanceRace( e_mainSubState_LateCarrierMother4,  17,    17,    17,    17 ); //  92,  92,  92,  92
            AISetSubStateChanceRace( e_mainSubState_LateCarrVoidPhoe4,    8,     8,     8,     8 ); // 100, 100, 100, 100
        }
    }
    else {
        // originally these multiplayer values were going to be different, so I'm leaving these seperate for now
        if (AIGetAirStartLocs(PlayerStartLocation(player)) == 0) {
            // all start locations are accessible on the ground 
            AISetSubStateChance( e_mainSubState_LateZSSImmortal4,    25); //  25
            AISetSubStateChance( e_mainSubState_LateZSSHighTemplar4, 20); //  45
            AISetSubStateChance( e_mainSubState_LateZSSArchon4,      10); //  55
            AISetSubStateChance( e_mainSubState_LateZSSColossus4,    25); //  80
            AISetSubStateChance( e_mainSubState_LateZSSCarrier4,      2); //  82
            AISetSubStateChance( e_mainSubState_LateZSSMothership4,   4); //  86
            AISetSubStateChance( e_mainSubState_LateCarrierMother4,  10); //  96
            AISetSubStateChance( e_mainSubState_LateCarrVoidPhoe4,    4); // 100
        }        
        else if (AIGetGroundStartLocs(PlayerStartLocation(player)) == 0) {
            // no start locations are accesible on the ground
            AISetSubStateChance( e_mainSubState_LateZSSImmortal4,    10); //  10
            AISetSubStateChance( e_mainSubState_LateZSSHighTemplar4,  5); //  15
            AISetSubStateChance( e_mainSubState_LateZSSArchon4,       5); //  20
            AISetSubStateChance( e_mainSubState_LateZSSColossus4,     5); //  25
            AISetSubStateChance( e_mainSubState_LateZSSCarrier4,      5); //  30
            AISetSubStateChance( e_mainSubState_LateZSSMothership4,   5); //  35
            AISetSubStateChance( e_mainSubState_LateCarrierMother4,  55); //  90
            AISetSubStateChance( e_mainSubState_LateCarrVoidPhoe4,   10); // 100
        }
        else {
            // may or may not be able to reach them on the ground
            AISetSubStateChance( e_mainSubState_LateZSSImmortal4,    20); //  20
            AISetSubStateChance( e_mainSubState_LateZSSHighTemplar4, 15); //  35
            AISetSubStateChance( e_mainSubState_LateZSSArchon4,      10); //  45
            AISetSubStateChance( e_mainSubState_LateZSSColossus4,    20); //  65
            AISetSubStateChance( e_mainSubState_LateZSSCarrier4,      4); //  69
            AISetSubStateChance( e_mainSubState_LateZSSMothership4,   6); //  75
            AISetSubStateChance( e_mainSubState_LateCarrierMother4,  17); //  92
            AISetSubStateChance( e_mainSubState_LateCarrVoidPhoe4,    8); // 100
        }
    }

    subState = AIChooseSubState();

    stillValid = IsSubStateStillValid(player, subState);
    if (!stillValid) {
        subState = e_mainSubState_LateZSSImmortal4;   // this subState needs to always return valid
    }
    
    AISetUserInt(player, c_lateGameStateIndex, subState);
    AISetUserInt(player, c_lateGameTimeIndex, FixedToInt(AIGetTime()) + c_lateGameFrequency);
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateGameArmy4
//--------------------------------------------------------------------------------------------------
static void ProtossLateGameArmy4 (int player, int state) {
    int subState;

    if (state == e_armyTypeChoose) {
        ProtossChooseNextLateGameArmy4(player, state);
        return;
    }

    subState = AIGetUserInt(player, c_lateGameStateIndex);
    if (subState == e_mainSubState_LateZSSArchon4)             { ProtossLateZSSArchon4(player, state); }
    else if (subState == e_mainSubState_LateZSSHighTemplar4)   { ProtossLateZSSHighTemplar4(player, state); }
    else if (subState == e_mainSubState_LateZSSImmortal4)      { ProtossLateZSSImmortal4(player, state); }
    else if (subState == e_mainSubState_LateZSSColossus4)      { ProtossLateZSSColossus4(player, state); }
    else if (subState == e_mainSubState_LateZSSCarrier4)       { ProtossLateZSSCarrier4(player, state); }
    else if (subState == e_mainSubState_LateZSSMothership4)    { ProtossLateZSSMothership4(player, state); }
    else if (subState == e_mainSubState_LateCarrierMother4)    { ProtossLateCarrierMother4(player, state); }
    else if (subState == e_mainSubState_LateCarrVoidPhoe4)     { ProtossLateCarrVoidPhoe4(player, state); }
    else { ErrorMeleeScript(player, "Invalid Late SubState"); }
}


//--------------------------------------------------------------------------------------------------
//  ProtossLate4
//--------------------------------------------------------------------------------------------------
void ProtossLate4 (int player) {
    int count;

    // only allow scouting if I have an observer to scout with, ie stop using workers
    AIScoutingEnable(player, 1, c_PU_Observer);
    // calculate a limit on how much simultaneous teching can happen
    AISetTechLimitLevels(player);


// ****************** Start Restock ****************** //
    AIClearStock(player);

// Very basic recovery start
    ProtossRecoveryStart4(player);
    
// Minimum farms & peons
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStockPeons( player, 16, c_PU_Probe, c_stockMinPeons, c_stockAlways);

// Desperate expand (we're about to run out of minerals/gas)
    AIDefaultExpansion(player, c_PB_Nexus, 3000, 1000, c_expandVitalHard);

// Choose/validate what type of endgame army we'd like to make
    ProtossLateGameArmy4(player, e_armyTypeChoose);

// Bare minimum army
    ProtossLateGameArmy4(player, e_armyTypeMinimum);

// Basic peons
    AISetStockPeons( player, 24, c_PU_Probe, c_stockMinPeons, c_stockAlways);

// Make sure we hae enough pylon space to build things at the main town
    count = 2;
    if (AIIsTownFull(player, c_townMain)) { 
        count = 6;
    }
    if (AIGetBuildingCountInTown(player, c_townMain, c_PB_Pylon, c_techCountQueuedOrBetter) < count) {
        count = AITechCount(player, c_PB_Pylon, c_techCountQueuedOrBetter) + 1;
        AISetStockUnitNext( player, count, c_PB_Pylon, c_stockAlways );
    }

// Urgent early detection
    if (AIGetCloakedAttacker(player) != null) {
        AISetStock( player, 1, c_PU_Observer );
    }

// Barely adequete army including anti-air
    ProtossLateGameArmy4(player, e_armyTypeBase);
   
// Basic towns, farms, & peons
    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 50, c_stockAlways);

// Low expand (we're running low on minerals/gas)
    AIDefaultExpansion(player, c_PB_Nexus, 5000, 2500, c_expandVitalHard);
 
// Minimum normal detection
    if (AISuspectDetectionDanger(player)) {
        AISetStock( player, 1, c_PU_Observer );
    }

// Basic small army
    ProtossLateGameArmy4(player, e_armyTypeSmall);
    
// Very important tech & a scout
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 1, c_PU_Observer );

// Basic production buildings
    AISetStock( player, 2,  c_PB_Gateway );
    AISetStock( player, 1,  c_PB_RoboticsFacility );

// Make Counter Units
    ProtossMakeCounters4(player);

// Medium sized army
    ProtossLateGameArmy4(player, e_armyTypeMedium);

// Normal expand
    AIDefaultExpansion(player, c_PB_Nexus, 12000, 6000, c_expandNormalHard);

// Multiple detectors & scouts & a transport
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStockUnitNext( player, 2, c_PU_Observer, c_stockAlways );

// Important upgrades
    ProtossImportantUpgrades4(player);

// Main base defense
    ProtossDefenseMainTown4(player);

// Addition production buildings
    AISetStockUnitNext( player, 3, c_PB_Gateway, c_stockAlways );
    AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockAlways );

// Multiple transports if needed
    if (AIWantsMultipleTransport(player)) {
        AISetStockUnitNext( player, 4, c_PU_WarpPrism, c_stockAlways );
    }

// Large sized army
    ProtossLateGameArmy4(player, e_armyTypeLarge);

// Other towns defense
    ProtossDefenseOtherTowns4(player);

// Minor upgrades
    ProtossMinorUpgrades4(player);
    
// Extra detection & scouts & transports
    AISetStockUnitNext( player, 4, c_PU_Observer, c_stockAlways );
    AISetStockUnitNext( player, 6, c_PU_WarpPrism, c_stockAlways );
    
// Extra production buildings
    AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockAlways );
    AISetStockUnitNext( player, 3, c_PB_RoboticsFacility, c_stockAlways );
    AISetStockUnitNext( player, 2, c_PB_Stargate, c_stockAlways );

// Extra research buildings
    if (AIHasRes(player,650,500)) {
        AISetStockUnitNext( player, 3, c_PB_Forge, c_stockAlways );
    }

// Entire Army
    ProtossLateGameArmy4(player, e_armyTypeFull);

// Idle expand (very low priority, to prevent us from sitting around with idle peons)
    AIDefaultExpansion(player, c_PB_Nexus, 24000, 12000, c_expandIdleHard);

    AIEnableStock(player);    
// ****************** End Restock ****************** //

}
