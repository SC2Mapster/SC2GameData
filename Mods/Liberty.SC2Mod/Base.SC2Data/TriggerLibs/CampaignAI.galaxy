//==================================================================================================
//  Campaign AI Functions
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  AICampaignDiffSelect
//--------------------------------------------------------------------------------------------------
int AICampaignDiffSelect (int player, int d0, int d1, int d2, int d3) {
    int diff = PlayerDifficulty(player);
    if (diff == c_campBeginner) {
        return d0;
    }
    if (diff == c_campNormal) {
        return d1;
    }
    if (diff == c_campAdvanced) {
        return d2;
    }
    if (diff == c_campExpert) {
        return d3;
    }
    return 0;
}

//--------------------------------------------------------------------------------------------------
//  Default startup routines
//--------------------------------------------------------------------------------------------------
void AICampaignStart (int player) {
    int diff = PlayerDifficulty(player);
    
    AIStart(player, true, DifficultyAPM(diff));
    AIDeclareTown(player, c_townOne, PlayerStartLocation(player));
    AISetMainTown(player, c_townOne);
    AIInitCampaignTowns(player);
    
    AIInitCampaignHarvest(player);
    AIHarvestRate(player, 1);
    AISetNumScouts(player, 0);
    AISetBullyAttackWavePercent(AICampaignDiffSelect(player, 100, 100, 50, 0), player);

    AIAttackWaveSetGatherPoint(player, AIGetGatherLocation(player, c_townMain));

    AISetDifficulty(player, c_diffPressForward, true);
    AISetDifficulty(player, c_diffFleeWorkers, false);

    AISetDifficulty(player, c_diffSpotChangelings,   (PlayerDifficulty(player) >= c_campExpert));
    AISetDifficulty(player, c_diffFleeDamage,        (PlayerDifficulty(player) >= c_campExpert));
    AISetDifficulty(player, c_diffRepairDamage,      (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffDefendWithPeons,   (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffNormalTargetPrio,  (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffFleeDanger,        (PlayerDifficulty(player) >= c_campAdvanced));

    AISetDifficulty(player, c_diffOptimizeGas, false);
    AISetDifficulty(player, c_diffNormalVision, false);
    AISetDifficulty(player, c_diffLimitAPM, false);
    AISetDifficulty(player, c_diffEarlyGameRepair, false);
    AISetDifficulty(player, c_diffEnableDangerMap, false);
    AISetDifficulty(player, c_diffWaveAvoidDanger, false);
    AISetDifficulty(player, c_diffEarlyDefenseScout, false);
    AISetDifficulty(player, c_diffUseExtraScouts, false);
    AISetDifficulty(player, c_diffHoldAtIdleChokes, false);
    AISetDifficulty(player, c_diffAllowResourceReq, false);

    AISetDifficulty(player, c_diffAutoLoadBunkers, true);
    AISetDifficulty(player, c_diffUseRetreatLogic, true);

    AISetMaxBestAttackersLimit(player, AICampaignDiffSelect(player, 1, 2, 4, 6));

    AITransportIgnore(player, "InfestedCivilian");
    AITransportIgnore(player, "InfestedTerranCampaign");
    AITransportIgnore(player, "InfestedAbomination");
    AITransportIgnore(player, "VikingAssault");
    AITransportSetPanic(player, 0.6);
    AITransportSetReturn(player, PlayerStartLocation(player));

    AIReqCountAsBuiltObject(player, c_ZU_Larva);
    AITechCountFixupSingle(player, c_ZB_Spire, c_ZB_GreaterSpire);
    AITechCountFixupInOrder(player, c_ZB_Hatchery, c_ZB_Lair, c_ZB_Hive);
    AITechCountFixupEither(player, c_TB_CommandCenter, c_TB_OrbitalCommand, c_TB_PlanetaryFortress);

    AISpecifiedMakers();
    AISpecifiedHealers(player);
    AISetDefaultCombatFlags(player, false);
}
