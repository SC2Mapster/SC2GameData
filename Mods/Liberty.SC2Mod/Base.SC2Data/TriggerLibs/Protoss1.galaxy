//==================================================================================================
//  Protoss Easy Skirmish AI
//  This is a generated file. Do not edit directly.
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  Upgrades
//--------------------------------------------------------------------------------------------------
static void Upgrades (int player, int phase) {
    if (phase >= 2) {
        if (phase >= 3) {
            AISetStock( player, 1, c_PR_Shields1 );
            AISetStock( player, 1, c_PR_GroundWeapons1 );
            AISetStock( player, 1, c_PR_GroundArmor1 );
            if (phase >= 4) {
                AISetStock( player, 1, c_PR_WarpPrismSpeed );
                AISetStock( player, 1, c_PR_ObserverSpeed );
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  AirUpgrades
//--------------------------------------------------------------------------------------------------
static void AirUpgrades (int player, int phase) {
    if (phase >= 2) {
        if (phase >= 3) {
            AISetStock( player, 1, c_PR_ObserverSpeed );
            AISetStock( player, 1, c_PR_WarpPrismSpeed );
            if (phase >= 4) {
                AISetStock( player, 1, c_PR_AirArmor1 );
                AISetStock( player, 1, c_PR_AirWeapons1 );
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenGnd1
//--------------------------------------------------------------------------------------------------
void ProtossOpenGnd1 (int player) {
    int roll;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStock( player, 11, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 1, c_PB_Assimilator );

    // next attack should be around 4 units of about 375 resources after 450 seconds
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PU_Stalker );
    // validation: 3 units above costing 375 average resources

    ProtossTechUp(player, 1);
    Upgrades(player, 1);

    if (AIEnableStockOpen(player, c_PU_Probe, 450, false, e_mainState_Mid1, e_mainSubState_GndA)) {
	    return;
    }

    // next attack should be around 6 units of about 750 resources after 380 seconds
    AIAddStringInt(player, c_PU_Zealot, 1);
    AIAddStringInt(player, c_PU_Sentry, 1);
    AIAddStringInt(player, c_PU_Stalker, 1);
    AIAddStringInt(player, AIPickFrom2(c_PU_Zealot, c_PU_Sentry), 1);
    AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
    AIAddStringInt(player, AIPickFrom2(c_PU_Stalker, c_PU_Zealot), 1);
    // validation: 6 units above costing 849 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidGndA
//--------------------------------------------------------------------------------------------------
static void ProtossMidGndA (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    if (AISawCloakedUnit(player)) {
        AISetStock( player, 2, c_PB_PhotonCannon );
        AISetStock( player, 1, c_PU_Observer );
    }
    AISetStockUserData(player);

    ProtossTechUp(player, 2);
    Upgrades(player, 2);

    if (AIEnableStockMidA(player, c_PU_Probe, 4, false, 830, e_mainState_Mid1, e_mainSubState_GndB)) {
        return;
    }

    // next attack should be around 9 units of about 1125 resources after 330 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_Stalker, 1);
        AIAddStringInt(player, AIPickFrom2(c_PU_Zealot, c_PU_Sentry), 2);
        AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
        AIAddStringInt(player, AIPickFrom2(c_PU_Stalker, c_PU_Zealot), 2);
        // validation: 8 units above costing 1123 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Stalker, 2);
        AIAddStringInt(player, c_PU_Immortal, 2);
    }
    // validation: 4 units above costing 1050 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidGndB
//--------------------------------------------------------------------------------------------------
static void ProtossMidGndB (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    if (AISawCloakedUnit(player)) {
        AISetStock( player, 2, c_PB_PhotonCannon );
        AISetStock( player, 1, c_PU_Observer );
    }
    AISetStockUserData(player);

    ProtossTechUp(player, 3);
    Upgrades(player, 3);

    if (AIEnableStockMidB(player, c_PU_Probe, 4, false, 1160, e_mainState_Late1, e_mainSubState_GndA)) {
        return;
    }

    // next attack should be around 14 units of about 1700 resources after 280 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_Zealot, 3);
        AIAddStringInt(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
        AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
        AIAddStringInt(player, AIPickFrom2(c_PU_Immortal, c_PU_Stalker), 2);
        AIAddStringInt(player, c_PU_Phoenix, 1);
        // validation: 10 units above costing 1672 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_Stalker, 3);
        AIAddStringInt(player, c_PU_Immortal, 3);
    }
    // validation: 7 units above costing 1675 average resources

    AISetFlag(player, e_flagsScouting, true);
}

//--------------------------------------------------------------------------------------------------
//  LateGnd
//--------------------------------------------------------------------------------------------------
static void LateGnd (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    AIDefaultExpansion(player, c_PB_Nexus, 7000, 1000, c_expandDefault);

    AISetStock( player, 2, c_PB_Gateway );
    AISetStockUserData(player);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 3, c_PU_WarpPrism );
    AISetStock( player, 2, c_PU_Observer );
    AISetStock( player, 2, c_PB_PhotonCannon );

    ProtossTechUp(player, 4);
    Upgrades(player, 4);

    if (AIEnableStockLate(player, c_PU_Probe, 4, 1160, 280)) {
        return;
    }

    // next attack should be around 14 units of about 1700 resources after 280 seconds
    AIAddStringInt(player, c_PU_Zealot, 3);
    AIAddStringInt(player, c_PU_Stalker, 2);
    AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 3);
    AIAddStringInt(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 1);
    AIAddStringInt(player, AIPickFrom2(c_PU_Phoenix, c_PU_Stalker), 1);
    // validation: 10 units above costing 1698 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAir1
//--------------------------------------------------------------------------------------------------
void ProtossOpenAir1 (int player) {
    int roll;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStock( player, 11, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PB_Stargate );

    // next attack should be around 3 units of about 750 resources after 610 seconds
    AISetStock( player, 2, c_PU_VoidRay );
    // validation: 2 units above costing 700 average resources

    ProtossTechUp(player, 1);
    AirUpgrades(player, 1);

    if (AIEnableStockOpen(player, c_PU_Probe, 610, false, e_mainState_Mid1, e_mainSubState_AirA)) {
	    return;
    }

    // next attack should be around 5 units of about 1125 resources after 380 seconds
    AIAddStringInt(player, c_PU_VoidRay, 3);
    // validation: 3 units above costing 1050 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirA
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirA (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 6000, 2000, c_expandDefault);

    AISetStockUserData(player);

    AISetStock( player, 3, c_PU_WarpPrism );

    ProtossTechUp(player, 2);
    AirUpgrades(player, 2);

    if (AIEnableStockMidA(player, c_PU_Probe, 4, false, 990, e_mainState_Mid1, e_mainSubState_AirB)) {
        return;
    }

    // next attack should be around 8 units of about 1675 resources after 330 seconds
    AIAddStringInt(player, c_PU_VoidRay, 4);
    AIAddStringInt(player, c_PU_Phoenix, 1);
    // validation: 5 units above costing 1650 average resources

    AISetFlag(player, e_flagsScouting, true);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirB
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirB (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 6000, 2000, c_expandDefault);
    AISetStock( player, 3, c_PU_WarpPrism );

    AISetStockUserData(player);


    ProtossTechUp(player, 3);
    AirUpgrades(player, 3);

    if (AIEnableStockMidB(player, c_PU_Probe, 4, false, 1320, e_mainState_Late1, e_mainSubState_AirA)) {
        return;
    }

    // next attack should be around 12 units of about 2550 resources after 280 seconds
    AIAddStringInt(player, c_PU_Stalker, 3);
    AIAddStringInt(player, c_PU_VoidRay, 5);
    AIAddStringInt(player, c_PU_Phoenix, 1);
    // validation: 9 units above costing 2525 average resources
}

//--------------------------------------------------------------------------------------------------
//  LateAir
//--------------------------------------------------------------------------------------------------
static void LateAir (int player) {
    int roll;

    AIClearStock(player);
    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 11, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 6000, 2000, c_expandDefault);
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 3, c_PU_WarpPrism );

    AISetStockUserData(player);
    AISetStock( player, 2, c_PU_Observer );
    AISetStock( player, 2, c_PB_PhotonCannon );

    ProtossTechUp(player, 4);
    AirUpgrades(player, 4);

    if (AIEnableStockLate(player, c_PU_Probe, 4, 1320, 280)) {
        return;
    }

    // next attack should be around 12 units of about 2550 resources after 280 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_VoidRay, 6);
        AIAddStringInt(player, c_PU_Phoenix, 2);
        // validation: 8 units above costing 2600 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Carrier, 2);
        AIAddStringInt(player, c_PU_VoidRay, 1);
        AIAddStringInt(player, c_PU_Phoenix, 4);
    }
    // validation: 7 units above costing 2550 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMid1
//--------------------------------------------------------------------------------------------------
void ProtossMid1 (int player) {
    int mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_GndA)          { ProtossMidGndA(player);  }
    else if (mainSubState == e_mainSubState_GndB)     { ProtossMidGndB(player);  }
    else if (mainSubState == e_mainSubState_AirA)     { ProtossMidAirA(player);  }
    else if (mainSubState == e_mainSubState_AirB)     { ProtossMidAirB(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossLate1
//--------------------------------------------------------------------------------------------------
void ProtossLate1 (int player) {
    int mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_GndA)          { LateGnd(player);  }
    else if (mainSubState == e_mainSubState_AirA)     { LateAir(player);  }
    else { ErrorMeleeScript(player, "Invalid Late mainSubState"); }
}
