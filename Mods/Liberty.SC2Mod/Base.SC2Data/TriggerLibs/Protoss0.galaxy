//==================================================================================================
//  Protoss VeryEasy Skirmish AI
//  This is a generated file. Do not edit directly.
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  Upgrades
//--------------------------------------------------------------------------------------------------
static void Upgrades (int player, int phase) {
    if (phase >= 2) {
        if (phase >= 3) {
            if (phase >= 4) {
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  AirUpgrades
//--------------------------------------------------------------------------------------------------
static void AirUpgrades (int player, int phase) {
    if (phase >= 2) {
        if (phase >= 3) {
            AISetStock( player, 1, c_PR_ObserverSpeed );
            AISetStock( player, 1, c_PR_WarpPrismSpeed );
            if (phase >= 4) {
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenGnd0
//--------------------------------------------------------------------------------------------------
void ProtossOpenGnd0 (int player) {
    int roll;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 8, c_PU_Probe );
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStock( player, 1, c_PB_Assimilator );

    // next attack should be around 1 units of about 100 resources after 480 seconds
    AISetStock( player, 1, c_PU_Zealot );
    // validation: 1 units above costing 100 average resources

    ProtossTechUp(player, 1);
    Upgrades(player, 1);

    if (AIEnableStockOpen(player, c_PU_Probe, 480, true, e_mainState_Mid0, e_mainSubState_GndA)) {
	    return;
    }

    // next attack should be around 2 units of about 200 resources after 420 seconds
    AIAddStringInt(player, c_PU_Stalker, 1);
    // validation: 1 units above costing 175 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidGndA
//--------------------------------------------------------------------------------------------------
static void ProtossMidGndA (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    if (AISawCloakedUnit(player)) {
        AISetStock( player, 1, c_PB_PhotonCannon );
        AISetStock( player, 1, c_PU_Observer );
    }
    AISetStockUserData(player);

    ProtossTechUp(player, 2);
    Upgrades(player, 2);

    if (AIEnableStockMidA(player, c_PU_Probe, 4, true, 900, e_mainState_Mid0, e_mainSubState_GndB)) {
        return;
    }

    // next attack should be around 3 units of about 300 resources after 360 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_Stalker, 1);
        // validation: 2 units above costing 275 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Immortal, 1);
    }
    // validation: 1 units above costing 350 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidGndB
//--------------------------------------------------------------------------------------------------
static void ProtossMidGndB (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    if (AISawCloakedUnit(player)) {
        AISetStock( player, 1, c_PB_PhotonCannon );
        AISetStock( player, 1, c_PU_Observer );
    }
    AISetStockUserData(player);

    ProtossTechUp(player, 3);
    Upgrades(player, 3);

    if (AIEnableStockMidB(player, c_PU_Probe, 4, true, 1260, e_mainState_Late0, e_mainSubState_GndA)) {
        return;
    }

    // next attack should be around 5 units of about 450 resources after 300 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_Stalker, 2);
        // validation: 3 units above costing 450 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_Immortal, 1);
    }
    // validation: 2 units above costing 450 average resources
}

//--------------------------------------------------------------------------------------------------
//  LateGnd
//--------------------------------------------------------------------------------------------------
static void LateGnd (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    AIDefaultExpansion(player, c_PB_Nexus, 6000, 500, c_expandDefault);

    AISetStockUserData(player);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 3, c_PU_WarpPrism );
    AISetStock( player, 1, c_PU_Observer );

    ProtossTechUp(player, 4);
    Upgrades(player, 4);

    if (AIEnableStockLate(player, c_PU_Probe, 4, 1260, 300)) {
        return;
    }

    // next attack should be around 5 units of about 450 resources after 300 seconds
    roll = RandomInt(1,8);
    if (roll <= 4) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
        AIAddStringInt(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
        // validation: 3 units above costing 424 average resources
    }
    else if (roll <= 5) {
        AIAddStringInt(player, c_PU_Stalker, 1);
        AIAddStringInt(player, c_PU_Immortal, 1);
        // validation: 2 units above costing 525 average resources
    }
    else if (roll <= 6) {
        AIAddStringInt(player, c_PU_Colossus, 1);
        // validation: 1 units above costing 500 average resources
    }
    else if (roll <= 7) {
        AIAddStringInt(player, c_PU_Zealot, 1);
        AIAddStringInt(player, c_PU_VoidRay, 1);
        // validation: 2 units above costing 450 average resources
    }
    else if (roll <= 8) {
        AIAddStringInt(player, c_PU_Carrier, 1);
    }
    // validation: 1 units above costing 600 average resources

    AISetFlag(player, e_flagsScouting, true);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAir0
//--------------------------------------------------------------------------------------------------
void ProtossOpenAir0 (int player) {
    int roll;

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 8, c_PU_Probe );
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PB_Stargate );

    // next attack should be around 1 units of about 200 resources after 640 seconds
    AISetStock( player, 1, c_PU_VoidRay );
    // validation: 1 units above costing 350 average resources

    ProtossTechUp(player, 1);
    AirUpgrades(player, 1);

    if (AIEnableStockOpen(player, c_PU_Probe, 640, true, e_mainState_Mid0, e_mainSubState_AirA)) {
	    return;
    }

    // next attack should be around 2 units of about 300 resources after 420 seconds
    AIAddStringInt(player, c_PU_VoidRay, 1);
    // validation: 1 units above costing 350 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirA
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirA (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 5000, 1500, c_expandDefault);

    AISetStockUserData(player);

    AISetStock( player, 3, c_PU_WarpPrism );

    ProtossTechUp(player, 2);
    AirUpgrades(player, 2);

    if (AIEnableStockMidA(player, c_PU_Probe, 4, true, 1060, e_mainState_Mid0, e_mainSubState_AirB)) {
        return;
    }

    // next attack should be around 3 units of about 450 resources after 360 seconds
    AIAddStringInt(player, c_PU_Stalker, 1);
    AIAddStringInt(player, c_PU_VoidRay, 1);
    // validation: 2 units above costing 525 average resources

    AISetFlag(player, e_flagsScouting, true);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirB
//--------------------------------------------------------------------------------------------------
static void ProtossMidAirB (int player) {
    int roll;

    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 5000, 1500, c_expandDefault);
    AISetStock( player, 3, c_PU_WarpPrism );

    AISetStockUserData(player);


    ProtossTechUp(player, 3);
    AirUpgrades(player, 3);

    if (AIEnableStockMidB(player, c_PU_Probe, 4, true, 1420, e_mainState_Late0, e_mainSubState_AirA)) {
        return;
    }

    // next attack should be around 5 units of about 675 resources after 300 seconds
    AIAddStringInt(player, c_PU_Stalker, 2);
    AIAddStringInt(player, c_PU_VoidRay, 1);
    // validation: 3 units above costing 700 average resources
}

//--------------------------------------------------------------------------------------------------
//  LateAir
//--------------------------------------------------------------------------------------------------
static void LateAir (int player) {
    int roll;

    AIClearStock(player);
    AIClearStock(player);

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 8, c_stockAlways);
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AIDefaultExpansion(player, c_PB_Nexus, 5000, 1500, c_expandDefault);
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 3, c_PU_WarpPrism );

    AISetStockUserData(player);
    AISetStock( player, 1, c_PU_Observer );

    ProtossTechUp(player, 4);
    AirUpgrades(player, 4);

    if (AIEnableStockLate(player, c_PU_Probe, 4, 1420, 300)) {
        return;
    }

    // next attack should be around 5 units of about 675 resources after 300 seconds
    roll = RandomInt(1,4);
    if (roll <= 3) {
        AIAddStringInt(player, c_PU_Stalker, 2);
        AIAddStringInt(player, c_PU_VoidRay, 1);
        // validation: 3 units above costing 700 average resources
    }
    else if (roll <= 4) {
        AIAddStringInt(player, c_PU_Carrier, 1);
    }
    // validation: 1 units above costing 600 average resources
}

//--------------------------------------------------------------------------------------------------
//  ProtossMid0
//--------------------------------------------------------------------------------------------------
void ProtossMid0 (int player) {
    int mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_GndA)          { ProtossMidGndA(player);  }
    else if (mainSubState == e_mainSubState_GndB)     { ProtossMidGndB(player);  }
    else if (mainSubState == e_mainSubState_AirA)     { ProtossMidAirA(player);  }
    else if (mainSubState == e_mainSubState_AirB)     { ProtossMidAirB(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid mainSubState"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossLate0
//--------------------------------------------------------------------------------------------------
void ProtossLate0 (int player) {
    int mainSubState = AIState(player, e_mainSubState);
    if (mainSubState == e_mainSubState_GndA)          { LateGnd(player);  }
    else if (mainSubState == e_mainSubState_AirA)     { LateAir(player);  }
    else { ErrorMeleeScript(player, "Invalid Late mainSubState"); }
}
