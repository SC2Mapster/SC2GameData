//--------------------------------------------------------------------------------------------------
//  *** Tactical Campaign AI ***
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  *** SCV ***
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void AIThinkSCV (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    abilcmd repaircmd;
    // only used in campaign
    
    ord = AICreateOrder(player, c_AB_Repair, 0);
    repaircmd = OrderGetAbilityCommand (ord);
    if (UnitCheckAbilCmdState(aiUnit, repaircmd, c_cmdStateIsAutoCast) == true) {
        ord = OrderSetAutoCast(repaircmd, false);
        if (UnitOrderIsValid(aiUnit, ord)) {
            AICast(aiUnit, ord, c_noMarker,  c_castHold);
            return;
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  *** Odin ***
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void AIThinkOdin (int player, unit aiUnit, unitgroup scanGroup) {
    order ord = AICreateOrder(player, c_AB_OdinBarrage, 0);
    order enemyOrd;
    order curOrd;
    point loc;
    fixed barrageRadius = AIEffectFixed(player, c_EF_OdinBarrageArea, c_fieldAreaRadius0);
    unitgroup threatGroup;
    unitgroup barrageGroup;
    unitgroup barrageThreatGroup;
    unit unitToCheck;
    int numPossibleThreats = 0;
    int numActualThreats = 0;
    int numPossibleThreatsInBarrage = 0;
    int numActualThreatsInBarrage = 0;

    if (!UnitOrderIsValid(aiUnit, ord)) {
        return;
    }

    curOrd = UnitOrder(aiUnit, 0);
    if ((curOrd != null) && !AIIsAttackOrder(curOrd)) {
        // don't cast again if casting
        return;
    }

    // Is there a threat in the area
    threatGroup = UnitGroupFilterThreat(scanGroup, aiUnit, null, 0);
    numPossibleThreats = UnitGroupCount(threatGroup, c_unitCountAll);
    while (numPossibleThreats > 0) {
        unitToCheck = UnitGroupUnit(threatGroup, numPossibleThreats);
        numPossibleThreats = numPossibleThreats - 1;

        enemyOrd = UnitOrder(unitToCheck, 0);
        if (AIIsAttackOrder(enemyOrd) && OrderGetTargetUnit(enemyOrd) == aiUnit) {
            numActualThreats = numActualThreats + 1;
        }
    }

    loc = AIBestTargetPoint(
        AIEffectGroup(player, c_EF_OdinBarrageArea, scanGroup),
        3, // min hits
        200, // damage base
        3.0, // min score 
        barrageRadius,
        UnitGetPosition(aiUnit),
        AIAbilityFixed(player, c_AB_OdinBarrage, c_fieldRange0)+3, 
        c_unitAttributeNone
    );
    if (!loc) {
        return;
    }

    barrageGroup = UnitGroup(null, c_playerAny, RegionCircle(loc, barrageRadius), null, 0);
    barrageThreatGroup = UnitGroupFilterThreat(barrageGroup, aiUnit, null, 0);
    numPossibleThreatsInBarrage = UnitGroupCount(barrageThreatGroup, c_unitCountAll);
    while (numPossibleThreatsInBarrage > 0) {
        unitToCheck = UnitGroupUnit(barrageThreatGroup, numPossibleThreatsInBarrage);
        numPossibleThreatsInBarrage = numPossibleThreatsInBarrage - 1;

        enemyOrd = UnitOrder(unitToCheck, 0);
        if (AIIsAttackOrder(enemyOrd) && OrderGetTargetUnit(enemyOrd) == aiUnit) {
            numActualThreatsInBarrage = numActualThreatsInBarrage + 1;
        }
    }

    if ((numActualThreats > numActualThreatsInBarrage*2) ) {
        return;  // too many threats not in the barrage
    }

    OrderSetTargetPoint(ord, loc);
    AICast(aiUnit, ord, c_noMarker, c_castHold);
}

//--------------------------------------------------------------------------------------------------
void AIChannelOdin (int player, unit aiUnit, unitgroup scanGroup) {
    order cancelOrd = AICreateOrder(player, c_AB_OdinBarrage, 1);
    order curOrd;
    abilcmd curAbilCmd;
    point loc;
    fixed barrageRadius = AIEffectFixed(player, c_EF_OdinBarrageArea, c_fieldAreaRadius0);
    unit unitToCheck;
    int loop = 0;
    bool enemyInBarrage = false;

    if (!UnitOrderIsValid(aiUnit, cancelOrd)) {
        return;
    }

    curOrd = UnitOrder(aiUnit, 0);
    if ((curOrd == null) && AIIsAttackOrder(curOrd)) {
        return;
    }

    curAbilCmd = OrderGetAbilityCommand(curOrd);
    if (AbilityCommandGetAbility(curAbilCmd) != c_AB_OdinBarrage || 
        AbilityCommandGetCommand(curAbilCmd) != 0) {
            return;
    }

    loc = OrderGetTargetPoint(curOrd);
    loop = UnitGroupCount(scanGroup, c_unitCountAll);
    while (loop > 0) {
        unitToCheck = UnitGroupUnit(scanGroup, loop);
        loop = loop - 1;

        if (PointsInRange(UnitGetPosition(unitToCheck), loc, barrageRadius)) {
            enemyInBarrage = true;
            break;
        }
    }

    if (enemyInBarrage) {
        return;
    }

    // cast a cancel order to stop barraging the empty area
    AICast(aiUnit, cancelOrd, c_noMarker, c_castHold);
}

//--------------------------------------------------------------------------------------------------
//  *** Vulture ***
//--------------------------------------------------------------------------------------------------
const int c_mineCooldown = c_tactTimerFirst;
void AIThinkVulture (int player, unit aiUnit, unitgroup scanGroup) {
    fixed cooldown;
    order ord;
    unitgroup enemyGroup;

    if (PlayerDifficulty(player) < c_campAdvanced) {
        return;
    }

    if (!AITactCooldownAllow(aiUnit, c_mineCooldown)) {
        return;
    }
    
    enemyGroup = UnitGroupFilterThreat(scanGroup, aiUnit, null, 0);
    enemyGroup = UnitGroupFilterPlane(scanGroup, c_planeGround, 0);
    if (UnitGroupCount(enemyGroup, c_unitCountAlive) <= 0) {
        return;
    }

    ord = AICreateOrder(player, c_AB_SpiderMine, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return;
    }

    if (PlayerDifficulty(player) < c_campExpert) {
        cooldown = 5.0;
    }
    else {
        cooldown = 3.0;
    }

    AICastCooldown(aiUnit, ord, c_noMarker, c_castHold, c_mineCooldown, cooldown);
}

//--------------------------------------------------------------------------------------------------
//  *** Wraith ***
//--------------------------------------------------------------------------------------------------
//void AIThinkWraith (int player, unit aiUnit, unitgroup scanGroup) {
//    order ord = AICreateOrder(player, c_AB_WraithCloak, 0);
//    bool isCloaking = true;
//
//    if (!UnitOrderIsValid(aiUnit, ord)) {
//        ord = AICreateOrder(player, c_AB_WraithCloak, 1);
//        if (!UnitOrderIsValid(aiUnit, ord)) {
//            return;
//        }
//        isCloaking = false;
//    }
//
//    if (isCloaking != AICloakEvaluate(aiUnit, 125, 50, 10)) {
//        return;
//    }
//    AICast(aiUnit, ord, c_noMarker, c_castHold);
//}

//--------------------------------------------------------------------------------------------------
//  *** Loki ***
//--------------------------------------------------------------------------------------------------
const int c_lokiYamatoCooldown = c_tactTimerFirst;
const int c_lokiMissilesCooldown = c_tactTimerSecond;

order AIOrderLokiYamato (int player, unit aiUnit, unitgroup scanGroup, marker mark) {
    order ord;
    aifilter filter;
    fixed damage;
    unitgroup targetGroup;

    if (PlayerDifficulty(player) < c_campAdvanced) {
        return null;
    }

    //  Only cast as part of an existing offensive.
    //
    if (!AIIsAttackOrder(UnitOrder(aiUnit, 0))) {
        return null;
    }
     
    //  See if this spell can be cast at all.
    //
    ord = AICreateOrder(player, c_AB_LokiYamato, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    damage = AIEffectFixed(player, c_EF_LokiYamatoDamage, c_fieldAmount);

    //  Search enemies for those with hit points closest to the damage yamato gun inflicts.
    //
    filter = AIFilter(player);
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterLifePerMarker(filter, damage*0.5, mark);
    AISetFilterLifeSortReference(filter, damage, damage*c_distanceFromDamage); 
    targetGroup = AIGetFilterGroup(filter, scanGroup);
    if (targetGroup == null) {
        return null;
    }
    
    return AIUnitGroupGetValidOrder(targetGroup, ord, aiUnit, c_backwards);
}

void AIThinkLoki (int player, unit aiUnit, unitgroup scanGroup) {
    marker mark;
    order ord;
    fixed cooldown;

    if (PlayerDifficulty(player) >= c_campAdvanced) {
        if (AITactCooldownAllow(aiUnit, c_lokiMissilesCooldown)) {
            // Loki Missile Pods located in TacticalData.xml / TargetFindData.xml
            if (AIEvalTacticalData(aiUnit, null)) {
                AISetCooldown(aiUnit, c_lokiMissilesCooldown, 5.0);
                return;
            }
        }
    }


    if (!AITactCooldownAllow(aiUnit, c_lokiYamatoCooldown)) {
        return;
    }

    //  If we already have a yamato order, ignore new orders so that we do not count
    //  our own markers again.
    if (UnitOrderHasAbil(aiUnit, c_AB_LokiYamato)) {
        return;
    }
    
    mark = AIMarker(aiUnit, c_MK_Yamato);
    ord = AIOrderLokiYamato(player, aiUnit, scanGroup, mark);
    if (ord != null) {
        if (AIIsCampaign(player) && PlayerDifficulty(player) < c_campExpert) {
            cooldown = 8.0;
        }
        else {
            cooldown = 5.0;
        }
        AICastCooldown(aiUnit, ord, mark, c_castHold, c_lokiYamatoCooldown, cooldown);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** Val03 Queen of Blades ***
//--------------------------------------------------------------------------------------------------

//const fixed c_campaignIndignationRange = 7;
//
//bool QoBIndignation (int player, unit aiUnit, unitgroup scanGroup) {
//    order ord;
//    int scanCount;
//    unit unitToCheck;
//    order enemyOrd;
//    bool useIndignation = false;
//
//    ord = AICreateOrder(player, c_AB_QoBIndignation, 0);
//    if (!UnitOrderIsValid(aiUnit, ord)) {
//        return false;
//    }
//
//    scanCount = UnitGroupCount(scanGroup, c_unitCountAll);
//    while (scanCount > 0) {
//        unitToCheck = UnitGroupUnit(scanGroup, scanCount);
//        scanCount = scanCount - 1;
//
//        if (PointsInRange(UnitGetPosition(aiUnit), UnitGetPosition(unitToCheck), c_campaignIndignationRange)) {
//            useIndignation = true;
//            break;
//        }
//
//        enemyOrd = UnitOrder(unitToCheck, 0);
//        if (AIIsAttackOrder(enemyOrd) && OrderGetTargetUnit(enemyOrd) == aiUnit) {
//            if (!UnitTypeTestFlag(UnitGetType(unitToCheck), c_unitFlagWorker)) {
//                // a non-worker enemy unit is attacking us
//                useIndignation = true;
//                break;
//            }
//        }
//    }
//
//    if (!useIndignation) {
//        return false;
//    }
//
//    AICast(aiUnit, ord, c_noMarker, c_castHold);
//    return true;    
//}

//--------------------------------------------------------------------------------------------------
bool QoBImplosion (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    int scanCount;
    unit unitToCheck;

    ord = AICreateOrder(player, c_AB_QoBImplosion, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    scanCount = UnitGroupCount(scanGroup, c_unitCountAll);
    while (scanCount > 0) {
        unitToCheck = UnitGroupUnit(scanGroup, scanCount);
        scanCount = scanCount - 1;
    
        OrderSetTargetUnit(ord, unitToCheck);
        if (UnitOrderIsValid(aiUnit, ord)) {
            AICast(aiUnit, ord, c_noMarker, c_castHold);
            return true;    
        }
    }
    return false;
}

//--------------------------------------------------------------------------------------------------
bool QoBOmegaStorm (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    point loc;

    ord = AICreateOrder(player, c_AB_QoBOmegaStorm, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    loc = AIBestTargetPoint(
        AIEffectGroup(player, c_EF_OmegaStormArea, scanGroup),
        3, // min hits
        40, // damage base
        3.0, // min score
        AIEffectFixed(player, c_EF_OmegaStormArea, c_fieldAreaRadius0),
        UnitGetPosition(aiUnit),
        AIAbilityFixed(player, c_AB_QoBOmegaStorm, c_fieldRange0), 
        c_unitAttributeNone
    );
    if (!loc) {
        return false;
    }

    OrderSetTargetPoint(ord, loc);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    AICast(aiUnit, ord, c_noMarker, c_castRetreat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void AIThinkVal03QueenOfBlades (int player, unit aiUnit, unitgroup scanGroup) {
    //if (QoBIndignation(player, aiUnit, scanGroup)) {
    //    return;
    //}

    if (QoBOmegaStorm(player, aiUnit, scanGroup)) {
        return;
    }

    if (QoBImplosion(player, aiUnit, scanGroup)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** Leviathan ***
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
order BioPlasmidDischarge (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    aifilter filter;
    fixed damage;
    unitgroup targetGroup;
    marker mark;
     
    //  See if this spell can be cast at all.
    //
    ord = AICreateOrder(player, c_AB_BioPlasmidDischarge, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    mark = AIMarker(aiUnit, c_MK_BioPlasmidDischarge);
    damage = AIEffectFixed(player, c_EF_BioPlasmidDischargeDamage, c_fieldAmount);

    //  Search enemies for those with hit points closest to the damage BioPlasmidDischarge inflicts.
    //
    filter = AIFilter(player);
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterBits(filter, UnitFilterStr("-;Missile,Self,Stasis,Dead,Hidden,Invulnerable"));
    AISetFilterLifePerMarker(filter, damage, mark);
    AISetFilterLifeSortReference(filter, damage, damage*c_distanceFromDamage); 
    targetGroup = AIGetFilterGroup(filter, scanGroup);
    if (targetGroup == null) {
        return null;
    }
    
    return AIUnitGroupGetValidOrder(targetGroup, ord, aiUnit, c_backwards);
}

//--------------------------------------------------------------------------------------------------
order BioStasis (int player, unit aiUnit, unitgroup scanGroup) {
    point loc;
    unitgroup statisGroup;
    fixed range;
    unitfilter f;
    fixed allyEnemyRatio;
    order ord;
    
    ord = AITacticalOrder(player, aiUnit, c_AB_BioStasis);
    if (ord == null) {
        return null;
    }

    statisGroup = AIEffectGroup(player, c_EF_BioStatis, scanGroup);
    range = AIAbilityFixed(player, c_AB_BioStasis, c_fieldRange0) + 1;

    loc = AIBestTargetPoint(
        statisGroup,
        5, // min hits
        40, // damage base
        3.5, // score
        AIEffectFixed(player, c_EF_BioStatis, c_fieldAreaRadius0),
        UnitGetPosition(aiUnit),
        range,
        c_unitAttributeNone
    );
    if (loc == null) {
        return null;
    }
    
    OrderSetTargetPoint(ord, loc);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }
    return ord;
}

//--------------------------------------------------------------------------------------------------
void AIThinkLeviathan (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;

    ord = BioPlasmidDischarge(player, aiUnit, scanGroup);
    if (ord != null) {
        AICast(aiUnit, ord, c_noMarker, c_castHold);
        return;
    }

    ord = BioStasis(player, aiUnit, scanGroup);
    if (ord != null) {
        AICast(aiUnit, ord, c_noMarker, c_castHold);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** Hybrid (F) ***
//--------------------------------------------------------------------------------------------------

const int c_hybridFAoEStunMin = 4;

order HybridAoEStun (int player, unit aiUnit) {
    order ord;
    region enemyRegion;
    unitfilter filter;
    unitgroup enemyGroup;
    aifilter enemyFilter;
    
    bool airAllies;

    ord = AICreateOrder(player, c_AB_HybridAoEStun, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }
    airAllies = AINearbyPlaneTest(UnitGetPosition(aiUnit), player, AIAbilityFixed(player, c_AB_HybridAoEStun, c_fieldRange0), c_planeAir, c_unitAllianceAlly);

    filter = UnitFilterStr(AIEffectStr(player, c_EF_HybridStunArea, c_fieldFilters));
    enemyRegion = RegionCircle(UnitGetPosition(aiUnit), AIEffectFixed(player, c_EF_HybridStunArea, c_fieldAreaRadius0));
    enemyGroup = UnitGroupAlliance(player, c_unitAllianceEnemy, enemyRegion, filter, c_noMaxCount);

    //  Only include enemies that can attack our allies.
    enemyFilter = AIFilter(player);
    AISetFilterCanAttackAlly(enemyFilter, c_groundAlliesNearby, airAllies);
    enemyGroup = AIGetFilterGroup(enemyFilter, enemyGroup);

    if (UnitGroupCount(enemyGroup, c_unitCountAll) < c_hybridFAoEStunMin) {
        return null;
    }

    return ord;
}

order ConsumeDNA (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    aifilter filter;
    fixed damage;
    unitgroup candidateGroup;

    ord = AICreateOrder(player, c_AB_ConsumeDNA, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    //  Use on the best target.
    damage = AIEffectFixed(player, c_EF_ConsumeDNAPersistent, c_fieldPeriodCount) *
             AIEffectFixed(player, c_EF_ConsumeDNADamage, c_fieldAmount)
             ;

    filter = AIFilter(player);
    AISetFilterBits(filter, UnitFilterStr(AIAbilityStr(player, c_AB_ConsumeDNA, c_fieldFilters)));
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterRange(filter, aiUnit, AIAbilityFixed(player, c_AB_ConsumeDNA, c_fieldRange0));
    AISetFilterLifeSortReference(filter, damage, damage*c_distanceFromDamage);

    candidateGroup = AIGetFilterGroup(filter, scanGroup);
    if (candidateGroup == null) {
        return null;
    }

    return AIUnitGroupGetValidOrder(candidateGroup, ord, aiUnit, c_backwards);
}
//
//void AIThinkHybridF (int player, unit aiUnit, unitgroup scanGroup) {
//    order ord;
//
//    ord = HybridAoEStun(player, aiUnit);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//
//    ord = ConsumeDNA(player, aiUnit, scanGroup);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//}

//--------------------------------------------------------------------------------------------------
//  *** Hybrid (C) ***
//--------------------------------------------------------------------------------------------------

order GravitonPrison (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    unitfilter castFilter;
    aifilter filter;
    int numPotentialEnemies;
    int prisonCount;
    unitgroup enemyGroup;
    int difficulty;
    bool difficultyOrder;

    region enemyRegion;
    bool airAllies;

    ord = AICreateOrder(player, c_AB_GravitonPrison, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    filter = AIFilter(player);
    AISetFilterBits(filter, UnitFilterStr(AIAbilityStr(player, c_AB_GravitonPrison, c_fieldFilters)));
    
    //  To ensure a random target on medium, don't sort on medium difficulty.
    if (AIIsCampaign(player) || PlayerDifficulty(player) != c_skirMedium) {
        AISetFilterLife(filter, c_noMin, c_noMax);
    }

    //  Check for air allies.
    airAllies = AINearbyPlaneTest(UnitGetPosition(aiUnit), player, AIAbilityFixed(player, c_AB_GravitonPrison, c_fieldRange0), c_planeAir, c_unitAllianceAlly);
    AISetFilterCanAttackAlly(filter, c_groundAlliesNearby, airAllies);
    enemyGroup = AIGetFilterGroup(filter, scanGroup);
    if (enemyGroup == null) {
        return null;
    }

    //  prison the units with the most life on hard/insane, least life on easy/beginner,
    //  random units on medium.
    if (AICampSkirDiffTest(player, c_campExpert, c_skirVeryHard)) {
        difficultyOrder = c_forwards;
    }
    else {
        difficultyOrder = c_backwards;
    }
    return AIUnitGroupGetValidOrder(enemyGroup, ord, aiUnit, difficultyOrder);
}

order HybridBlink (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;

    ord = AICreateOrder(player, c_AB_HybridBlink, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    return null;
}

order PlasmaBlast (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    order returnOrd;
    fixed damage;
    aifilter filter;
    unitgroup enemyGroup;
    unitgroup nonHostileBuildings;
    bool airAllies;

    ord = AICreateOrder(player, c_AB_PlasmaBlast, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    //  Only target buildings.
    filter = AIFilter(player);
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterBits(filter, UnitFilterStr("Structure;Construction,Missile,Self,Stasis,Dead,Hidden,Invulnerable"));
    AISetFilterRange(filter, aiUnit, AIAbilityFixed(player, c_AB_PlasmaBlast, c_fieldRange0));
    
    //  Prefer buildings that attack us on hard/insane.
    //  Also, use on units with the best life on hard/insane, random life on medium/easy.
    if (AICampSkirDiffTest(player, c_campExpert, c_skirVeryHard)) {
        damage = AIEffectFixed(player, c_EF_PlasmaBlastDamage, c_fieldAmount);
        AISetFilterLife(filter, damage*c_minDamageFraction, c_noMax);
        AISetFilterLifeSortReference(filter, damage, damage*c_distanceFromDamage);
        
        //  Get the group with all buildings first in case the hostile building group has none.
        nonHostileBuildings = AIGetFilterGroup(filter, scanGroup);

        airAllies = AINearbyPlaneTest(UnitGetPosition(aiUnit), player, AIAbilityFixed(player, c_AB_PlasmaBlast, c_fieldRange0), c_planeAir, c_unitAllianceAlly);
        AISetFilterCanAttackAlly(filter, c_groundAlliesNearby, airAllies);
    }
    enemyGroup = AIGetFilterGroup(filter, scanGroup);
    if (enemyGroup != null) {
        returnOrd = AIUnitGroupGetValidOrder(enemyGroup, ord, aiUnit, c_backwards);
        if (returnOrd != null) {
            return returnOrd;
        }
    }
    
    if (nonHostileBuildings == null) {
        return null;
    }
    return AIUnitGroupGetValidOrder(nonHostileBuildings, ord, aiUnit, c_backwards);
}

const int c_hybridCShockWaveMin = 4;

order PsionicShockwave (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    region enemyRegion;
    unitfilter filter;
    unitgroup enemyGroup;
    aifilter enemyFilter;
    fixed psiShockRange;
    
    bool airAllies;

    ord = AICreateOrder(player, c_AB_PsionicShockwave, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    psiShockRange = ( AIEffectFixed(player, c_EF_PsionicShockWaveArea, c_fieldAreaRadius0) + 
                      ( AIEffectFixed(player, c_EF_PsionicShockWaveArea, c_fieldRadiusBonus0) *
                        AIEffectFixed(player, c_EF_ShockWavePersistent, c_fieldPeriodCount)) );

    airAllies = AINearbyPlaneTest(UnitGetPosition(aiUnit), player, psiShockRange, c_planeAir, c_unitAllianceAlly);

    filter = UnitFilterStr(AIEffectStr(player, c_EF_PsionicShockWaveArea, c_fieldFilters));
    enemyRegion = RegionCircle(UnitGetPosition(aiUnit), psiShockRange);
    enemyGroup = UnitGroupAlliance(player, c_unitAllianceEnemy, enemyRegion, filter, c_noMaxCount);

    //  Only care if there are enemies that attack our allies.
    enemyFilter = AIFilter(player);
    AISetFilterCanAttackAlly(enemyFilter, c_groundAlliesNearby, airAllies);
    AISetFilterBehaviorCount(enemyFilter, c_noBehaviorMin, c_noBehaviorMax, c_BF_PsionicShockwave);
    enemyGroup = AIGetFilterGroup(enemyFilter, enemyGroup);

    if (AIIsCampaign(player) && UnitGroupCount(enemyGroup, c_unitCountAll) < c_hybridCShockWaveMin) {
        return null;
    }

    return ord;
}
//
//void AIThinkHybridC (int player, unit aiUnit, unitgroup scanGroup) {
//    order ord;
//
//      Psionic Shockwave and Graviton Prison spells should not be casted from here because 
//      they require map specific validation.
//
//      These should not modify scanGroup.
//    ord = PsionicShockwave(player, aiUnit, scanGroup);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//
//    ord = GravitonPrison(player, aiUnit, scanGroup);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//
//    ord = PlasmaBlast(player, aiUnit, scanGroup);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//
//      Commented out for now.
//    
//    ord = HybridBlink(player, aiUnit, scanGroup);
//    if (ord != null) {
//        AICast(aiUnit, ord, c_noMarker, c_castHold);
//        return;
//    }
//}