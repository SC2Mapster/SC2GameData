//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Wings of Liberty
// Author: Blizzard Entertainment
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCamp_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_REC_JUKEBOX_PLAYBACK {
    int lv_trackCurrent;
    sound lv_music;
    bool lv_startedBefore;
    bool lv_muted;
    int lv_sessionID;
    bool lv_nextTrackCommentsDone;
    bool lv_nextTrackAnimationDone;
};

struct gs_REC_JUKEBOX {
    unit lv_box;
    soundlink[21] lv_tracks;
    text[21] lv_trackTitle;
    text[21] lv_trackAuthor;
    int lv_trackCount;
    string lv_fidgetSetTrack;
    string lv_fidgetSetTurnOff;
    bool lv_startRandom;
    gs_REC_JUKEBOX_PLAYBACK lv_playback;
};

struct gs_REC_PINBOARDITEM {
    int lv_iD;
    string lv_fidgetSet;
    unit lv_item;
    soundlink lv_activateSound;
    bool lv_showHide;
};

struct gs_REC_PINBOARD {
    int lv_iD;
    int[16] lv_items;
    int lv_itemCount;
    string lv_genericFidgetSet;
    unit lv_pinboard;
    int lv_room;
    string lv_zoomCamera;
    string lv_zoomAnimation;
    fixed lv_zoomDuration;
    string lv_zoomBackCamera;
    string lv_zoomBackAnimation;
    fixed lv_zoomBackDuration;
    int lv_range;
    int lv_highlight;
    soundlink lv_highlightSound;
};

struct gs_REC_NEWITEM {
    int lv_type;
    text lv_text;
    string lv_modelFlash;
    string lv_imagePortrait;
    fixed lv_displayDuration;
    int lv_customData;
    int lv_dialog;
    int lv_label;
    int lv_flash;
    bool lv_beingRemoved;
};

struct gs_REC_ACTOR {
    int lv_actorID;
    unit lv_unit;
    string lv_stringID;
    text lv_name;
    int lv_type;
    int lv_room;
    string lv_convoStateIndex;
    string[4] lv_roomAnim;
    bool lv_preloaded;
};

struct gs_REC_BGACTORNODE {
    int lv_type;
    point lv_target;
    bool lv_turnOrNot;
    fixed lv_stayDuration;
    string[4] lv_anim;
    fixed[4] lv_animDuration;
    int lv_animCount;
    trigger lv_actionTrigger;
};

struct gs_REC_BGACTOR {
    int lv_actorID;
    point lv_home;
    timer lv_timer;
    trigger lv_doTrigger;
    gs_REC_BGACTORNODE[41] lv_nodes;
    int lv_nodeCount;
    int lv_currentNodeID;
    bool lv_started;
};

struct gs_REC_PLANETPANEL_PLANET {
    int lv_planet;
    int lv_planetID;
    bool lv_pitched;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
const string gv_aNIMID_BRIEFING = "Briefing";
const string gv_aNIMID_BRIEFINGVIDEOSWAP = "BriefingVideoSwap";
const string gv_aNIMID_HIGHLIGHT = "Highlight";
const string gv_aNIMID_HIGHLIGHTB = "HighlightB";
const string gv_aNIMID_FIDGET = "Fidget";
const string gv_aNIMID_FLASH = "Flash";
const string gv_aNIMID_SHEEN = "Sheen";
const string gv_aNIMID_ZOOM = "Zoom";
const string gv_aNIMID_CANTINABROKEN = "CantinaBroken";
const string gv_aNIMID_ACTORLIGHTING = "ActorLighting";
const string gv_aNIMID_ROOMLIGHTING = "RoomLighting";
const string gv_aNIMID_ACTORLISTEN = "ActorListen";
const string gv_aNIMID_BRIEFINGSCREENFUZZY = "BriefingScreenFuzzy";
const string gv_aNIMID_BRIEFINGSCREENSPLIT = "BriefingScreenSplit";
const string gv_aNIMID_INCOMINGTRANSMISSION = "IncomingTransmission";
const string gv_aNIMID_CHARTYCHUSANDGUN_STAND2 = "CharTychusAndGun";
fixed gv_talkBlendTime;
fixed gv_standBlendTime;
fixed gv_idleFidgetStartTime;
fixed gv_idleFidgetRepeatTime;
int gv_customFadeDialog;
int gv_customFadeImage;
unitgroup gv_clickables;
unitgroup gv_cantinaPinboardClickables;
unitgroup gv_cantinaTrophiesClickables;
unitgroup gv_labResearchTubeClickables;
unitgroup gv_visibleUnits;
fixed gv_waitForSkipTimeout;
int gv_waitForSkipTimeType;
trigger gv_backButtonCallback;
bool gv_backButtonHidden;
int gv_tBDWindowDialog;
int gv_tBDWindowButtonClose;
trigger gv_tBDWindowExitCallback;
const fixed gv_c_HighlightValue = 2.0;
int gv_soundChannelVolumesRefCount;
gs_REC_JUKEBOX[3] gv_jukeboxes;
int gv_jukeboxCount;
int gv_jukeboxTrackTitle;
int gv_tP_JukeboxID;
int gv_tP_JukeboxSessionIDLocal;
int gv_pB_FIRST;
int gv_pB_LAST;
const int gv_pBITEM_FIRST = 1;
int gv_pBITEM_LAST;
gs_REC_PINBOARDITEM[51] gv_pinboardItems;
gs_REC_PINBOARD[6] gv_pinboards;
int gv_pinboardCount;
int gv_pinboardCurrent;
int gv_pinboardItemCurrent;
const fixed gv_c_NEWITEMINFO_DURATION = 6.0;
const fixed gv_c_NEWITEMINFO_FLASHHEIGHT = 80.0;
const fixed gv_c_NEWITEMINFO_FLASHWIDTH = 500.0;
int gv_tP_NEWITEMAVAILABLE_Type;
text gv_tP_NEWITEMAVAILABLE_Text;
string gv_tP_NEWITEMAVAILABLE_ImagePortrait;
string gv_tP_NEWITEMAVAILABLE_ModelFlash;
fixed gv_tP_NEWITEMAVAILABLE_Duratioin;
int gv_tP_NEWITEMAVAILABLE_CustomData;
bool gv_newItemInfoPaused;
gs_REC_NEWITEM[41] gv_newItems;
int gv_newItemsCount;
int gv_tP_CreateNewItem_NewItemIndex;
fixed gv_tP_CreateNewItem_Offset;
int gv_tP_MoveNewItem_NewItemIndex;
fixed gv_tP_MoveNewItem_OffsetY;
fixed gv_tP_MoveNewItem_Duration;
int gv_tP_NewItemBeingRemoved;
int gv_worldMode;
int gv_idleState;
int gv_idleStateLockCount;
int gv_fullscreenImageDialog;
int gv_fullscreenImageDialogImage;
bool gv_lookAtEnabled;
bool gv_queryDialogClosed;
int gv_queryDialogResult;
int gv_cinematicDebugValue;
trigger[41] gv_cinematicDebugPlaylist;
bool gv_returned;
const string gv_transitionalBankName = "TStory01";
bool gv_isTransitionalLoad;
bank gv_transitionalBank;
bool gv_isForDebug;
bool gv_terranUpTheNightPlaying;
int gv_debugSceneCount;
int gv_debugSceneRowY;
int[41] gv_debugSceneButtons;
int gv_debugSceneExitButton;
trigger[41] gv_debugSceneCallbacks;
int gv_debugSceneDialog;
bool gv_debugSceneCheat;
text[41] gv_debugSceneLabels;
int gv_roomCheatDialog;
int gv_roomCheatButtonMarSara;
int gv_roomCheatButtonBridge;
int gv_roomCheatButtonArmory;
int gv_roomCheatButtonCantina;
int gv_roomCheatButtonLab;
int gv_roomCheatButtonChar;
int gv_roomCheatButtonObservatory;
int gv_roomCheatButtonCancel;
int gv_roomCheatSizeX;
int gv_roomCheatSizeY;
unit gv_debugTestCameraUnit;
int gv_roomCameraDialog;
int gv_roomCameraButtonMarSara;
int gv_roomCameraButtonBridge;
int gv_roomCameraButtonArmory;
int gv_roomCameraButtonCantina;
int gv_roomCameraButtonLab;
int gv_roomCameraButtonChar;
int gv_roomCameraButtonCancel;
int gv_roomCameraSizeX;
int gv_roomCameraSizeY;
bool gv_debug_BriefingCheating;
int gv_debug_BriefingDialog;
int gv_debug_BriefingButtonClose;
int[51] gv_debug_BriefingMissioniButton;
int gv_debug_BriefingMissioniButtonX;
fixed gv_debug_BriefingMissioniButtonXMax;
int gv_debug_BriefingMissioniButtonY;
bool gv_debug_BriefingMissioniButtonNewLine;
int gv_debug_TVNewsDialog;
int gv_debug_TVNewsButtonClose;
int[51] gv_debug_TVNewsMissioniButton;
int gv_debug_TVNewsMissioniButtonX;
fixed gv_debug_TVNewsMissioniButtonXMax;
int gv_debug_TVNewsMissioniButtonY;
bool gv_debug_TVNewsMissioniButtonNewLine;
bool gv_debug_TVNewsOn;
bool gv_debug_RoomChangeTimerDone;
text gv_debug_RoomChangeTimerMessage;
bool gv_debugStoryModeEnabled;
bool gv_debugCinematicModeEnabled;
int gv_debugDialogForSizePos;
const int gv_c_ACTOR_FIRST = 1;
int gv_c_ACTOR_LAST;
gs_REC_ACTOR[51] gv_actors;
bool gv_actorReloadLocked;
int[21] gv_actorScenePrepared;
int[21] gv_actorScenePreparedToActor;
int[21] gv_actorScenePreparedRoom;
int[21] gv_actorScenePreparedType;
int gv_actorScenePreparedCount;
int gv_c_ROOM_FIRST;
int gv_c_ROOM_LAST;
int gv_currentRoom;
unit gv_marSaraRoom;
unitgroup gv_marSaraRoomUnits;
unit gv_galaxyRoom;
unitgroup gv_galaxyRoomUnits;
unit gv_voidRoom;
unitgroup gv_voidRoomUnits;
bool[21] gv_roomPreloaded;
const int gv_c_ROOMLOCATION_FIRST = 1;
int gv_c_ROOMLOCATION_LAST;
int gv_currentLocation;
bool[11] gv_roomLocationEnabled;
const string gv_sOUNDACTOR_MarSara_Fan = "::global.MarSaraFanSound";
const string gv_sOUNDACTOR_MarSara_NeonSign = "::global.MarSaraNeonSignSound";
int[6] gv_roomScenePrepared;
int[6] gv_roomScenePreparedType;
int gv_roomScenePreparedCount;
bool gv_roomSceneLightingAnimation_ShouldPlay;
gs_REC_BGACTOR[21] gv_bGActors;
int gv_bGActorCount;
int gv_tP_BGActorID;
int gv_tP_BGActorCurrentNodeID;
unit gv_marSaraProps;
unit gv_marSaraAdjutant;
unit gv_marSaraBriefcase;
unit gv_marSaraHydra;
unit gv_marSaraBadge;
unit gv_marSaraJukebox;
unit gv_marSaraPinboard;
unit[21] gv_marSaraPinboardItems;
int gv_marSaraPinboardItemCount;
unit gv_marSaraTV;
unit gv_observatoryProp;
unit gv_observatoryPainting;
unit gv_observatorySet2;
unitgroup gv_hotspots_NoHighlightEffect;
const string gv_rEF_STATUSBAR = "Ref_StatusBar";
const string gv_rEF_STATUSBAR01 = "Ref_StatusBar 01";
const string gv_rEF_STATUSBAR02 = "Ref_StatusBar 02";
unit gv_hotspotClicked;
unitgroup gv_hotspots_Flashing;
int[31] gv_hotspots_FlashingTextTags;
bool[31] gv_hotspots_FlashingPaused;
int gv_hotspots_FlashingTextTagCount;
int gv_marSaraJukeboxID;
bool gv_marSaraBriefcaseLeaveYesNoOn;
bool gv_planetPanel_Created;
gs_REC_PLANETPANEL_PLANET[11] gv_planetPanel_Planets;
int gv_planetPanel_PlanetCount;
bool[51] gv_planetPanel_PlanetPitched;
trigger gv_planetPanel_LeaveCallback;
int gv_planetPanel_CurrentSelection;
int gv_planetPanel_ReplayCount;
bool gv_planetPanel_FidgetDone;
bool gv_planetPanel_CharInvasionQueryDone;
int gv_planetPanel_CharInvasionQueryResult;
int gv_introTextDialog;
int gv_introTextDialogLabel;
int gv_currentGossipActor;
unit gv_bridgeHornerCameras;
unit gv_bridgeTychusCameras;
unit gv_bridgeHansonCameras;
unit gv_bridgeToshCameras;
unit gv_cantinaToshCameras;
unit gv_cantinaTychusCameras;
unit gv_cantinaYbarraCameras;
unit gv_labAdjutantCameras;
unit gv_labHansonCameras;
unit gv_labCowinCameras;
unit gv_marSaraTychusCameras;
unit gv_armorySwannCameras;
int gv_c_ConvoCameraTypeFirst;
int gv_c_ConvoCameraTypeLast;
camerainfo[31] gv_convoCameras;
int gv_convoCameraRoom;
int gv_convoCameraActor1;
unit gv_convoCameraObjectCurrent1;
int gv_convoCameraActor2;
unit gv_convoCameraObjectCurrent2;
trigger gv_convoCameraCustomCallback;
trigger gv_convoCameraChangeCallback;
int gv_convoCameraCurrent;
bool gv_convoCameraChangeResult;
text gv__TimestampText;
string gv_convoIDGlobal;
string[26][4] gv_sceneFile;
string[26][4] gv_sceneAnim;
soundlink[26][4] gv_sceneMESound;
bool[26] gv_scenePreloaded;
int[6] gv_sceneActorCameraID;
sound gv_sceneSound;
bool gv_sceneSkipped;
unit gv_briefing_BridgeMain;
unit gv_briefing_BridgeCenter;
unit gv_briefing_BridgeLeft;
unit gv_briefing_BridgeRight;
unit gv_briefing_MarSaraMain;
unit gv_briefing_MarSaraCenter;
unit gv_briefing_MarSaraLeft;
unit gv_briefing_MarSaraRight;
actor gv_lookAtScreenRight;
actor gv_lookAtScreenLeft;
actor gv_lookAtScreenMain;
actor gv_lookAtGuest1;
actor gv_lookAtGuest2;
actor gv_lookAtRaynor;
unit gv_briefing_CharRight;
unit gv_briefing_CharLeft;
unit gv_briefing_CharCenter;
unit gv_briefing_CharMain;
int[11] gv_briefingPortraits;
int gv_briefingPortraitCount;
string gv_briefingVideoPlaying;
string gv_briefingMovieTexturePlaying;
int gv_briefingMovieTransmission;
sound gv_briefingMovieSound;
sound gv_briefingSoundPlayed;
bool gv_briefingCompleted;
sound gv_briefingMusic;
trigger[36] gv_tVNewsTrigger;
trigger[36] gv_tVNewsPreload;
string[36] gv_tVNewsConvoID;
trigger gv_tVNewsCurrentThread;
int gv_tVDialog;
bool gv_tipStart;
const string gv_c_HINTICON = "Assets\\Textures\\ui_btn_generic_exclemation.dds";
const string gv_c_TIPICON = "Assets\\Textures\\ui_tip_questionmark.dds";
const fixed gv_c_TIPINTERVAL = 4.0;
const fixed gv_c_TIPINTERVALSTART = 1.0;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;
    int init_i2;

    gv_talkBlendTime = 0.75;
    gv_standBlendTime = 0.75;
    gv_idleFidgetStartTime = 40.0;
    gv_idleFidgetRepeatTime = 30.0;
    gv_customFadeDialog = c_invalidDialogId;
    gv_customFadeImage = c_invalidDialogControlId;
    gv_clickables = UnitGroupEmpty();
    gv_cantinaPinboardClickables = UnitGroupEmpty();
    gv_cantinaTrophiesClickables = UnitGroupEmpty();
    gv_labResearchTubeClickables = UnitGroupEmpty();
    gv_visibleUnits = UnitGroupEmpty();
    gv_waitForSkipTimeout = 0.0;
    gv_waitForSkipTimeType = c_timeReal;
    gv_backButtonCallback = null;
    gv_backButtonHidden = false;
    gv_tBDWindowDialog = c_invalidDialogId;
    gv_tBDWindowButtonClose = c_invalidDialogControlId;
    gv_tBDWindowExitCallback = null;
    gv_soundChannelVolumesRefCount = 0;
    init_i = 0;
    while (init_i <= 2) {
        gv_jukeboxes[init_i].lv_box = null;
        init_i1 = 0;
        while (init_i1 <= 20) {
            gv_jukeboxes[init_i].lv_tracks[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 20) {
            gv_jukeboxes[init_i].lv_trackTitle[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 20) {
            gv_jukeboxes[init_i].lv_trackAuthor[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        gv_jukeboxes[init_i].lv_trackCount = 0;
        gv_jukeboxes[init_i].lv_fidgetSetTrack = null;
        gv_jukeboxes[init_i].lv_fidgetSetTurnOff = null;
        gv_jukeboxes[init_i].lv_startRandom = false;
        gv_jukeboxes[init_i].lv_playback.lv_trackCurrent = 0;
        gv_jukeboxes[init_i].lv_playback.lv_music = null;
        gv_jukeboxes[init_i].lv_playback.lv_startedBefore = false;
        gv_jukeboxes[init_i].lv_playback.lv_muted = false;
        gv_jukeboxes[init_i].lv_playback.lv_sessionID = 0;
        gv_jukeboxes[init_i].lv_playback.lv_nextTrackCommentsDone = false;
        gv_jukeboxes[init_i].lv_playback.lv_nextTrackAnimationDone = false;
        init_i = init_i + 1;
    }
    gv_jukeboxCount = 0;
    gv_jukeboxTrackTitle = c_textTagNone;
    gv_tP_JukeboxID = 0;
    gv_tP_JukeboxSessionIDLocal = 0;
    gv_pB_FIRST = (1);
    gv_pB_LAST = (2);
    gv_pBITEM_LAST = ((10) - 1);
    init_i = 0;
    while (init_i <= 50) {
        gv_pinboardItems[init_i].lv_iD = 0;
        gv_pinboardItems[init_i].lv_fidgetSet = null;
        gv_pinboardItems[init_i].lv_item = null;
        gv_pinboardItems[init_i].lv_activateSound = null;
        gv_pinboardItems[init_i].lv_showHide = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv_pinboards[init_i].lv_iD = 0;
        init_i1 = 0;
        while (init_i1 <= 15) {
            gv_pinboards[init_i].lv_items[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        gv_pinboards[init_i].lv_itemCount = 0;
        gv_pinboards[init_i].lv_genericFidgetSet = null;
        gv_pinboards[init_i].lv_pinboard = null;
        gv_pinboards[init_i].lv_zoomCamera = "";
        gv_pinboards[init_i].lv_zoomAnimation = null;
        gv_pinboards[init_i].lv_zoomDuration = 0.0;
        gv_pinboards[init_i].lv_zoomBackCamera = "";
        gv_pinboards[init_i].lv_zoomBackAnimation = null;
        gv_pinboards[init_i].lv_zoomBackDuration = 0.0;
        gv_pinboards[init_i].lv_range = 0;
        gv_pinboards[init_i].lv_highlight = 0;
        gv_pinboards[init_i].lv_highlightSound = null;
        init_i = init_i + 1;
    }
    gv_pinboardCount = 0;
    gv_pinboardCurrent = 0;
    gv_pinboardItemCurrent = 0;
    gv_tP_NEWITEMAVAILABLE_Type = 0;
    gv_tP_NEWITEMAVAILABLE_Text = StringExternal("Param/Value/26BE40E6");
    gv_tP_NEWITEMAVAILABLE_ImagePortrait = null;
    gv_tP_NEWITEMAVAILABLE_ModelFlash = null;
    gv_tP_NEWITEMAVAILABLE_Duratioin = 0.0;
    gv_tP_NEWITEMAVAILABLE_CustomData = 0;
    gv_newItemInfoPaused = false;
    init_i = 0;
    while (init_i <= 40) {
        gv_newItems[init_i].lv_type = 0;
        gv_newItems[init_i].lv_text = StringExternal("Param/Value/47ADA704");
        gv_newItems[init_i].lv_modelFlash = null;
        gv_newItems[init_i].lv_displayDuration = 0.0;
        gv_newItems[init_i].lv_customData = 0;
        gv_newItems[init_i].lv_dialog = c_invalidDialogId;
        gv_newItems[init_i].lv_label = c_invalidDialogControlId;
        gv_newItems[init_i].lv_flash = c_invalidPortraitId;
        gv_newItems[init_i].lv_beingRemoved = false;
        init_i = init_i + 1;
    }
    gv_newItemsCount = 0;
    gv_tP_CreateNewItem_NewItemIndex = 0;
    gv_tP_CreateNewItem_Offset = 0.0;
    gv_tP_MoveNewItem_NewItemIndex = 0;
    gv_tP_MoveNewItem_OffsetY = 0.0;
    gv_tP_MoveNewItem_Duration = 0.0;
    gv_tP_NewItemBeingRemoved = 0;
    gv_worldMode = 0;
    gv_idleState = 1;
    gv_idleStateLockCount = 0;
    gv_fullscreenImageDialog = c_invalidDialogId;
    gv_fullscreenImageDialogImage = c_invalidDialogControlId;
    gv_lookAtEnabled = true;
    gv_queryDialogClosed = false;
    gv_queryDialogResult = 1;
    gv_cinematicDebugValue = 0;
    init_i = 0;
    while (init_i <= 40) {
        gv_cinematicDebugPlaylist[init_i] = null;
        init_i = init_i + 1;
    }
    gv_returned = false;
    gv_isTransitionalLoad = false;
    gv_transitionalBank = null;
    gv_isForDebug = false;
    gv_terranUpTheNightPlaying = false;
    gv_debugSceneCount = 0;
    gv_debugSceneRowY = 40;
    init_i = 0;
    while (init_i <= 40) {
        gv_debugSceneButtons[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    gv_debugSceneExitButton = c_invalidDialogControlId;
    init_i = 0;
    while (init_i <= 40) {
        gv_debugSceneCallbacks[init_i] = null;
        init_i = init_i + 1;
    }
    gv_debugSceneCheat = false;
    init_i = 0;
    while (init_i <= 40) {
        gv_debugSceneLabels[init_i] = StringExternal("Param/Value/16DA7296");
        init_i = init_i + 1;
    }
    gv_roomCheatDialog = c_invalidDialogId;
    gv_roomCheatButtonMarSara = c_invalidDialogControlId;
    gv_roomCheatButtonBridge = c_invalidDialogControlId;
    gv_roomCheatButtonArmory = c_invalidDialogControlId;
    gv_roomCheatButtonCantina = c_invalidDialogControlId;
    gv_roomCheatButtonLab = c_invalidDialogControlId;
    gv_roomCheatButtonChar = c_invalidDialogControlId;
    gv_roomCheatButtonObservatory = c_invalidDialogControlId;
    gv_roomCheatButtonCancel = c_invalidDialogControlId;
    gv_roomCheatSizeX = 0;
    gv_roomCheatSizeY = 0;
    gv_debugTestCameraUnit = null;
    gv_roomCameraDialog = c_invalidDialogId;
    gv_roomCameraButtonMarSara = c_invalidDialogControlId;
    gv_roomCameraButtonBridge = c_invalidDialogControlId;
    gv_roomCameraButtonArmory = c_invalidDialogControlId;
    gv_roomCameraButtonCantina = c_invalidDialogControlId;
    gv_roomCameraButtonLab = c_invalidDialogControlId;
    gv_roomCameraButtonChar = c_invalidDialogControlId;
    gv_roomCameraButtonCancel = c_invalidDialogControlId;
    gv_roomCameraSizeX = 0;
    gv_roomCameraSizeY = 0;
    gv_debug_BriefingCheating = false;
    gv_debug_BriefingDialog = c_invalidDialogId;
    gv_debug_BriefingButtonClose = c_invalidDialogControlId;
    init_i = 0;
    while (init_i <= 50) {
        gv_debug_BriefingMissioniButton[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    gv_debug_BriefingMissioniButtonX = 0;
    gv_debug_BriefingMissioniButtonXMax = 0.0;
    gv_debug_BriefingMissioniButtonY = 0;
    gv_debug_BriefingMissioniButtonNewLine = false;
    gv_debug_TVNewsDialog = c_invalidDialogId;
    gv_debug_TVNewsButtonClose = c_invalidDialogControlId;
    init_i = 0;
    while (init_i <= 50) {
        gv_debug_TVNewsMissioniButton[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    gv_debug_TVNewsMissioniButtonX = 0;
    gv_debug_TVNewsMissioniButtonXMax = 0.0;
    gv_debug_TVNewsMissioniButtonY = 0;
    gv_debug_TVNewsMissioniButtonNewLine = false;
    gv_debug_TVNewsOn = false;
    gv_debug_RoomChangeTimerDone = false;
    gv_debug_RoomChangeTimerMessage = null;
    gv_debugStoryModeEnabled = true;
    gv_debugCinematicModeEnabled = true;
    gv_debugDialogForSizePos = c_invalidDialogId;
    gv_c_ACTOR_LAST = ((4) - 1);
    init_i = 0;
    while (init_i <= 50) {
        gv_actors[init_i].lv_actorID = 0;
        gv_actors[init_i].lv_unit = null;
        gv_actors[init_i].lv_stringID = "";
        gv_actors[init_i].lv_name = StringExternal("Param/Value/971786C5");
        gv_actors[init_i].lv_type = 0;
        gv_actors[init_i].lv_room = 0;
        init_i1 = 0;
        while (init_i1 <= 3) {
            gv_actors[init_i].lv_roomAnim[init_i1] = null;
            init_i1 = init_i1 + 1;
        }
        gv_actors[init_i].lv_preloaded = false;
        init_i = init_i + 1;
    }
    gv_actorReloadLocked = false;
    init_i = 0;
    while (init_i <= 20) {
        gv_actorScenePrepared[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 20) {
        gv_actorScenePreparedToActor[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 20) {
        gv_actorScenePreparedRoom[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 20) {
        gv_actorScenePreparedType[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_actorScenePreparedCount = 0;
    gv_c_ROOM_FIRST = 1;
    gv_c_ROOM_LAST = ((16) - 1);
    gv_currentRoom = 0;
    gv_marSaraRoom = null;
    gv_marSaraRoomUnits = UnitGroupEmpty();
    gv_galaxyRoom = null;
    gv_galaxyRoomUnits = UnitGroupEmpty();
    gv_voidRoom = null;
    gv_voidRoomUnits = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 20) {
        gv_roomPreloaded[init_i] = false;
        init_i = init_i + 1;
    }
    gv_c_ROOMLOCATION_LAST = ((5) - 1);
    gv_currentLocation = 0;
    init_i = 0;
    while (init_i <= 10) {
        gv_roomLocationEnabled[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv_roomScenePrepared[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_roomScenePreparedCount = 0;
    gv_roomSceneLightingAnimation_ShouldPlay = true;
    init_i = 0;
    while (init_i <= 20) {
        gv_bGActors[init_i].lv_actorID = c_timerWindowNone;
        gv_bGActors[init_i].lv_home = null;
        gv_bGActors[init_i].lv_timer = TimerCreate();
        gv_bGActors[init_i].lv_doTrigger = null;
        init_i1 = 0;
        while (init_i1 <= 40) {
            gv_bGActors[init_i].lv_nodes[init_i1].lv_type = 1;
            gv_bGActors[init_i].lv_nodes[init_i1].lv_target = null;
            gv_bGActors[init_i].lv_nodes[init_i1].lv_turnOrNot = false;
            gv_bGActors[init_i].lv_nodes[init_i1].lv_stayDuration = 0.0;
            init_i2 = 0;
            while (init_i2 <= 3) {
                gv_bGActors[init_i].lv_nodes[init_i1].lv_anim[init_i2] = "";
                init_i2 = init_i2 + 1;
            }
            init_i2 = 0;
            while (init_i2 <= 3) {
                gv_bGActors[init_i].lv_nodes[init_i1].lv_animDuration[init_i2] = 0.0;
                init_i2 = init_i2 + 1;
            }
            gv_bGActors[init_i].lv_nodes[init_i1].lv_animCount = 0;
            gv_bGActors[init_i].lv_nodes[init_i1].lv_actionTrigger = null;
            init_i1 = init_i1 + 1;
        }
        gv_bGActors[init_i].lv_nodeCount = 0;
        gv_bGActors[init_i].lv_currentNodeID = 0;
        gv_bGActors[init_i].lv_started = false;
        init_i = init_i + 1;
    }
    gv_bGActorCount = 0;
    gv_tP_BGActorID = 0;
    gv_tP_BGActorCurrentNodeID = 0;
    gv_marSaraProps = null;
    gv_marSaraAdjutant = null;
    gv_marSaraBriefcase = null;
    gv_marSaraHydra = null;
    gv_marSaraBadge = null;
    gv_marSaraJukebox = null;
    gv_marSaraPinboard = null;
    init_i = 0;
    while (init_i <= 20) {
        gv_marSaraPinboardItems[init_i] = null;
        init_i = init_i + 1;
    }
    gv_marSaraPinboardItemCount = 0;
    gv_marSaraTV = null;
    gv_observatoryProp = null;
    gv_observatoryPainting = null;
    gv_observatorySet2 = null;
    gv_hotspots_NoHighlightEffect = UnitGroupEmpty();
    gv_hotspotClicked = null;
    gv_hotspots_Flashing = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 30) {
        gv_hotspots_FlashingTextTags[init_i] = c_textTagNone;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 30) {
        gv_hotspots_FlashingPaused[init_i] = false;
        init_i = init_i + 1;
    }
    gv_hotspots_FlashingTextTagCount = 0;
    gv_marSaraJukeboxID = 0;
    gv_marSaraBriefcaseLeaveYesNoOn = false;
    gv_planetPanel_Created = false;
    init_i = 0;
    while (init_i <= 10) {
        gv_planetPanel_Planets[init_i].lv_planetID = 0;
        gv_planetPanel_Planets[init_i].lv_pitched = false;
        init_i = init_i + 1;
    }
    gv_planetPanel_PlanetCount = 0;
    init_i = 0;
    while (init_i <= 50) {
        gv_planetPanel_PlanetPitched[init_i] = false;
        init_i = init_i + 1;
    }
    gv_planetPanel_LeaveCallback = null;
    gv_planetPanel_CurrentSelection = 0;
    gv_planetPanel_ReplayCount = 0;
    gv_planetPanel_FidgetDone = false;
    gv_planetPanel_CharInvasionQueryDone = false;
    gv_planetPanel_CharInvasionQueryResult = 0;
    gv_introTextDialog = c_invalidDialogId;
    gv_introTextDialogLabel = c_invalidDialogControlId;
    gv_currentGossipActor = 0;
    gv_bridgeHornerCameras = null;
    gv_bridgeTychusCameras = null;
    gv_bridgeHansonCameras = null;
    gv_bridgeToshCameras = null;
    gv_cantinaToshCameras = null;
    gv_cantinaTychusCameras = null;
    gv_cantinaYbarraCameras = null;
    gv_labAdjutantCameras = null;
    gv_labHansonCameras = null;
    gv_labCowinCameras = null;
    gv_marSaraTychusCameras = null;
    gv_armorySwannCameras = null;
    gv_c_ConvoCameraTypeFirst = 1;
    gv_c_ConvoCameraTypeLast = ((21) - 1);
    init_i = 0;
    while (init_i <= 30) {
        gv_convoCameras[init_i] = null;
        init_i = init_i + 1;
    }
    gv_convoCameraRoom = 0;
    gv_convoCameraActor1 = 0;
    gv_convoCameraObjectCurrent1 = null;
    gv_convoCameraActor2 = 0;
    gv_convoCameraObjectCurrent2 = null;
    gv_convoCameraCustomCallback = null;
    gv_convoCameraChangeCallback = null;
    gv_convoCameraCurrent = 0;
    gv_convoCameraChangeResult = true;
    gv__TimestampText = null;
    gv_convoIDGlobal = null;
    init_i = 0;
    while (init_i <= 25) {
        init_j = 0;
        while (init_j <= 3) {
            gv_sceneFile[init_i][init_j] = "";
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 25) {
        init_j = 0;
        while (init_j <= 3) {
            gv_sceneAnim[init_i][init_j] = "Stand";
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 25) {
        init_j = 0;
        while (init_j <= 3) {
            gv_sceneMESound[init_i][init_j] = null;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 25) {
        gv_scenePreloaded[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv_sceneActorCameraID[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_sceneSound = null;
    gv_sceneSkipped = false;
    gv_briefing_BridgeMain = null;
    gv_briefing_BridgeCenter = null;
    gv_briefing_BridgeLeft = null;
    gv_briefing_BridgeRight = null;
    gv_briefing_MarSaraMain = null;
    gv_briefing_MarSaraCenter = null;
    gv_briefing_MarSaraLeft = null;
    gv_briefing_MarSaraRight = null;
    gv_lookAtScreenRight = null;
    gv_lookAtScreenLeft = null;
    gv_lookAtScreenMain = null;
    gv_lookAtGuest1 = null;
    gv_lookAtGuest2 = null;
    gv_lookAtRaynor = null;
    gv_briefing_CharRight = null;
    gv_briefing_CharLeft = null;
    gv_briefing_CharCenter = null;
    gv_briefing_CharMain = null;
    init_i = 0;
    while (init_i <= 10) {
        gv_briefingPortraits[init_i] = c_invalidPortraitId;
        init_i = init_i + 1;
    }
    gv_briefingPortraitCount = 0;
    gv_briefingVideoPlaying = null;
    gv_briefingMovieTexturePlaying = null;
    gv_briefingMovieTransmission = c_invalidTransmissionId;
    gv_briefingMovieSound = null;
    gv_briefingSoundPlayed = null;
    gv_briefingCompleted = false;
    gv_briefingMusic = null;
    init_i = 0;
    while (init_i <= 35) {
        gv_tVNewsTrigger[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 35) {
        gv_tVNewsPreload[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 35) {
        gv_tVNewsConvoID[init_i] = null;
        init_i = init_i + 1;
    }
    gv_tVNewsCurrentThread = null;
    gv_tVDialog = c_invalidDialogId;
    gv_tipStart = true;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CustomFadeInOut (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone);
void gf_TurnClickableOnOff (unit lp_unit, bool lp_desiredState);
void gf_TurnClickablesOnOff (unitgroup lp_whichClickables, bool lp_desiredState);
void gf_TurnClickableOnNoCheck (unit lp_unit);
void gf_TurnClickablesOnNoCheck (unitgroup lp_whichClickables);
void gf_SetClickableCursorType (unit lp_unit, int lp_cursorType);
void gf_AddClickable (unitgroup lp_whichClickables, unit lp_unit, int lp_room, int lp_cursorType);
void gf_ResetClickablesLockCount ();
void gf_SetUnitClickableLockCount (int lp_action, unit lp_unit, int lp_lock);
int gf_GetUnitClickableLockCount (unit lp_unit);
int gf_GetUnitClickableRoom (unit lp_unit);
void gf_ChangeVisibleUnits (unitgroup lp_units);
void gf_RemoveVisibleUnit (bool lp_addRemove, unit lp_unit);
void gf_RemoveVisibleUnits (bool lp_addRemove, unitgroup lp_units);
void gf_WaitForSkip (fixed lp_timeout, int lp_timeType);
void gf_DisplayBackButton (trigger lp_callback);
void gf_FromatBackPlayButton (int lp_button);
void gf_HideBackButton (bool lp_showHide);
void gf_BackButtonBack ();
void gf_TBDWindow (text lp_message, trigger lp_exitCallback);
void gf_HighlightUnit (bool lp_highlightUnhighlight, unit lp_unit);
void gf_SetAllSoundChannelVolumesStoryMode (int lp_mode);
void gf_FadeOutSoundChannelVolumeForMovie (fixed lp_duration);
void gf_FadeOutAllSoundChannelVolume (fixed lp_duration);
int gf_LastCreatedJukeboxID ();
int gf_GetJukeboxID (unit lp_box);
void gf_CreateJukebox (unit lp_box, bool lp_startRandom);
void gf_AddTrackToJukebox (int lp_jukeboxID, soundlink lp_music, text lp_title, text lp_author);
void gf_SetJukeboxFidget (int lp_jukeboxID, string lp_trackFidgetSet, string lp_turnOffFidgetSet);
void gf_JukeboxClicked (unit lp_jukebox);
void gf_JukeboxNextTrack (int lp_jukeboxID, bool lp_withComments);
void gf_JukeboxUpdateTrackInfo (int lp_jukeboxID);
void gf_ShowHideJukeboxTrackInfo (bool lp_showHide);
void gf_MuteJukebox (bool lp_muteUnmute, int lp_jukeboxID);
bool gf_JukeboxIsShutdown (int lp_jukeboxID);
void gf_AddPinboard (int lp_iD, string lp_genericFidget, unit lp_board, int lp_room, string lp_zoomCamera, string lp_zoomAnimation, fixed lp_zoomDuration, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration, soundlink lp_highlightSound);
void gf_AddPinboardItem (int lp_item, string lp_fidgetSet, unit lp_itemUnit, soundlink lp_activateSound);
void gf_AddPinboardItemToPinboard (int lp_pinboard, int lp_item);
void gf_HidePinboardItem (bool lp_showHide, int lp_item);
void gf_HighlightPinboard (int lp_pinbaord, bool lp_hightlight, unit lp_unhighlightedUnit);
void gf_PreparePinboard (int lp_pinboard);
int gf_GetPinboardFromUnit (unit lp_unit);
unit gf_PinboardItem (int lp_item);
int gf_GetPinboardItemFromUnit (unit lp_unit);
unitgroup gf_GetPinboardItemGroup (int lp_pinboard);
bool gf_PinboardItemIsOnPinboard (int lp_pinboard, int lp_item);
int gf_GetPinboardOfItem (int lp_item);
int gf_GetCurrentPinboardItem ();
void gf_UpdateNewItems ();
void gf_NewItemAvailable (int lp_type, text lp_text, string lp_imagePortrait, string lp_modelFlash, fixed lp_duration, int lp_customData);
void gf_PauseNewItemInfo (bool lp_pauseUnpause);
void gf_CreateNewItem (int lp_newItemIndex, fixed lp_offset);
void gf_WaitNewItemInfoDisplayDuration (int lp_newItemIndex);
void gf_MoveNewItem (int lp_newItemIndex, fixed lp_offsetY, fixed lp_duration);
void gf_MoveNewItemInstant (int lp_newItemIndex, fixed lp_offsetY);
void gf_MoveNewItemFlashInstant (int lp_newItemIndex);
void gf_RemoveNewItem (int lp_newItemIndex);
void gf_DestoryNewItem (int lp_newItemIndex);
void gf_HideNewItem (bool lp_hideShow, int lp_newItemIndex);
void gf_ResearchUnlock (int lp_research);
void gf_NewMercenary (int lp_mercID);
int gf_CurrentWorldMode ();
int gf_CurrentIdleState ();
void gf_WaitForWorldMode (int lp_worldMode);
void gf_WaitForIdleState (int lp_idleState);
void gf_WaitForGlobalIdle ();
void gf_SetWorldMode (int lp_mode);
void gf_SetIdleState (int lp_idleState);
void gf_DisplayFullScreenImage (string lp_image);
void gf_HideFullScreenImage (bool lp_showHide);
void gf_MakeUnitLookAtPointAndBlinkWithDebugControl (unit lp_unit, string lp_type, point lp_point);
void gf_MakeUnitLookAtPointWithDebugControl (unit lp_unit, string lp_type, point lp_point);
void gf_MakeUnitLookAtUnitAndBlinkWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void gf_MakeUnitLookAtUnitWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void gf_DisplayQueryDialog (playergroup lp_players, text lp_show, bool lp_show2);
int gf_QueryDialogResult ();
void gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void gf_TurnActorFidgetOnOffInstantly (int lp_actor, bool lp_onOff);
void gf_TurnAnimationPropertiesOnOffInstantly (unit lp_unit, string lp_property, bool lp_onOff);
void gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend);
int gf_ConvertDifficultyToInteger (int lp_campaignDifficulty);
int gf_ConvertIntegerToDifficulty (int lp_value);
void gf_PerformFarewellLine (unit lp_speaker, string lp_line, string lp_beforeAnim, string lp_afterAnim, bool lp_waitOption);
void gf_PerformFidgetLine (unit lp_speaker, string lp_line, string lp_anim);
void gf_ShowHideUnitGroup (bool lp_showHide, unitgroup lp_unitGroup);
void gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection (unit lp_unit, point lp_targetPoint, int lp_orderQueue);
point gf_UnitMovingTarget (unit lp_unit);
void gf_StopAllTransmissionConversation ();
point gf_RelativePoint (point lp_source, point lp_sourceCenter, point lp_targetCenter, fixed lp_xRatio, fixed lp_yRatio, fixed lp_rotate);
void gf_Ambience_FadeSoundVolumeOverTime (soundlink lp_soundLink, sound lp_sound, fixed lp_time);
void gf_Ambience_RestoreSoundVolume (soundlink lp_soundLink, sound lp_sound);
void gf_FadeJukeboxVolumeOverTime (int lp_jukeboxID);
void gf_ReturnNewItemInfo ();
void gf_ReturnFlahsing ();
void gf_ReturnTimestamp ();
void gf_DisplayMissionDebriefing (int lp_mission);
string gf_TransitionalBankSection (string lp_section);
string gf_TransitionalBankKey (string lp_key);
void gf_TransitionalSave ();
void gf_TransitionalLoad ();
void gf_DisplayDebugMessage (text lp_msg);
void gf_DebugSceneAddButton (int lp_wide, int lp_tall, int lp_x, int lp_y, text lp_label, trigger lp_callback, text lp_sceneLabel);
void gf_DebugSceneAddLabel (int lp_x, int lp_y, text lp_label);
void gf_DebugSceneAddRow (int lp_scene, text lp_name, text lp_subtitle, trigger lp_sceneCallback, trigger lp_animatic);
void gf_RoomCheatAddButton (text lp_label);
void gf_RoomCheatCreateDialog ();
void gf_RoomCheatUpdateButton (int lp_button, bool lp_condition);
void gf_RoomCheatUpdateDialog (bool lp_bypass);
void gf_DisplayRoomCheatDialog (bool lp_check);
void gf_HideRoomCheatDialog ();
void gf_RoomCameraAddButton (text lp_label);
void gf_RoomCameraCreateDialog ();
void gf_RoomCameraUpdateButton (int lp_button, bool lp_condition);
void gf_RoomCameraUpdateDialog (bool lp_bypass);
void gf_DisplayRoomCameraDialog (bool lp_check);
void gf_HideRoomCameraDialog ();
void gf_Debug_CreateBriefingMissionButton (int lp_mission);
void gf_Debug_CreateBriefingMissionButtonNewLine ();
void gf_Debug_CreateBriefingDialog ();
void gf_Debug_CreateTVNewsMissionButton (int lp_mission);
void gf_Debug_CreateTVNewsMissionButtonNewLine ();
void gf_Debug_CreateTVNewsDialog ();
void gf_DisplayBlizzconScreen ();
void gf_Debug_RoomChangeTimerStart ();
void gf_Debug_RoomChangeTimerStart2 (int lp_room, bool lp_display);
void gf_DebugOutputSetUnitsSingle (int lp_room);
string gf_ActorStringID (int lp_actorID);
text gf_ActorName (int lp_actorID);
point gf_ActorPoint (int lp_roomID, int lp_actorID, int lp_toActorID);
bool gf_ActorIsEnabledInRoom (int lp_actor, int lp_room);
bool gf_ActorIsEnabled (int lp_actor);
int gf_ActorID (unit lp_actorUnit);
unit gf_ActorUnit (int lp_iD);
int gf_ActorRoom (int lp_iD);
bool gf_ActorWithFidget (int lp_actor);
bool gf_ActorWithConversation (int lp_actor);
string gf_ActorConversation (int lp_actorID);
string gf_ActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimRaynor (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorLightingAnimTychus (int lp_toActorID, int lp_roomID, int lp_lightingType);
string gf_ActorRoomAnim (int lp_actor, int lp_room, int lp_index);
void gf_InitActorSingle (int lp_actorID, string lp_stringID, text lp_name, unit lp_unit, int lp_type, string lp_convoStateIndex);
void gf_InitActors ();
void gf_InitActorRooms ();
void gf_SetActorUnit (int lp_actorID, unit lp_unit);
void gf_SetActorRoom (int lp_actorID, int lp_roomID);
void gf_SetActorType (int lp_actorID, int lp_type);
void gf_ResetActorToLocation (int lp_actorID, point lp_location);
void gf_HideAllActors (bool lp_hideShow);
void gf_ActorTalked (int lp_actor);
void gf_LockActorReloading (bool lp_lockUnlock);
void gf_ReloadActors (bool lp_forced);
void gf_PlayActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_room, int lp_lightingType);
void gf_ClearActorLightingAnim (int lp_actorID);
void gf_ReloadRoomActorAnimation (int lp_actor, int lp_roomID);
void gf_LoadActorComplexAnimation (int lp_actorID);
void gf_ActorScenePrepare (int lp_actorID, int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearAll ();
void gf_ActorSceneClear (int lp_actorID, int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareRaynor (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearRaynor (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorScenePrepareTychus (int lp_toActorID, int lp_room, int lp_type);
void gf_ActorSceneClearTychus (int lp_toActorID, int lp_room, int lp_type);
void gf_PreloadRoomIfCondition (int lp_room, bool lp_condition);
void gf_PreloadUnitGroup (unitgroup lp_unitGroup);
void gf_PreloadUnitStoryMap (unit lp_unit);
void gf_PrepareRoomActorVisibility (int lp_roomID);
void gf_PrepareRoomActors (int lp_roomID, bool lp_includeRaynor);
void gf_PrepareRoom (int lp_room);
void gf_WalkinRoom (int lp_room);
void gf_EnterRoom (int lp_room, bool lp_showTransition);
void gf_LeaveRoomMarSara (bool lp_showTransition);
void gf_LeaveRoomGalaxy (bool lp_showTransition);
void gf_LeaveRoom (int lp_room, bool lp_showTransition, bool lp_stopTransmissions);
void gf_InitMarSaraBarUnits ();
void gf_InitMarSaraBarHotspots ();
bool gf_RoomStates (int lp_stateType, int lp_room);
void gf_SetRoomStates (int lp_stateType, int lp_room, bool lp_states);
int gf_RoomStatesIndex (int lp_stateType, int lp_room);
void gf_RegisterRoomStates ();
int gf_RoomLocation (int lp_room);
int gf_ConvertIntegerToRoomLocation (int lp_index);
bool gf_RoomIsOnLocation (int lp_room, int lp_location);
bool gf_RoomLocationIsEnabled (int lp_location);
void gf_EnableRoomLocation (bool lp_enableDisable, int lp_location);
void gf_UnloadLocation (int lp_location);
void gf_UnloadRoom (int lp_room);
void gf_PreloadLocation (int lp_location);
void gf_ReloadLocations ();
void gf_TurnMarSaraBarBackgroundSoundOnOff (bool lp_onOff);
void gf_RoomScenePrepare (int lp_room, int lp_type);
void gf_RoomSceneClearAll ();
void gf_RoomSceneClear (int lp_room, int lp_type);
void gf_ViewRoomCamera (int lp_room, playergroup lp_players, fixed lp_duration);
unit gf_RoomUnit (int lp_roomID);
unitgroup gf_RoomUnits (int lp_room);
bool gf_RoomIsEnabled (int lp_room);
text gf_RoomName (int lp_room);
int gf_RoomFromIndex (int lp_index);
void gf_ChangeRoom (int lp_room, bool lp_showTransition);
void gf_GoToRoom (int lp_room, bool lp_showTransition);
point gf_CenterOfRoom (int lp_room);
void gf_AddBGActor (int lp_actorID, point lp_home);
int gf_LastAddedBGActorID ();
int gf_GetBGActorID (int lp_actorID);
int gf_GetBGActorIDByActionTrigger (trigger lp_actionTrigger);
unit gf_GetBGActor (int lp_bGActorID);
void gf_AddBGActorNode (int lp_actorID, int lp_nodeType, point lp_targetLoc, bool lp_turnOrNot, fixed lp_stayDuration, string lp_anim1, fixed lp_anim1Duration, string lp_anim2, fixed lp_anim2Duration, string lp_anim3, fixed lp_anim3Duration);
void gf_BGActorStart (int lp_actorID);
void gf_BGActorStop (int lp_actorID);
void gf_BGActorTalkToRaynor (int lp_actorID);
void gf_BGActorPause (int lp_actorID);
void gf_BGActorResume (int lp_actorID);
void gf_BGActorDoNext (int lp_bGActorID);
void gf_HotspotZoom (unit lp_room, string lp_zoomCamera, string lp_animation, fixed lp_duration);
void gf_HotspotLeave (int lp_room, trigger lp_prepareRoomCallBack, fixed lp_outDuration, fixed lp_inDuration);
void gf_HotspotLeaveWithCamera (int lp_room, trigger lp_prepareRoomCallBack, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration);
unit gf_HotspotClicked ();
void gf_AddFlashingTextTagToHotspot (unit lp_unit, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY);
void gf_AddFlashingTextTagToActor (int lp_actor, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY);
void gf__AddFlashingTextTag (unit lp_unit, text lp_text, string lp_attachmentPoint, int lp_offsetX, int lp_offsetY, string lp_edgeImage, int lp_edge, int lp_edgeOffsetX, int lp_edgeOffsetY);
int gf_HotspotFlashingTextTag (unit lp_unit);
bool gf_HotspotFlashingPaused (unit lp_unit);
string gf_HotspotConvoState (unit lp_unit);
void gf_StartFlashingUnit (unit lp_unit);
void gf_StopFlashingUnit (unit lp_unit);
void gf_HideFlashingTextTag (bool lp_showHide, unit lp_unit);
void gf_PauseFlashingUnit (bool lp_pauseUnpause, unit lp_unit);
void gf_PauseFlashing (bool lp_pauseUnpause);
void gf_HotspotHighlighted (unit lp_hotspot, bool lp_highlighted);
int gf_PlanetPanelPlanetIndexFromPlanet (int lp_planet);
int gf_PlanetPanelPlanetIndexFromPlanetID (int lp_planetID);
int gf_PlanetPanelPlanetIDFromPlanet (int lp_planet);
int gf_PlanetPanelPlanetFromPlanetID (int lp_planetID);
bool gf_PlanetPanelPlanetPitched (int lp_planet);
void gf_PlanetPanelDisplay (int lp_planetID, trigger lp_leaveCallback);
void gf_PlanetPanelClose ();
void gf_PlanetPanelDestory ();
void gf_PlanetPanelAddPlanet (int lp_planetID, bool lp_hideButton);
void gf_PlanetPanelPreload ();
void gf_PlanetPanelGrayoutPortrait (bool lp_grayout);
void gf_DisplayIntroTextBox (text lp_header, string lp_headerStyle, text lp_text, string lp_textStyle, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height);
void gf_HideIntroTextBox (bool lp_showHide);
void gf_PlayFidget (string lp_fidget, int lp_actor1, int lp_actor2);
void gf_PlayGossip (int lp_actor);
void gf_UseConversationCamera (int lp_room, int lp_character, int lp_cameraType, unit lp_cameraObject);
bool gf_UseConversationCameraMarSaraTychus (int lp_cameraType);
bool gf_UseConversationCameraBridgeTosh (int lp_cameraType);
bool gf_UseConversationCameraBridgeHorner (int lp_cameraType);
bool gf_UseConversationCameraBridgeHanson (int lp_cameraType);
bool gf_UseConversationCameraBridgeTychus (int lp_cameraType);
bool gf_UseConversationCameraBridgeCommunicator (int lp_cameraType);
bool gf_UseConversationCameraCantinaTychus (int lp_cameraType);
bool gf_UseConversationCameraCantinaTosh (int lp_cameraType);
bool gf_UseConversationCameraCharTychus (int lp_cameraType);
bool gf_UseConversationCameraCharWarfield (int lp_cameraType);
bool gf_UseConversationCameraLabHanson (int lp_cameraType);
bool gf_UseConversationCameraLabAdjutant (int lp_cameraType);
bool gf_UseConversationCameraAmorySwan (int lp_cameraType);
void gf_SetConvensationCamera (int lp_type, camerainfo lp_cameraObject);
string gf_ConvoCharacter (int lp_actorID);
void gf_ConvoSetting (int lp_room, int lp_raynor, int lp_to1, unit lp_cameraObject1, int lp_to2, unit lp_cameraObject2, trigger lp_customCameraCallback, trigger lp_changeCameraCallback);
int gf_ConvoGetActorLocatioinActor (int lp_room, int lp_to);
void gf_ConvoPositionActors (int lp_room, int lp_raynor, int lp_to1, int lp_to2);
void gf_ConvoClearCamera (int lp_to1, int lp_to2);
void gf_Convo (string lp_convo, int lp_room, int lp_raynor, point lp_raynorHome, int lp_to1, unit lp_cameraObject1, point lp_characterHome1, int lp_to2, unit lp_cameraObject2, point lp_characterHome2, trigger lp_callbackPre, trigger lp_callbackPost, bool lp_changeScreenMode, bool lp_changeCameraAtEnd, trigger lp_customCameraCallback, trigger lp_changeCameraCallback);
void gf_DisplayTimestampFromDataConvo (string lp_convoID);
void gf_DisplayTimestampFromDataConvoCore (string lp_convoID);
void gf_DisplayTimestamp (int lp_type);
void gf_SceneInitDataSingle (int lp_sceneIndex, string lp_file1, string lp_file2, string lp_file3, string lp_anim1, string lp_anim2, string lp_anim3, soundlink lp_mESound1, soundlink lp_mESound2, soundlink lp_mESound3);
void gf_SceneInitData ();
void gf_ScenePreload (int lp_sceneID);
void gf_ScenePreloadInit ();
void gf_ScenePrepare (int lp_sceneID, bool lp_clickableOff);
void gf_ScenePlayAsync (int lp_sceneID, int lp_subIndex);
void gf_SceneCleanup ();
void gf_SceneCleanupWithFadeandEnterRoom ();
void gf_Scene (int lp_sceneID, int lp_subIndex, bool lp_clickableOff, bool lp_fadeIn);
void gf_AnimaticPrepare ();
void gf_AnimaticCleanup (int lp_room);
void gf_Briefing (int lp_mission, int lp_room, trigger lp_skippable, trigger lp_preload);
void gf_BriefingPreload (bool lp_all);
void gf_BriefingPreloadScreens (int lp_room);
void gf_BriefingPrepare (int lp_room, int lp_initCamera, int lp_actor1, int lp_actor2, int lp_actor3, bool lp_mainAnim, bool lp_center, bool lp_left, bool lp_right);
string gf_BriefingCamera (int lp_camera);
unit gf_BriefingScreen (int lp_room, int lp_briefingScreen);
void gf_BriefingApplyCamera (int lp_room, int lp_camera, fixed lp_duration);
int gf_BriefingCreatePortrait (string lp_model, string lp_camera, int lp_screen, bool lp_attachToScreenNow);
point gf_BriefingActorAttachPoint (int lp_room, int lp_actor);
void gf_BriefingAddActor (int lp_roomID, int lp_actorID);
void gf_BriefingRemoveAllActors ();
void gf_BriefingDestoryAllPortraits ();
void gf_BriefingPlayVideo (string lp_movie, int lp_roomID, int lp_screen, bool lp_transientAnim);
void gf_BriefingStopVideo (int lp_roomID, int lp_screen);
trigger gf_CurrentTVNews ();
trigger gf_TVNewsTrigger (int lp_mission);
void gf_InitTVNewsSingle (int lp_lastMission, string lp_convoID, trigger lp_callback, trigger lp_preload);
void gf_TVNewsPreload (int lp_mission);
void gf_TVNewsPreloadGeneric (int lp_mission);
void gf_TVNewsMarSara (int lp_mission, trigger lp_skippable);
void gf_TVNewsMarSaraStopAllThreads ();
void gf_TVNewsWatched (int lp_lastMission);
void gf_WaitForTimeToPlayNextTip (fixed lp_duration);
void gf_AddTip (string lp_convoState);
void gf_StartTipHint ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_WaitForSkipTrig;
trigger gt_BackButtonClicked;
trigger gt_BackButtonEscape;
trigger gt_BackButtonEscapeSkippable;
trigger gt_TBDWindowCloseClicked;
trigger gt_JukeboxClicked;
trigger gt_JukeboxTrackLoop;
trigger gt_JukeboxTrackAnimation;
trigger gt_JukeboxTrackComments;
trigger gt_StopSoundtrackMultiple;
trigger gt_PinboardClicked;
trigger gt_PinboardZoom;
trigger gt_PinboardLeave;
trigger gt_PinboardItemClicked;
trigger gt_PinboardItemClickedPreCallback;
trigger gt_PinboardItemClickedPostCallback;
trigger gt_PinboardItemClickedCamera;
trigger gt_PinboardItemClickedCameraChanged;
trigger gt_PinboardItemSkippable;
trigger gt_PinboardItemBack;
trigger gt_DisplayNewItems;
trigger gt_NewItemAvailable;
trigger gt_CreateNewItem;
trigger gt_MoveNewItem;
trigger gt_RemoveNewItem;
trigger gt_DebugEnabledLookAt;
trigger gt_DebugDisabledLookAt;
trigger gt_QueryDialogDismissed;
trigger gt_MapInit;
trigger gt_Init01StoryData;
trigger gt_Init01AData;
trigger gt_Init01BRewards;
trigger gt_Init01CDerivedStates;
trigger gt_Init01CDerivedStatesNews;
trigger gt_Init01CDerivedStatesTransitionalLoad;
trigger gt_Init02World;
trigger gt_Init02AActors;
trigger gt_Init02BRooms;
trigger gt_Init02CCameras;
trigger gt_Init02DHotspots;
trigger gt_Init02DHotspotsPinboard;
trigger gt_Init02EStarmap;
trigger gt_Init02FScenes;
trigger gt_Init02GBriefingABChoice;
trigger gt_Init02HDebriefing;
trigger gt_Init02ITVNews;
trigger gt_Init02JPreloading;
trigger gt_Init03UI;
trigger gt_Init04Environment;
trigger gt_Init05Sounds;
trigger gt_Init06Intro;
trigger gt_ReturnToMarSara;
trigger gt_ReturnGeneric;
trigger gt_ReturnGeneric2;
trigger gt_StorySave;
trigger gt_StorySaveDone;
trigger gt_EndofTime;
trigger gt_EnableDebug;
trigger gt_DisableDebug;
trigger gt_DebugAutomatedTesting;
trigger gt_TerranUptheNight;
trigger gt_DebugSceneCreateDialog;
trigger gt_DebugSceneClicked;
trigger gt_DebugSceneExit;
trigger gt_DebugSCENE;
trigger gt_DebugScenePerformanceTestGetFPS;
trigger gt_RoomCheatButtonResponse;
trigger gt_DebugROOM;
trigger gt_DebugROOMCHEAT;
trigger gt_DebugTESTCAMERA;
trigger gt_DebugGAMECAMERA;
trigger gt_DebugGLOBALVIEW;
trigger gt_DebugUNLOCKCAMERA;
trigger gt_RoomCameraButtonResponse;
trigger gt_DebugROOMCAMERA;
trigger gt_Debug_Briefing;
trigger gt_Debug_BriefingDialogMissionButtonResponse;
trigger gt_Debug_BriefingDialogClose;
trigger gt_Debug_TVNews;
trigger gt_Debug_TVNewsDialogMissionButtonResponse;
trigger gt_Debug_TVNewsDialogClose;
trigger gt_DebugMissionDebriefing;
trigger gt_DebugABChoice;
trigger gt_DebugMercIntro;
trigger gt_DebugLabIntro;
trigger gt_DebugArmoryIntro;
trigger gt_BlizzconScreenWait;
trigger gt_DebugOutputSets;
trigger gt_DebugCINEMATICMODE;
trigger gt_DebugSHOWALL;
trigger gt_DebugDOOR;
trigger gt_DebugIDLETIMES;
trigger gt_DebugCredits;
trigger gt_DebugDoorAnimation;
trigger gt_DebugPauseMusic;
trigger gt_DebugAttachmentLocation;
trigger gt_DebugHideUnclickables;
trigger gt_DebugStoryState;
trigger gt_DebugClickTurnOn;
trigger gt_DebugClick;
trigger gt_DebugStarmap;
trigger gt_DebugCloseStarmap;
trigger gt_DebugMissionArchieves;
trigger gt_DebugShowActor;
trigger gt_DebugHideActor;
trigger gt_DebugRoomPreloadStates;
trigger gt_DebugSize;
trigger gt_DebugPos;
trigger gt_DebugBGUnitPicked;
trigger gt_DebugToshPortrait;
trigger gt_DebugToshPortrait2;
trigger gt_DebugStopTransmission;
trigger gt_DebugZeratulPlanetPanel;
trigger gt_DebugTemp;
trigger gt_ActorClicked;
trigger gt_PrepareRoomGalaxy;
trigger gt_PrepareRoomMarSara;
trigger gt_PrepareRoomVoid;
trigger gt_WalkinRoomDoor;
trigger gt_WalkinMarSara;
trigger gt_EnterMarSara;
trigger gt_EnterCantinaStartJukebox2;
trigger gt_RoomStatesDefaultCallback;
trigger gt_BGActorNodeMoveArrive;
trigger gt_BGActorNodeStayExpires;
trigger gt_BGActorNodeDo;
trigger gt_HotspotClicked;
trigger gt_HotspotHighlighted;
trigger gt_HotspotUnhighlighted;
trigger gt_MarSaraBadgeClickedPreCallback;
trigger gt_MarSaraBadgeClickedPostCallback;
trigger gt_MarSaraBadgeClickedCamera;
trigger gt_MarSaraBadgeClicked;
trigger gt_MarSaraHydraClickedPreCallback;
trigger gt_MarSaraHydraClickedPostCallback;
trigger gt_MarSaraHydraClickedCamera;
trigger gt_MarSaraHydraClicked;
trigger gt_MarSaraJukeboxInit;
trigger gt_MarSaraJukeboxClickedPreCallback;
trigger gt_MarSaraJukeboxClickedPostCallback;
trigger gt_MarSaraJukeboxClickedCamera;
trigger gt_MarSaraJukeboxClicked;
trigger gt_MarSaraBriefcaseClicked;
trigger gt_MarSaraBriefcaseLeave;
trigger gt_MarSaraBriefcaseLeaveUIYesNo;
trigger gt_MarSaraBriefcaseHighlighted;
trigger gt_MarSaraBriefcaseHologramHighlighted;
trigger gt_MarSaraBriefcaseUnhighlighted;
trigger gt_MarSaraBriefcaseHologramUnhighlighted;
trigger gt_MarSaraTVClicked;
trigger gt_MarSaraTVHighlighted;
trigger gt_MarSaraTVUnhighlighted;
trigger gt_TVNewsBarAsyncPreload;
trigger gt_PlanetPanelPlanetSelected;
trigger gt_PlanetPanelLaunch;
trigger gt_PlanetPanelPlay;
trigger gt_PlanetPanelLeave;
trigger gt_PlanetPanelReady;
trigger gt_PlanetPanelHornerPitchHighlightPlanet;
trigger gt_PlanetPanelBirthComplete;
trigger gt_PlanetPanelCustomDialogDismissed;
trigger gt_ConvoCameraTriggerMaster;
trigger gt_ConvoCameraTriggerCustom;
trigger gt_ConvoCameraTriggerCharacter1Closeup;
trigger gt_ConvoCameraTriggerCharacter1Medium;
trigger gt_ConvoCameraTriggerCharacter1Shoulder;
trigger gt_ConvoCameraTriggerCharacter1Pushin;
trigger gt_ConvoCameraTriggerCharacter1Pushout;
trigger gt_ConvoCameraTriggerCharacter1Pan;
trigger gt_ConvoCameraTriggerCharacter2Closeup;
trigger gt_ConvoCameraTriggerCharacter2Medium;
trigger gt_ConvoCameraTriggerCharacter2Shoulder;
trigger gt_ConvoCameraTriggerCharacter2Pushin;
trigger gt_ConvoCameraTriggerCharacter2Pushout;
trigger gt_ConvoCameraTriggerCharacter2Pan;
trigger gt_ConvoCameraTriggerRaynorCloseup;
trigger gt_ConvoCameraTriggerRaynorMedium;
trigger gt_ConvoCameraTriggerRaynorShoulder;
trigger gt_ConvoCameraTriggerRaynorPushin;
trigger gt_ConvoCameraTriggerRaynorPushout;
trigger gt_ConvoCameraTriggerRaynorPan;
trigger gt_MarSaraTychusClickedPreCallback;
trigger gt_MarSaraTychusClickedPostCallback;
trigger gt_MarSaraTychusClicked;
trigger gt_DisplayTimestampFromDataConvoSkippable;
trigger gt_SceneSkippable;
trigger gt_Scene01RaynorIntro;
trigger gt_Scene04TychusIntro;
trigger gt_Scene05EscapefromMarSara;
trigger gt_BriefingTemplate;
trigger gt_BriefingTemplateSkippable;
trigger gt_BriefingTemplatePreload;
trigger gt_BriefingPlayVideoTargetingCursorSound;
trigger gt_BriefingTRaynor01;
trigger gt_BriefingTRaynor01Skippable;
trigger gt_BriefingTRaynor01PreloadRough;
trigger gt_BriefingTRaynor01Preload;
trigger gt_BriefingTRaynor02;
trigger gt_BriefingTRaynor02Skippable;
trigger gt_BriefingTRaynor02PreloadRough;
trigger gt_BriefingTRaynor02Preload;
trigger gt_BriefingTRaynor03;
trigger gt_BriefingTRaynor03Skippable;
trigger gt_BriefingTRaynor03PreloadRough;
trigger gt_BriefingTRaynor03Preload;
trigger gt_TVNewsBack;
trigger gt_TVNewsRaynor00;
trigger gt_TVNewsRaynor00Skippable;
trigger gt_TVNewsRaynor00Preload;
trigger gt_TVNewsRaynor01;
trigger gt_TVNewsRaynor01Skippable;
trigger gt_TVNewsRaynor01Preload;
trigger gt_TVNewsRaynor01Event02;
trigger gt_TVNewsRaynor01Event05;
trigger gt_TVNewsRaynor02;
trigger gt_TVNewsRaynor02Skippable;
trigger gt_TVNewsRaynor02Preload;
trigger gt_TVNewsRaynor02Event03;
trigger gt_TVNewsRaynor02Event05;
trigger gt_TVNewsEventEnd;
trigger gt_TVNewsEventAdStart;
trigger gt_TipAfterTRaynor01;
trigger gt_TipAfterTRaynor02;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CustomFadeInOut (bool lp_fadeIn, fixed lp_duration, bool lp_waitUntilDone) {
    // Implementation
    if ((lp_fadeIn == false)) {
        if ((gv_customFadeDialog == c_invalidDialogId)) {
            DialogCreate(1, 1, c_anchorCenter, 0, 0, false);
            gv_customFadeDialog = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            gv_customFadeImage = DialogControlLastCreated();
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0,0,0), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        }
        else {
        }
        DialogControlFadeTransparency(gv_customFadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    else {
        if ((gv_customFadeDialog != c_invalidDialogId)) {
            DialogControlFadeTransparency(gv_customFadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }
        else {
        }
    }
    if ((lp_waitUntilDone == true)) {
        Wait(lp_duration, c_timeReal);
    }
    else {
    }
}

void gf_TurnClickableOnOff (unit lp_unit, bool lp_desiredState) {
    // Implementation
    if ((lp_desiredState == true)) {
        gf_SetUnitClickableLockCount(c_transmissionDurationSub, lp_unit, 1);
        if ((gf_GetUnitClickableLockCount(lp_unit) == 0)) {
            UnitSetState(lp_unit, c_unitStateHighlightable, true);
            UnitSetState(lp_unit, c_unitStateCursorable, true);
        }
        else {
        }
    }
    else {
        gf_SetUnitClickableLockCount(c_transmissionDurationAdd, lp_unit, 1);
        UnitSetState(lp_unit, c_unitStateHighlightable, false);
        UnitSetState(lp_unit, c_unitStateCursorable, false);
        libNtve_gf_SendActorMessageToUnit(lp_unit, "HaloStop");
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_unit), gv_aNIMID_HIGHLIGHT);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_unit), gv_aNIMID_SHEEN);
    }
}

void gf_TurnClickablesOnOff (unitgroup lp_whichClickables, bool lp_desiredState) {
    unitgroup auto5345FD8F_g;
    int auto5345FD8F_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    if ((lp_desiredState == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/BB73B4E1"), false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/0B3A684D"), false);
    }
    auto5345FD8F_g = lp_whichClickables;
    auto5345FD8F_u = 1;
    while (auto5345FD8F_u <= UnitGroupCount(auto5345FD8F_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto5345FD8F_g, auto5345FD8F_u);
        gf_TurnClickableOnOff(lv_u, lp_desiredState);
        if (lv_u == UnitGroupUnit(auto5345FD8F_g, auto5345FD8F_u)) {
            auto5345FD8F_u = auto5345FD8F_u + 1;
        }
    }
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal StopSMEventSounds");
}

void gf_TurnClickableOnNoCheck (unit lp_unit) {
    // Implementation
    gf_SetUnitClickableLockCount(c_transmissionDurationSet, lp_unit, 0);
    UnitSetState(lp_unit, c_unitStateHighlightable, true);
    UnitSetState(lp_unit, c_unitStateCursorable, true);
}

void gf_TurnClickablesOnNoCheck (unitgroup lp_whichClickables) {
    unitgroup auto800FE0DA_g;
    int auto800FE0DA_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    auto800FE0DA_g = lp_whichClickables;
    auto800FE0DA_u = 1;
    while (auto800FE0DA_u <= UnitGroupCount(auto800FE0DA_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto800FE0DA_g, auto800FE0DA_u);
        gf_TurnClickableOnNoCheck(lv_u);
        if (lv_u == UnitGroupUnit(auto800FE0DA_g, auto800FE0DA_u)) {
            auto800FE0DA_u = auto800FE0DA_u + 1;
        }
    }
}

void gf_SetClickableCursorType (unit lp_unit, int lp_cursorType) {
    int auto73C253A6_val;

    // Implementation
    auto73C253A6_val = lp_cursorType;
    if (auto73C253A6_val == 2) {
        UnitSetCursor(lp_unit, "InteractiveActivate");
    }
    else if (auto73C253A6_val == 3) {
        UnitSetCursor(lp_unit, "InteractiveLook");
    }
    else if (auto73C253A6_val == 0) {
        UnitSetCursor(lp_unit, "InteractiveMove");
    }
    else if (auto73C253A6_val == 1) {
        UnitSetCursor(lp_unit, "InteractiveTalk");
    }
    else {
        UnitSetCursor(lp_unit, "InteractiveActivate");
    }
}

void gf_AddClickable (unitgroup lp_whichClickables, unit lp_unit, int lp_room, int lp_cursorType) {
    // Implementation
    gf_SetUnitClickableLockCount(c_transmissionDurationSet, lp_unit, 0);
    UnitSetCustomValue(lp_unit, (1), IntToFixed((lp_room)));
    gf_SetClickableCursorType(lp_unit, lp_cursorType);
    UnitGroupAdd(lp_whichClickables, lp_unit);
}

void gf_ResetClickablesLockCount () {
    unitgroup auto64A00279_g;
    int auto64A00279_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Implementation
    auto64A00279_g = gv_clickables;
    auto64A00279_u = 1;
    while (auto64A00279_u <= UnitGroupCount(auto64A00279_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(auto64A00279_g, auto64A00279_u);
        gf_SetUnitClickableLockCount(c_transmissionDurationSet, lv_u, 0);
        if (lv_u == UnitGroupUnit(auto64A00279_g, auto64A00279_u)) {
            auto64A00279_u = auto64A00279_u + 1;
        }
    }
}

void gf_SetUnitClickableLockCount (int lp_action, unit lp_unit, int lp_lock) {
    int auto708E87AD_val;

    // Variable Declarations
    fixed lv_value;

    // Variable Initialization
    lv_value = 0.0;

    // Implementation
    lv_value = IntToFixed(gf_GetUnitClickableLockCount(lp_unit));
    auto708E87AD_val = lp_action;
    if (auto708E87AD_val == c_transmissionDurationSet) {
        lv_value = IntToFixed(lp_lock);
    }
    else if (auto708E87AD_val == c_transmissionDurationAdd) {
        lv_value = (lv_value + IntToFixed(lp_lock));
    }
    else if (auto708E87AD_val == c_transmissionDurationSub) {
        lv_value = (lv_value - IntToFixed(lp_lock));
    }
    else {
        return ;
    }
    if ((lv_value < 0.0)) {
        lv_value = 0.0;
    }
    else {
    }
    UnitSetCustomValue(lp_unit, (0), lv_value);
}

int gf_GetUnitClickableLockCount (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, (0)));
}

int gf_GetUnitClickableRoom (unit lp_unit) {
    // Implementation
    return gf_RoomFromIndex(FixedToInt(UnitGetCustomValue(lp_unit, (1))));
}

void gf_ChangeVisibleUnits (unitgroup lp_units) {
    // Implementation
    gf_RemoveVisibleUnits(false, gv_visibleUnits);
    gf_RemoveVisibleUnits(true, lp_units);
}

void gf_RemoveVisibleUnit (bool lp_addRemove, unit lp_unit) {
    // Implementation
    if ((lp_addRemove == true)) {
        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == true)) {
            return ;
        }
        else {
        }
        UnitGroupAdd(gv_visibleUnits, lp_unit);
        libNtve_gf_ShowHideUnit(lp_unit, true);
        if ((gf_HotspotFlashingPaused(lp_unit) == false)) {
            gf_HideFlashingTextTag(true, lp_unit);
        }
        else {
        }
    }
    else {
        if ((gf_RoomLocationIsEnabled(2) == true)) {
            gf_ShowHideJukeboxTrackInfo(false);
        }
        else {
        }
        if ((gf_RoomLocationIsEnabled(1) == true) && (lp_unit == gv_marSaraJukebox)) {
            gf_ShowHideJukeboxTrackInfo(false);
        }
        else {
        }
        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == false)) {
            return ;
        }
        else {
        }
        UnitGroupRemove(gv_visibleUnits, lp_unit);
        libNtve_gf_ShowHideUnit(lp_unit, false);
        gf_HideFlashingTextTag(false, lp_unit);
    }
}

void gf_RemoveVisibleUnits (bool lp_addRemove, unitgroup lp_units) {
    unitgroup autoF8BA0C0A_g;
    int autoF8BA0C0A_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    autoF8BA0C0A_g = lp_units;
    autoF8BA0C0A_u = 1;
    while (autoF8BA0C0A_u <= UnitGroupCount(autoF8BA0C0A_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoF8BA0C0A_g, autoF8BA0C0A_u);
        gf_RemoveVisibleUnit(lp_addRemove, lv_indexUnit);
        if (lv_indexUnit == UnitGroupUnit(autoF8BA0C0A_g, autoF8BA0C0A_u)) {
            autoF8BA0C0A_u = autoF8BA0C0A_u + 1;
        }
    }
}

void gf_WaitForSkip (fixed lp_timeout, int lp_timeType) {
    // Implementation
    gv_waitForSkipTimeout = lp_timeout;
    gv_waitForSkipTimeType = lp_timeType;
    TriggerExecute(gt_WaitForSkipTrig, true, true);
}

void gf_DisplayBackButton (trigger lp_callback) {
    // Implementation
    gv_backButtonCallback = lp_callback;
    gv_backButtonHidden = false;
    libNtve_gf_DisplayScreenButton((1), StringExternal("Param/Value/30BF56DA"), 240, 80, c_anchorBottomRight, 50, 70, gt_BackButtonClicked);
    gf_FromatBackPlayButton(libNtve_gf_ScreenButton((1)));
    TriggerExecute(gt_BackButtonEscape, true, false);
}

void gf_FromatBackPlayButton (int lp_button) {
    // Implementation
    DialogControlSetSize(lp_button, PlayerGroupAll(), 240, 80);
    libNtve_gf_SetDialogItemImageType(lp_button, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lp_button, "Assets\\Textures\\ui_button_generic_greenglow_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(lp_button, "StoryModePlayBackButton", PlayerGroupAll());
}

void gf_HideBackButton (bool lp_showHide) {
    // Implementation
    libNtve_gf_HideScreenButton(lp_showHide, (1));
    if ((lp_showHide == false)) {
        gv_backButtonHidden = true;
    }
    else {
        gv_backButtonHidden = false;
    }
}

void gf_BackButtonBack () {
    // Implementation
    libNtve_gf_HideScreenButton(false, (1));
    TriggerExecute(gv_backButtonCallback, true, false);
}

void gf_TBDWindow (text lp_message, trigger lp_exitCallback) {
    // Implementation
    gv_tBDWindowExitCallback = lp_exitCallback;
    DialogCreate(800, 600, c_anchorCenter, 0, 0, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    gv_tBDWindowDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 50, 50);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), StringExternal("Param/Value/0AC87428"));
    gv_tBDWindowButtonClose = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 50);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), (StringExternal("Param/Value/99190C9E") + lp_message));
    DialogSetVisible(gv_tBDWindowDialog, PlayerGroupAll(), true);
}

void gf_HighlightUnit (bool lp_highlightUnhighlight, unit lp_unit) {
    // Implementation
    if ((lp_highlightUnhighlight == true)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, ("HaloStart"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_unit, ("HaloStop"));
    }
}

void gf_SetAllSoundChannelVolumesStoryMode (int lp_mode) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Implementation
    if (((lp_mode == 0) || (lp_mode == 1))) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 30.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        gv_soundChannelVolumesRefCount=gv_soundChannelVolumesRefCount + 1;
        return ;
    }
    else {
    }
    if ((lp_mode == 2)) {
        gv_soundChannelVolumesRefCount=gv_soundChannelVolumesRefCount - 1;
        if ((gv_soundChannelVolumesRefCount < 0)) {
            gv_soundChannelVolumesRefCount = 0;
        }
        else {
        }
        if ((gv_soundChannelVolumesRefCount > 0)) {
            return ;
        }
        else {
        }
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 0.5);
        return ;
    }
    else {
    }
}

void gf_FadeOutSoundChannelVolumeForMovie (fixed lp_duration) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
}

void gf_FadeOutAllSoundChannelVolume (fixed lp_duration) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
}

int gf_LastCreatedJukeboxID () {
    // Implementation
    return gv_jukeboxCount;
}

int gf_GetJukeboxID (unit lp_box) {
    int auto21876BAA_as;
    int auto21876BAA_ae;
    int auto21876BAA_ai;

    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Implementation
    auto21876BAA_as = 1;
    auto21876BAA_ae = gv_jukeboxCount;
    auto21876BAA_ai = 1;
    lv_jukeboxID = auto21876BAA_as;
    if (auto21876BAA_ai > 0 || (auto21876BAA_ai == 0 && auto21876BAA_as < auto21876BAA_ae)) {
        while (lv_jukeboxID <= auto21876BAA_ae) {
            if ((lp_box == gv_jukeboxes[lv_jukeboxID].lv_box)) {
                return lv_jukeboxID;
            }
            else {
            }
            lv_jukeboxID = lv_jukeboxID + auto21876BAA_ai;
        }
    }
    else if (auto21876BAA_ai < 0 || (auto21876BAA_ai == 0 && auto21876BAA_ae < auto21876BAA_as)) {
        while (lv_jukeboxID >= auto21876BAA_ae) {
            if ((lp_box == gv_jukeboxes[lv_jukeboxID].lv_box)) {
                return lv_jukeboxID;
            }
            else {
            }
            lv_jukeboxID = lv_jukeboxID + auto21876BAA_ai;
        }
    }
    return -1;
}

void gf_CreateJukebox (unit lp_box, bool lp_startRandom) {
    // Implementation
    gv_jukeboxCount=gv_jukeboxCount + 1;
    gv_jukeboxes[gv_jukeboxCount].lv_box = lp_box;
    gv_jukeboxes[gv_jukeboxCount].lv_startRandom = lp_startRandom;
    gf_AddTrackToJukebox(gv_jukeboxCount, null, null, null);
}

void gf_AddTrackToJukebox (int lp_jukeboxID, soundlink lp_music, text lp_title, text lp_author) {
    // Variable Declarations
    int lv_trackID;

    // Variable Initialization
    lv_trackID = 0;

    // Implementation
    if ((gv_jukeboxes[lp_jukeboxID].lv_trackCount == 0)) {
        gv_jukeboxes[lp_jukeboxID].lv_trackCount=gv_jukeboxes[lp_jukeboxID].lv_trackCount + 1;
        lv_trackID = gv_jukeboxes[lp_jukeboxID].lv_trackCount;
        gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID] = lp_music;
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID] = lp_title;
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID] = lp_author;
    }
    else {
        lv_trackID = gv_jukeboxes[lp_jukeboxID].lv_trackCount;
        gv_jukeboxes[lp_jukeboxID].lv_trackCount=gv_jukeboxes[lp_jukeboxID].lv_trackCount + 1;
        gv_jukeboxes[lp_jukeboxID].lv_tracks[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[(lv_trackID + 1)] = gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID];
        gv_jukeboxes[lp_jukeboxID].lv_tracks[lv_trackID] = lp_music;
        gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_trackID] = lp_title;
        gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_trackID] = lp_author;
    }
    SoundLengthQuery(lp_music);
}

void gf_SetJukeboxFidget (int lp_jukeboxID, string lp_trackFidgetSet, string lp_turnOffFidgetSet) {
    // Implementation
    gv_jukeboxes[lp_jukeboxID].lv_fidgetSetTrack = lp_trackFidgetSet;
    gv_jukeboxes[lp_jukeboxID].lv_fidgetSetTurnOff = lp_turnOffFidgetSet;
}

void gf_JukeboxClicked (unit lp_jukebox) {
    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Implementation
    lv_jukeboxID = gf_GetJukeboxID(lp_jukebox);
    if ((lv_jukeboxID < 0)) {
        return ;
    }
    else {
    }
    if ((gv_terranUpTheNightPlaying == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    }
    else {
    }
    gv_tP_JukeboxID = lv_jukeboxID;
    TriggerExecute(gt_JukeboxClicked, true, false);
}

void gf_JukeboxNextTrack (int lp_jukeboxID, bool lp_withComments) {
    // Variable Declarations
    int lv_sessionID;

    // Variable Initialization
    lv_sessionID = 0;

    // Implementation
    lv_sessionID = gv_jukeboxes[lp_jukeboxID].lv_playback.lv_sessionID;
    TriggerDebugOutput(1, (StringExternal("Param/Value/D3B1D2B5") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lp_jukeboxID].lv_startRandom) + StringExternal("Param/Value/A67D1B1C") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_startedBefore)), false);
    if ((gv_jukeboxes[lp_jukeboxID].lv_startRandom == true) && (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_startedBefore == false)) {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent = RandomInt(1, 5);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent=gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent + 1;
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent > gv_jukeboxes[lp_jukeboxID].lv_trackCount)) {
            gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent = 1;
        }
        else {
        }
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/C4DAEF83") + IntToText(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent)), false);
    if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music != null)) {
        SoundStop(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, true);
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music = null;
    }
    else {
    }
    gv_tP_JukeboxID = lp_jukeboxID;
    TriggerExecute(gt_JukeboxTrackAnimation, true, false);
    if ((lp_withComments == true)) {
        TriggerExecute(gt_JukeboxTrackComments, true, true);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackCommentsDone = true;
    }
    while (!(((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackAnimationDone == true) && (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_nextTrackCommentsDone == true)))) {
        Wait(0.25, c_timeReal);
    }
    gv_tP_JukeboxID = lp_jukeboxID;
    gv_tP_JukeboxSessionIDLocal = lv_sessionID;
    TriggerExecute(gt_JukeboxTrackLoop, true, false);
}

void gf_JukeboxUpdateTrackInfo (int lp_jukeboxID) {
    int auto2FB17D52_val;

    // Variable Declarations
    text lv_title;
    text lv_author;
    int lv_currentTrack;

    // Variable Initialization
    lv_title = null;
    lv_author = null;
    lv_currentTrack = 0;

    // Implementation
    if ((gv_jukeboxTrackTitle != c_textTagNone)) {
        TextTagDestroy(gv_jukeboxTrackTitle);
        gv_jukeboxTrackTitle = c_textTagNone;
    }
    else {
    }
    lv_currentTrack = gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent;
    if (((lv_currentTrack <= 0) || (lv_currentTrack == gv_jukeboxes[lp_jukeboxID].lv_trackCount))) {
        return ;
    }
    else {
    }
    lv_title = gv_jukeboxes[lp_jukeboxID].lv_trackTitle[lv_currentTrack];
    lv_author = gv_jukeboxes[lp_jukeboxID].lv_trackAuthor[lv_currentTrack];
    TextTagCreate((TextReplaceWord(StringExternal("Param/Value/2519AF5D"), StringExternal("Param/Value/D67E2367"), lv_author, c_stringReplaceAll, c_stringCase) + TextReplaceWord(StringExternal("Param/Value/344F6720"), StringExternal("Param/Value/A281DAD4"), lv_title, c_stringReplaceAll, c_stringCase)), 32, UnitGetPosition(gf_BriefingScreen(2, 2)), 0.0, false, false, PlayerGroupAll());
    gv_jukeboxTrackTitle = TextTagLastCreated();
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.8, 0.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\white.dds", false);
    TextTagSetBackgroundOffset(TextTagLastCreated(), 0.0, 0.25);
    auto2FB17D52_val = lp_jukeboxID;
    if (auto2FB17D52_val == gv_marSaraJukeboxID) {
        TextTagSetMaxSize(TextTagLastCreated(), 17.0, 400.0);
        TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignTop);
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignLeft, c_alignTop);
        TextTagAttachToUnitPoint(TextTagLastCreated(), gv_jukeboxes[lp_jukeboxID].lv_box, "Ref_StatusBar", 127, -290);
    }
    else {
    }
    TextTagSetTextShadow(TextTagLastCreated(), true);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorBackground, ColorWithAlpha(6.27, 14.51, 19.61, 80.00));
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 1.0);
    if ((gf_CurrentWorldMode() == 0)) {
        gf_ShowHideJukeboxTrackInfo(true);
    }
    else {
        gf_ShowHideJukeboxTrackInfo(false);
    }
}

void gf_ShowHideJukeboxTrackInfo (bool lp_showHide) {
    // Implementation
    if ((lp_showHide == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_marSaraJukebox, 1) == false)) {
        return ;
    }
    else {
    }
    TextTagShow(gv_jukeboxTrackTitle, PlayerGroupAll(), lp_showHide);
}

void gf_MuteJukebox (bool lp_muteUnmute, int lp_jukeboxID) {
    // Implementation
    if ((lp_muteUnmute == true)) {
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted == false)) {
            gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted = true;
            gf_FadeJukeboxVolumeOverTime(lp_jukeboxID);
        }
        else {
        }
        TriggerDebugOutput(1, (StringExternal("Param/Value/ABC761A1")), false);
    }
    else {
        gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted = false;
        if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music != null) && (gv_terranUpTheNightPlaying == false)) {
            SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, 100.0);
        }
        else {
        }
        TriggerDebugOutput(1, (StringExternal("Param/Value/9F2D41DF")), false);
    }
}

bool gf_JukeboxIsShutdown (int lp_jukeboxID) {
    // Implementation
    if (((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent < 1) || (gv_jukeboxes[lp_jukeboxID].lv_playback.lv_trackCurrent >= gv_jukeboxes[lp_jukeboxID].lv_trackCount))) {
        return true;
    }
    else {
    }
    return false;
}

void gf_AddPinboard (int lp_iD, string lp_genericFidget, unit lp_board, int lp_room, string lp_zoomCamera, string lp_zoomAnimation, fixed lp_zoomDuration, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration, soundlink lp_highlightSound) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = (lp_iD);
    gv_pinboards[lv_index].lv_iD = lp_iD;
    gv_pinboards[lv_index].lv_itemCount = 0;
    gv_pinboards[lv_index].lv_genericFidgetSet = lp_genericFidget;
    gv_pinboards[lv_index].lv_pinboard = lp_board;
    gv_pinboards[lv_index].lv_room = lp_room;
    gv_pinboards[lv_index].lv_zoomCamera = lp_zoomCamera;
    gv_pinboards[lv_index].lv_zoomAnimation = lp_zoomAnimation;
    gv_pinboards[lv_index].lv_zoomDuration = lp_zoomDuration;
    gv_pinboards[lv_index].lv_zoomBackCamera = lp_zoomBackCamera;
    gv_pinboards[lv_index].lv_zoomBackAnimation = lp_zoomBackAnimation;
    gv_pinboards[lv_index].lv_zoomBackDuration = lp_zoomBackDuration;
    gv_pinboards[lv_index].lv_range = 1;
    gv_pinboards[lv_index].lv_highlight = 0;
    gv_pinboards[lv_index].lv_highlightSound = lp_highlightSound;
}

void gf_AddPinboardItem (int lp_item, string lp_fidgetSet, unit lp_itemUnit, soundlink lp_activateSound) {
    // Variable Declarations
    int lv_itemIndex;

    // Variable Initialization
    lv_itemIndex = 0;

    // Implementation
    lv_itemIndex = (lp_item);
    gv_pinboardItems[lv_itemIndex].lv_iD = lp_item;
    gv_pinboardItems[lv_itemIndex].lv_fidgetSet = lp_fidgetSet;
    gv_pinboardItems[lv_itemIndex].lv_item = lp_itemUnit;
    gv_pinboardItems[lv_itemIndex].lv_activateSound = lp_activateSound;
    gv_pinboardItems[lv_itemIndex].lv_showHide = true;
}

void gf_AddPinboardItemToPinboard (int lp_pinboard, int lp_item) {
    // Variable Declarations
    int lv_pBIndex;

    // Variable Initialization
    lv_pBIndex = 0;

    // Implementation
    lv_pBIndex = (lp_pinboard);
    gv_pinboards[lv_pBIndex].lv_itemCount=gv_pinboards[lv_pBIndex].lv_itemCount + 1;
    gv_pinboards[lv_pBIndex].lv_items[gv_pinboards[lv_pBIndex].lv_itemCount] = lp_item;
}

void gf_HidePinboardItem (bool lp_showHide, int lp_item) {
    // Implementation
    gv_pinboardItems[(lp_item)].lv_showHide = lp_showHide;
}

void gf_HighlightPinboard (int lp_pinbaord, bool lp_hightlight, unit lp_unhighlightedUnit) {
    // Variable Declarations
    int lv_pbindex;
    unitgroup lv_itemGroup;
    unit lv_item;

    // Variable Initialization
    lv_pbindex = 0;
    lv_itemGroup = UnitGroupEmpty();
    lv_item = null;

    // Implementation
    lv_pbindex = (lp_pinbaord);
    lv_itemGroup = gf_GetPinboardItemGroup(lp_pinbaord);
    gf_HighlightUnit(lp_hightlight, gv_pinboards[lv_pbindex].lv_pinboard);
}

void gf_PreparePinboard (int lp_pinboard) {
    int auto08DAD803_as;
    int auto08DAD803_ae;
    int auto08DAD803_ai;

    // Variable Declarations
    int lv_pbIndex;
    int lv_pbitemIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Variable Initialization
    lv_pbIndex = 0;
    lv_pbitemIndex = 0;
    lv_itemIndex = 0;
    lv_itemGroup = UnitGroupEmpty();

    // Implementation
    lv_pbIndex = (lp_pinboard);
    gf_RemoveVisibleUnit(true, gv_pinboards[lv_pbIndex].lv_pinboard);
    auto08DAD803_as = gv_pBITEM_FIRST;
    auto08DAD803_ae = gv_pBITEM_LAST;
    auto08DAD803_ai = 1;
    lv_itemIndex = auto08DAD803_as;
    if (auto08DAD803_ai > 0 || (auto08DAD803_ai == 0 && auto08DAD803_as < auto08DAD803_ae)) {
        while (lv_itemIndex <= auto08DAD803_ae) {
            gf_RemoveVisibleUnit(false, gv_pinboardItems[lv_itemIndex].lv_item);
            lv_itemIndex = lv_itemIndex + auto08DAD803_ai;
        }
    }
    else if (auto08DAD803_ai < 0 || (auto08DAD803_ai == 0 && auto08DAD803_ae < auto08DAD803_as)) {
        while (lv_itemIndex >= auto08DAD803_ae) {
            gf_RemoveVisibleUnit(false, gv_pinboardItems[lv_itemIndex].lv_item);
            lv_itemIndex = lv_itemIndex + auto08DAD803_ai;
        }
    }
    lv_itemGroup = gf_GetPinboardItemGroup(lp_pinboard);
    gf_RemoveVisibleUnits(true, lv_itemGroup);
}

int gf_GetPinboardFromUnit (unit lp_unit) {
    int autoE3ABF2A6_as;
    int autoE3ABF2A6_ae;
    int autoE3ABF2A6_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoE3ABF2A6_as = gv_pB_FIRST;
    autoE3ABF2A6_ae = gv_pB_LAST;
    autoE3ABF2A6_ai = 1;
    lv_index = autoE3ABF2A6_as;
    if (autoE3ABF2A6_ai > 0 || (autoE3ABF2A6_ai == 0 && autoE3ABF2A6_as < autoE3ABF2A6_ae)) {
        while (lv_index <= autoE3ABF2A6_ae) {
            if ((gv_pinboards[lv_index].lv_pinboard == lp_unit)) {
                return gv_pinboards[lv_index].lv_iD;
            }
            else {
            }
            lv_index = lv_index + autoE3ABF2A6_ai;
        }
    }
    else if (autoE3ABF2A6_ai < 0 || (autoE3ABF2A6_ai == 0 && autoE3ABF2A6_ae < autoE3ABF2A6_as)) {
        while (lv_index >= autoE3ABF2A6_ae) {
            if ((gv_pinboards[lv_index].lv_pinboard == lp_unit)) {
                return gv_pinboards[lv_index].lv_iD;
            }
            else {
            }
            lv_index = lv_index + autoE3ABF2A6_ai;
        }
    }
    return 0;
}

unit gf_PinboardItem (int lp_item) {
    // Implementation
    return gv_pinboardItems[(lp_item)].lv_item;
}

int gf_GetPinboardItemFromUnit (unit lp_unit) {
    int auto92532577_as;
    int auto92532577_ae;
    int auto92532577_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto92532577_as = gv_pBITEM_FIRST;
    auto92532577_ae = gv_pBITEM_LAST;
    auto92532577_ai = 1;
    lv_index = auto92532577_as;
    if (auto92532577_ai > 0 || (auto92532577_ai == 0 && auto92532577_as < auto92532577_ae)) {
        while (lv_index <= auto92532577_ae) {
            if ((gv_pinboardItems[lv_index].lv_item == lp_unit)) {
                return gv_pinboardItems[lv_index].lv_iD;
            }
            else {
            }
            lv_index = lv_index + auto92532577_ai;
        }
    }
    else if (auto92532577_ai < 0 || (auto92532577_ai == 0 && auto92532577_ae < auto92532577_as)) {
        while (lv_index >= auto92532577_ae) {
            if ((gv_pinboardItems[lv_index].lv_item == lp_unit)) {
                return gv_pinboardItems[lv_index].lv_iD;
            }
            else {
            }
            lv_index = lv_index + auto92532577_ai;
        }
    }
    return 0;
}

unitgroup gf_GetPinboardItemGroup (int lp_pinboard) {
    int autoCCB1DE84_as;
    int autoCCB1DE84_ae;
    int autoCCB1DE84_ai;

    // Variable Declarations
    int lv_pbIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Variable Initialization
    lv_pbIndex = 0;
    lv_itemIndex = 0;
    lv_itemGroup = UnitGroupEmpty();

    // Implementation
    lv_pbIndex = (lp_pinboard);
    autoCCB1DE84_as = gv_pBITEM_FIRST;
    autoCCB1DE84_ae = gv_pBITEM_LAST;
    autoCCB1DE84_ai = 1;
    lv_itemIndex = autoCCB1DE84_as;
    if (autoCCB1DE84_ai > 0 || (autoCCB1DE84_ai == 0 && autoCCB1DE84_as < autoCCB1DE84_ae)) {
        while (lv_itemIndex <= autoCCB1DE84_ae) {
            if ((gf_PinboardItemIsOnPinboard(lp_pinboard, gv_pinboardItems[lv_itemIndex].lv_iD) == true)) {
                UnitGroupAdd(lv_itemGroup, gv_pinboardItems[lv_itemIndex].lv_item);
            }
            else {
            }
            lv_itemIndex = lv_itemIndex + autoCCB1DE84_ai;
        }
    }
    else if (autoCCB1DE84_ai < 0 || (autoCCB1DE84_ai == 0 && autoCCB1DE84_ae < autoCCB1DE84_as)) {
        while (lv_itemIndex >= autoCCB1DE84_ae) {
            if ((gf_PinboardItemIsOnPinboard(lp_pinboard, gv_pinboardItems[lv_itemIndex].lv_iD) == true)) {
                UnitGroupAdd(lv_itemGroup, gv_pinboardItems[lv_itemIndex].lv_item);
            }
            else {
            }
            lv_itemIndex = lv_itemIndex + autoCCB1DE84_ai;
        }
    }
    return lv_itemGroup;
}

bool gf_PinboardItemIsOnPinboard (int lp_pinboard, int lp_item) {
    int auto74455492_as;
    int auto74455492_ae;
    int auto74455492_ai;

    // Variable Declarations
    int lv_pbIndex;
    int lv_itemIndex;

    // Variable Initialization
    lv_pbIndex = 0;
    lv_itemIndex = 0;

    // Implementation
    if ((gv_pinboardItems[(lp_item)].lv_showHide != true)) {
        return false;
    }
    else {
    }
    lv_pbIndex = (lp_pinboard);
    auto74455492_as = 1;
    auto74455492_ae = gv_pinboards[lv_pbIndex].lv_itemCount;
    auto74455492_ai = 1;
    lv_itemIndex = auto74455492_as;
    if (auto74455492_ai > 0 || (auto74455492_ai == 0 && auto74455492_as < auto74455492_ae)) {
        while (lv_itemIndex <= auto74455492_ae) {
            if ((gv_pinboards[lv_pbIndex].lv_items[lv_itemIndex] == lp_item)) {
                return true;
            }
            else {
            }
            lv_itemIndex = lv_itemIndex + auto74455492_ai;
        }
    }
    else if (auto74455492_ai < 0 || (auto74455492_ai == 0 && auto74455492_ae < auto74455492_as)) {
        while (lv_itemIndex >= auto74455492_ae) {
            if ((gv_pinboards[lv_pbIndex].lv_items[lv_itemIndex] == lp_item)) {
                return true;
            }
            else {
            }
            lv_itemIndex = lv_itemIndex + auto74455492_ai;
        }
    }
    return false;
}

int gf_GetPinboardOfItem (int lp_item) {
    int autoE7663CD8_as;
    int autoE7663CD8_ae;
    int autoE7663CD8_ai;

    // Variable Declarations
    int lv_pbindex;

    // Variable Initialization
    lv_pbindex = 0;

    // Implementation
    autoE7663CD8_as = gv_pB_FIRST;
    autoE7663CD8_ae = gv_pB_LAST;
    autoE7663CD8_ai = 1;
    lv_pbindex = autoE7663CD8_as;
    if (autoE7663CD8_ai > 0 || (autoE7663CD8_ai == 0 && autoE7663CD8_as < autoE7663CD8_ae)) {
        while (lv_pbindex <= autoE7663CD8_ae) {
            if ((gf_PinboardItemIsOnPinboard(gv_pinboards[lv_pbindex].lv_iD, lp_item) == true)) {
                return gv_pinboards[lv_pbindex].lv_iD;
            }
            else {
            }
            lv_pbindex = lv_pbindex + autoE7663CD8_ai;
        }
    }
    else if (autoE7663CD8_ai < 0 || (autoE7663CD8_ai == 0 && autoE7663CD8_ae < autoE7663CD8_as)) {
        while (lv_pbindex >= autoE7663CD8_ae) {
            if ((gf_PinboardItemIsOnPinboard(gv_pinboards[lv_pbindex].lv_iD, lp_item) == true)) {
                return gv_pinboards[lv_pbindex].lv_iD;
            }
            else {
            }
            lv_pbindex = lv_pbindex + autoE7663CD8_ai;
        }
    }
    return 0;
}

int gf_GetCurrentPinboardItem () {
    // Implementation
    return gv_pinboardItemCurrent;
}

void gf_UpdateNewItems () {
    int auto56AD9FF7_as;
    int auto56AD9FF7_ae;
    int auto56AD9FF7_ai;

    // Variable Declarations
    int lv_index;
    int lv_roomIndex;
    int lv_actorIndex;
    int lv_objectiveIndex;
    fixed lv_offsetY;

    // Variable Initialization
    lv_index = 0;
    lv_roomIndex = 0;
    lv_actorIndex = 0;
    lv_objectiveIndex = 0;
    lv_offsetY = 0.0;

    // Implementation
    lv_offsetY = -1.0;
    auto56AD9FF7_as = 1;
    auto56AD9FF7_ae = gv_newItemsCount;
    auto56AD9FF7_ai = 1;
    lv_index = auto56AD9FF7_as;
    if (auto56AD9FF7_ai > 0 || (auto56AD9FF7_ai == 0 && auto56AD9FF7_as < auto56AD9FF7_ae)) {
        while (lv_index <= auto56AD9FF7_ae) {
            if ((gv_newItems[lv_index].lv_type != 0)) {
                lv_offsetY=lv_offsetY + 1.0;
                if ((gv_newItems[lv_index].lv_dialog == c_invalidDialogId)) {
                    gf_CreateNewItem(lv_index, lv_offsetY);
                }
                else {
                    gf_MoveNewItem(lv_index, lv_offsetY, 1.0);
                }
            }
            else {
                gf_DestoryNewItem(lv_index);
            }
            lv_index = lv_index + auto56AD9FF7_ai;
        }
    }
    else if (auto56AD9FF7_ai < 0 || (auto56AD9FF7_ai == 0 && auto56AD9FF7_ae < auto56AD9FF7_as)) {
        while (lv_index >= auto56AD9FF7_ae) {
            if ((gv_newItems[lv_index].lv_type != 0)) {
                lv_offsetY=lv_offsetY + 1.0;
                if ((gv_newItems[lv_index].lv_dialog == c_invalidDialogId)) {
                    gf_CreateNewItem(lv_index, lv_offsetY);
                }
                else {
                    gf_MoveNewItem(lv_index, lv_offsetY, 1.0);
                }
            }
            else {
                gf_DestoryNewItem(lv_index);
            }
            lv_index = lv_index + auto56AD9FF7_ai;
        }
    }
}

void gf_NewItemAvailable (int lp_type, text lp_text, string lp_imagePortrait, string lp_modelFlash, fixed lp_duration, int lp_customData) {
    // Implementation
    gv_tP_NEWITEMAVAILABLE_Type = lp_type;
    gv_tP_NEWITEMAVAILABLE_Text = lp_text;
    gv_tP_NEWITEMAVAILABLE_ImagePortrait = lp_imagePortrait;
    gv_tP_NEWITEMAVAILABLE_ModelFlash = lp_modelFlash;
    gv_tP_NEWITEMAVAILABLE_Duratioin = lp_duration;
    gv_tP_NEWITEMAVAILABLE_CustomData = lp_customData;
    TriggerExecute(gt_NewItemAvailable, true, false);
}

void gf_PauseNewItemInfo (bool lp_pauseUnpause) {
    int autoB7D1E2CA_as;
    int autoB7D1E2CA_ae;
    int autoB7D1E2CA_ai;

    // Variable Declarations
    int lv_index;
    bool lv_showHide;

    // Variable Initialization
    lv_index = 0;
    lv_showHide = true;

    // Implementation
    TriggerQueuePause(lp_pauseUnpause);
    if ((lp_pauseUnpause == true)) {
        gv_newItemInfoPaused = true;
        lv_showHide = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/5197FC87"), false);
    }
    else {
        gv_newItemInfoPaused = false;
        lv_showHide = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/147DBE51"), false);
    }
    autoB7D1E2CA_as = 1;
    autoB7D1E2CA_ae = gv_newItemsCount;
    autoB7D1E2CA_ai = 1;
    lv_index = autoB7D1E2CA_as;
    if (autoB7D1E2CA_ai > 0 || (autoB7D1E2CA_ai == 0 && autoB7D1E2CA_as < autoB7D1E2CA_ae)) {
        while (lv_index <= autoB7D1E2CA_ae) {
            gf_HideNewItem(lv_showHide, lv_index);
            lv_index = lv_index + autoB7D1E2CA_ai;
        }
    }
    else if (autoB7D1E2CA_ai < 0 || (autoB7D1E2CA_ai == 0 && autoB7D1E2CA_ae < autoB7D1E2CA_as)) {
        while (lv_index >= autoB7D1E2CA_ae) {
            gf_HideNewItem(lv_showHide, lv_index);
            lv_index = lv_index + autoB7D1E2CA_ai;
        }
    }
}

void gf_CreateNewItem (int lp_newItemIndex, fixed lp_offset) {
    // Implementation
    gv_tP_CreateNewItem_NewItemIndex = lp_newItemIndex;
    gv_tP_CreateNewItem_Offset = lp_offset;
    TriggerExecute(gt_CreateNewItem, true, false);
}

void gf_WaitNewItemInfoDisplayDuration (int lp_newItemIndex) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = 0;
    while (true) {
        if ((lv_index > 50)) {
            break;
        }
        else {
        }
        Wait(0.1, c_timeReal);
        if ((gv_newItemInfoPaused == false)) {
            lv_index=lv_index + 1;
        }
        else {
        }
    }
}

void gf_MoveNewItem (int lp_newItemIndex, fixed lp_offsetY, fixed lp_duration) {
    // Variable Declarations
    fixed lv_offsetYOriginal;
    fixed lv_incrementOffset;
    fixed lv_incrementTime;
    int lv_moveCount;

    // Variable Initialization
    lv_offsetYOriginal = 0.0;
    lv_incrementOffset = 0.0;
    lv_incrementTime = 0.0;
    lv_moveCount = 0;

    // Implementation
    gv_tP_MoveNewItem_NewItemIndex = lp_newItemIndex;
    gv_tP_MoveNewItem_OffsetY = lp_offsetY;
    gv_tP_MoveNewItem_Duration = lp_duration;
    TriggerExecute(gt_MoveNewItem, true, false);
}

void gf_MoveNewItemInstant (int lp_newItemIndex, fixed lp_offsetY) {
    // Implementation
    libCamp_gf_MoveDialogInGrid(gv_newItems[lp_newItemIndex].lv_dialog, c_anchorTopLeft, -0.5, lp_offsetY);
    gf_MoveNewItemFlashInstant(lp_newItemIndex);
}

void gf_MoveNewItemFlashInstant (int lp_newItemIndex) {
    // Implementation
    PortraitSetPosition(gv_newItems[lp_newItemIndex].lv_flash, c_anchorTopLeft, 0, (DialogGetOffsetY(gv_newItems[lp_newItemIndex].lv_dialog) + 20));
}

void gf_RemoveNewItem (int lp_newItemIndex) {
    // Implementation
    gv_tP_NewItemBeingRemoved = lp_newItemIndex;
    TriggerExecute(gt_RemoveNewItem, true, false);
}

void gf_DestoryNewItem (int lp_newItemIndex) {
    // Implementation
    gv_newItems[lp_newItemIndex].lv_type = 0;
    gv_newItems[lp_newItemIndex].lv_text = null;
    if ((gv_newItems[lp_newItemIndex].lv_dialog != c_invalidDialogId)) {
        DialogDestroy(gv_newItems[lp_newItemIndex].lv_dialog);
        gv_newItems[lp_newItemIndex].lv_dialog = c_invalidDialogId;
    }
    else {
    }
    gv_newItems[lp_newItemIndex].lv_label = c_invalidDialogControlId;
    if ((gv_newItems[lp_newItemIndex].lv_flash != c_invalidPortraitId)) {
        PortraitDestroy(gv_newItems[lp_newItemIndex].lv_flash);
        gv_newItems[lp_newItemIndex].lv_flash = c_invalidPortraitId;
    }
    else {
    }
    gv_newItems[lp_newItemIndex].lv_beingRemoved = false;
}

void gf_HideNewItem (bool lp_hideShow, int lp_newItemIndex) {
    // Implementation
    if ((gv_newItems[lp_newItemIndex].lv_dialog != c_invalidDialogId)) {
        DialogSetVisible(gv_newItems[lp_newItemIndex].lv_dialog, PlayerGroupAll(), lp_hideShow);
    }
    else {
    }
    if ((gv_newItems[lp_newItemIndex].lv_flash != c_invalidPortraitId)) {
        PortraitSetVisible(gv_newItems[lp_newItemIndex].lv_flash, PlayerGroupAll(), lp_hideShow, false);
    }
    else {
    }
}

void gf_ResearchUnlock (int lp_research) {
    int autoA2972B36_val;

    // Variable Declarations
    string lv_image;
    text lv_name;

    // Variable Initialization
    lv_name = null;

    // Implementation
    lv_image = libCamp_gf_StoryResearchIcon(lp_research);
    autoA2972B36_val = libCamp_gf_StoryResearchCategory(lp_research);
    if (autoA2972B36_val == 1) {
        lv_name = StringExternal("Param/Value/35369D3D");
    }
    else if (autoA2972B36_val == 2) {
        lv_name = StringExternal("Param/Value/C84488FD");
    }
    else {
    }
    lv_name = (lv_name + libCamp_gf_StoryResearchName(lp_research) + StringExternal("Param/Value/913F4311"));
    gf_NewItemAvailable(4, (StringExternal("Param/Value/F15BC524") + lv_name), lv_image, "UIActivateCharacterPortrait", gv_c_NEWITEMINFO_DURATION, (lp_research));
}

void gf_NewMercenary (int lp_mercID) {
    // Implementation
    gf_NewItemAvailable(7, (StringExternal("Param/Value/946213E0") + libCamp_gf_MercName(lp_mercID) + StringExternal("Param/Value/EE7D99B0")), libCamp_gf_StoryTechGroupIcon(libCamp_gf_MercTechSubgroup(lp_mercID, 1)), "UIActivateRoomPortrait", gv_c_NEWITEMINFO_DURATION, (lp_mercID));
}

int gf_CurrentWorldMode () {
    // Implementation
    return gv_worldMode;
}

int gf_CurrentIdleState () {
    // Implementation
    if ((gv_idleStateLockCount > 0)) {
        return 0;
    }
    else {
    }
    return 1;
}

void gf_WaitForWorldMode (int lp_worldMode) {
    // Implementation
    if ((gf_CurrentWorldMode() == lp_worldMode)) {
        return ;
    }
    else {
    }
    while (!((gf_CurrentWorldMode() == lp_worldMode))) {
        Wait(0.5, c_timeReal);
    }
}

void gf_WaitForIdleState (int lp_idleState) {
    // Implementation
    if ((gf_CurrentIdleState() == lp_idleState)) {
        return ;
    }
    else {
    }
    while (!((gf_CurrentIdleState() == lp_idleState))) {
        Wait(0.5, c_timeReal);
    }
}

void gf_WaitForGlobalIdle () {
    // Implementation
    while (!((gf_CurrentWorldMode() == 0) && (gf_CurrentIdleState() == 1))) {
        Wait(0.5, c_timeGame);
    }
}

void gf_SetWorldMode (int lp_mode) {
    // Implementation
    gv_worldMode = lp_mode;
}

void gf_SetIdleState (int lp_idleState) {
    int auto0FEF1C63_val;

    // Implementation
    auto0FEF1C63_val = lp_idleState;
    if (auto0FEF1C63_val == 0) {
        gv_idleStateLockCount=gv_idleStateLockCount + 1;
    }
    else if (auto0FEF1C63_val == 1) {
        gv_idleStateLockCount=gv_idleStateLockCount - 1;
        if ((gv_idleStateLockCount < 0)) {
            gv_idleStateLockCount = 0;
        }
        else {
        }
    }
    else {
    }
}

void gf_DisplayFullScreenImage (string lp_image) {
    // Implementation
    if ((gv_fullscreenImageDialog == c_invalidDialogId)) {
        DialogCreate(2119, 1200, c_anchorCenter, 0, 0, true);
        gv_fullscreenImageDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    else {
    }
    if ((gv_fullscreenImageDialogImage == c_invalidDialogControlId)) {
        DialogControlCreate(gv_fullscreenImageDialog, c_triggerControlTypeImage);
        gv_fullscreenImageDialogImage = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/389A3D3E"), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StorySetLoading", PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_SetDialogItemImage(gv_fullscreenImageDialogImage, lp_image, PlayerGroupAll());
    DialogControlSetFullDialog(gv_fullscreenImageDialogImage, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_fullscreenImageDialogImage, PlayerGroupAll(), true);
    DialogSetVisible(gv_fullscreenImageDialog, PlayerGroupAll(), true);
}

void gf_HideFullScreenImage (bool lp_showHide) {
    // Implementation
    if ((gv_fullscreenImageDialog == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(gv_fullscreenImageDialog, PlayerGroupAll(), lp_showHide);
}

void gf_MakeUnitLookAtPointAndBlinkWithDebugControl (unit lp_unit, string lp_type, point lp_point) {
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        if ((lp_type != "InstantHeadOnly") && (lp_type != "InstantHeadOnlySubtle") && (lp_type != "InstantStanding") && (lp_type != "InstantStandingSubtle")) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), "Blink", "Stand Blink", c_animFlagNonLooping, c_animTimeDefault);
        }
        else {
        }
    }
    else {
    }
    gf_MakeUnitLookAtPointWithDebugControl(lp_unit, lp_type, lp_point);
}

void gf_MakeUnitLookAtPointWithDebugControl (unit lp_unit, string lp_type, point lp_point) {
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        libNtve_gf_MakeUnitLookAtPoint(lp_unit, lp_type, lp_point);
    }
    else {
    }
}

void gf_MakeUnitLookAtUnitAndBlinkWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        if ((lp_type != "InstantHeadOnly") && (lp_type != "InstantHeadOnlySubtle") && (lp_type != "InstantStanding") && (lp_type != "InstantStandingSubtle")) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), "Blink", "Stand Blink", c_animFlagNonLooping, c_animTimeDefault);
        }
        else {
        }
    }
    else {
    }
    gf_MakeUnitLookAtUnitWithDebugControl(lp_unit, lp_type, lp_lookAtTargetUnit, lp_attachPoint);
}

void gf_MakeUnitLookAtUnitWithDebugControl (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Implementation
    if ((gv_lookAtEnabled == true)) {
        libNtve_gf_MakeUnitLookAtUnit(lp_unit, lp_type, lp_lookAtTargetUnit, lp_attachPoint);
    }
    else {
    }
}

void gf_DisplayQueryDialog (playergroup lp_players, text lp_show, bool lp_show2) {
    // Implementation
    gv_queryDialogClosed = false;
    gv_queryDialogResult = 0;
    UIShowCustomDialog(lp_players, 1, StringExternal("Param/Value/E532DC8C"), lp_show, lp_show2);
    while (!((gv_queryDialogClosed == true))) {
        Wait(0.1, c_timeReal);
    }
}

int gf_QueryDialogResult () {
    // Implementation
    return gv_queryDialogResult;
}

void gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void gf_TurnActorFidgetOnOffInstantly (int lp_actor, bool lp_onOff) {
    // Implementation
    UnitSetState(gf_ActorUnit(lp_actor), c_unitStateFidget, lp_onOff);
    if ((lp_onOff == false)) {
        gf_ClearAnimationwithblendtime(gv_aNIMID_FIDGET, gf_ActorUnit(lp_actor), 0.0);
    }
    else {
    }
}

void gf_TurnAnimationPropertiesOnOffInstantly (unit lp_unit, string lp_property, bool lp_onOff) {
    // Implementation
    gf_TurnAnimationPropertiesOnOff(lp_unit, lp_property, lp_onOff, 0.0);
}

void gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimBlendTimeApply(lp_blend));
    if ((lp_onOff == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimBlendTimeRemove");
}

int gf_ConvertDifficultyToInteger (int lp_campaignDifficulty) {
    int autoCDA8BB84_val;

    // Implementation
    autoCDA8BB84_val = lp_campaignDifficulty;
    if (autoCDA8BB84_val == 1) {
        return 1;
    }
    else if (autoCDA8BB84_val == 2) {
        return 2;
    }
    else if (autoCDA8BB84_val == 3) {
        return 3;
    }
    else if (autoCDA8BB84_val == 4) {
        return 4;
    }
    else {
    }
    return 0;
}

int gf_ConvertIntegerToDifficulty (int lp_value) {
    int autoDC3217B1_val;

    // Implementation
    autoDC3217B1_val = lp_value;
    if (autoDC3217B1_val == 1) {
        return 1;
    }
    else if (autoDC3217B1_val == 2) {
        return 2;
    }
    else if (autoDC3217B1_val == 3) {
        return 3;
    }
    else if (autoDC3217B1_val == 4) {
        return 4;
    }
    else {
    }
    return 2;
}

void gf_PerformFarewellLine (unit lp_speaker, string lp_line, string lp_beforeAnim, string lp_afterAnim, bool lp_waitOption) {
    // Implementation
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lp_speaker, false, false, "Talk"), PortraitGetGame(), "Talk", SoundLink(lp_line, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, lp_waitOption);
}

void gf_PerformFidgetLine (unit lp_speaker, string lp_line, string lp_anim) {
    // Implementation
    if ((lp_anim != "")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_speaker), c_animNameDefault, lp_anim, c_animFlagPlayForever, gv_talkBlendTime);
    }
    else {
    }
    gf_SetAllSoundChannelVolumesStoryMode(1);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lp_speaker, false, false, "Talk"), PortraitGetGame(), "Talk", SoundLink(lp_line, c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    Wait(0.05, c_timeGame);
    if ((lp_anim != "")) {
        gf_ClearAnimationwithblendtime(c_animNameDefault, lp_speaker, c_animTimeDefault);
    }
    else {
    }
}

void gf_ShowHideUnitGroup (bool lp_showHide, unitgroup lp_unitGroup) {
    unitgroup auto1645265F_g;
    int auto1645265F_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    auto1645265F_g = lp_unitGroup;
    auto1645265F_u = 1;
    while (auto1645265F_u <= UnitGroupCount(auto1645265F_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(auto1645265F_g, auto1645265F_u);
        libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        if (lv_indexUnit == UnitGroupUnit(auto1645265F_g, auto1645265F_u)) {
            auto1645265F_u = auto1645265F_u + 1;
        }
    }
}

void gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection (unit lp_unit, point lp_targetPoint, int lp_orderQueue) {
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), lp_orderQueue);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lp_targetPoint, 10.0, PointGetFacing(lp_targetPoint))), c_orderQueueAddToEnd);
}

point gf_UnitMovingTarget (unit lp_unit) {
    int auto08C32D67_as;
    int auto08C32D67_ae;
    int auto08C32D67_ai;

    // Variable Declarations
    int lv_orderCount;
    int lv_orderIndex;
    order lv_order;

    // Variable Initialization
    lv_orderCount = 0;
    lv_orderIndex = 0;
    lv_order = null;

    // Implementation
    lv_orderCount = UnitOrderCount(lp_unit);
    auto08C32D67_as = 0;
    auto08C32D67_ae = (lv_orderCount - 1);
    auto08C32D67_ai = 1;
    lv_orderIndex = auto08C32D67_as;
    if (auto08C32D67_ai > 0 || (auto08C32D67_ai == 0 && auto08C32D67_as < auto08C32D67_ae)) {
        while (lv_orderIndex <= auto08C32D67_ae) {
            lv_order = UnitOrder(lp_unit, lv_orderIndex);
            if ((AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)) == "move")) {
                return OrderGetTargetPoint(lv_order);
            }
            else {
            }
            lv_orderIndex = lv_orderIndex + auto08C32D67_ai;
        }
    }
    else if (auto08C32D67_ai < 0 || (auto08C32D67_ai == 0 && auto08C32D67_ae < auto08C32D67_as)) {
        while (lv_orderIndex >= auto08C32D67_ae) {
            lv_order = UnitOrder(lp_unit, lv_orderIndex);
            if ((AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)) == "move")) {
                return OrderGetTargetPoint(lv_order);
            }
            else {
            }
            lv_orderIndex = lv_orderIndex + auto08C32D67_ai;
        }
    }
    return null;
}

void gf_StopAllTransmissionConversation () {
    // Implementation
    TransmissionClearAll();
    ConversationDataStop();
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal StopSMEventSounds");
}

point gf_RelativePoint (point lp_source, point lp_sourceCenter, point lp_targetCenter, fixed lp_xRatio, fixed lp_yRatio, fixed lp_rotate) {
    // Variable Declarations
    fixed lv_x1;
    fixed lv_y1;
    fixed lv_x2;
    fixed lv_y2;
    point lv_sourceAfterScaled;
    fixed lv_dis;
    fixed lv_angel;
    point lv_ret;

    // Variable Initialization
    lv_x1 = 0.0;
    lv_y1 = 0.0;
    lv_x2 = 0.0;
    lv_y2 = 0.0;
    lv_sourceAfterScaled = null;
    lv_dis = 0.0;
    lv_angel = 0.0;
    lv_ret = null;

    // Implementation
    lv_x1 = PointGetX(lp_sourceCenter);
    lv_y1 = PointGetY(lp_sourceCenter);
    lv_x2 = PointGetX(lp_source);
    lv_y2 = PointGetY(lp_source);
    lv_sourceAfterScaled = Point((lv_x1 + ((lv_x2 - lv_x1) * lp_xRatio)), (lv_y1 + ((lv_y2 - lv_y1) * lp_yRatio)));
    lv_dis = DistanceBetweenPoints(lp_sourceCenter, lv_sourceAfterScaled);
    lv_angel = AngleBetweenPoints(lp_sourceCenter, lv_sourceAfterScaled);
    lv_angel=lv_angel + lp_rotate;
    lv_ret = PointWithOffsetPolar(lp_targetCenter, lv_dis, lv_angel);
    PointSetFacing(lv_ret, (PointGetFacing(lp_source) + lp_rotate));
    return lv_ret;
}

void gf_Ambience_FadeSoundVolumeOverTime (soundlink lp_soundLink, sound lp_sound, fixed lp_time) {
    sound auto8378F9DE_val;

    // Variable Declarations
    fixed lv_timeInterval;
    fixed lv_volumeChange;
    fixed lv_elapsed;
    fixed lv_volume;

    // Variable Initialization
    lv_timeInterval = 0.0625;
    lv_volumeChange = 0.0;
    lv_elapsed = 0.0;
    lv_volume = 0.0;

    // Implementation
    if ((lp_time > 0.0)) {
        lv_volume = 100.0;
        lv_volumeChange = ((100.0 * lv_timeInterval) / lp_time);
        DataTableSetBool(true, (SoundLinkId(lp_soundLink)), true);
        while (true) {
            if ((DataTableGetBool(true, (SoundLinkId(lp_soundLink))) == false)) {
                return ;
            }
            else {
            }
            lv_volume=lv_volume - lv_volumeChange;
            SoundSetVolume(lp_sound, lv_volume);
            lv_elapsed=lv_elapsed + lv_timeInterval;
            Wait(lv_timeInterval, c_timeReal);
            if ((lv_elapsed >= lp_time)) {
                break;
            }
            else {
            }
        }
    }
    else {
    }
    SoundStop(lp_sound, false);
    auto8378F9DE_val = lp_sound;
    {
    }
}

void gf_Ambience_RestoreSoundVolume (soundlink lp_soundLink, sound lp_sound) {
    // Implementation
    DataTableSetBool(true, (SoundLinkId(lp_soundLink)), false);
    SoundSetVolume(lp_sound, 100.0);
}

void gf_FadeJukeboxVolumeOverTime (int lp_jukeboxID) {
    int auto2D2DCC45_as;
    int auto2D2DCC45_ae;
    int auto2D2DCC45_ai;

    // Variable Declarations
    int lv_index;
    fixed lv_timeInterval;
    fixed lv_volumeChange;
    fixed lv_elapsed;
    fixed lv_volume;

    // Variable Initialization
    lv_index = 0;
    lv_timeInterval = 0.0625;
    lv_volumeChange = 0.0;
    lv_elapsed = 0.0;
    lv_volume = 0.0;

    // Implementation
    if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music == null)) {
        return ;
    }
    else {
    }
    lv_volume = 100.0;
    lv_volumeChange = (100.0 / 8.0);
    auto2D2DCC45_as = 1;
    auto2D2DCC45_ae = 7;
    auto2D2DCC45_ai = 1;
    lv_index = auto2D2DCC45_as;
    if (auto2D2DCC45_ai > 0 || (auto2D2DCC45_ai == 0 && auto2D2DCC45_as < auto2D2DCC45_ae)) {
        while (lv_index <= auto2D2DCC45_ae) {
            if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted == false) && (gv_terranUpTheNightPlaying == false)) {
                return ;
            }
            else {
            }
            lv_volume=lv_volume - lv_volumeChange;
            SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, lv_volume);
            Wait(0.0625, c_timeGame);
            lv_index = lv_index + auto2D2DCC45_ai;
        }
    }
    else if (auto2D2DCC45_ai < 0 || (auto2D2DCC45_ai == 0 && auto2D2DCC45_ae < auto2D2DCC45_as)) {
        while (lv_index >= auto2D2DCC45_ae) {
            if ((gv_jukeboxes[lp_jukeboxID].lv_playback.lv_muted == false) && (gv_terranUpTheNightPlaying == false)) {
                return ;
            }
            else {
            }
            lv_volume=lv_volume - lv_volumeChange;
            SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, lv_volume);
            Wait(0.0625, c_timeGame);
            lv_index = lv_index + auto2D2DCC45_ai;
        }
    }
    SoundSetVolume(gv_jukeboxes[lp_jukeboxID].lv_playback.lv_music, 0.0);
}

void gf_ReturnNewItemInfo () {
}

void gf_ReturnFlahsing () {
    unitgroup autoE28B3249_g;
    int autoE28B3249_u;
    int auto03E5193C_as;
    int auto03E5193C_ae;
    int auto03E5193C_ai;

    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;
    unit lv_hotspot;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_actorID = 0;
    lv_hotspot = null;

    // Implementation
    autoE28B3249_g = gv_clickables;
    autoE28B3249_u = 1;
    while (autoE28B3249_u <= UnitGroupCount(autoE28B3249_g, c_unitCountAll)) {
        lv_hotspot = UnitGroupUnit(autoE28B3249_g, autoE28B3249_u);
        if ((gf_ActorID(lv_hotspot) == 0)) {
            UnitGroupAdd(gv_hotspots_Flashing, lv_hotspot);
        }
        else {
        }
        if (lv_hotspot == UnitGroupUnit(autoE28B3249_g, autoE28B3249_u)) {
            autoE28B3249_u = autoE28B3249_u + 1;
        }
    }
    auto03E5193C_as = gv_c_ACTOR_FIRST;
    auto03E5193C_ae = gv_c_ACTOR_LAST;
    auto03E5193C_ai = 1;
    lv_actorIndex = auto03E5193C_as;
    if (auto03E5193C_ai > 0 || (auto03E5193C_ai == 0 && auto03E5193C_as < auto03E5193C_ae)) {
        while (lv_actorIndex <= auto03E5193C_ae) {
            lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
            if ((gf_ActorWithConversation(lv_actorID) == true)) {
                UnitGroupAdd(gv_hotspots_Flashing, gf_ActorUnit(lv_actorID));
            }
            else {
            }
            lv_actorIndex = lv_actorIndex + auto03E5193C_ai;
        }
    }
    else if (auto03E5193C_ai < 0 || (auto03E5193C_ai == 0 && auto03E5193C_ae < auto03E5193C_as)) {
        while (lv_actorIndex >= auto03E5193C_ae) {
            lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
            if ((gf_ActorWithConversation(lv_actorID) == true)) {
                UnitGroupAdd(gv_hotspots_Flashing, gf_ActorUnit(lv_actorID));
            }
            else {
            }
            lv_actorIndex = lv_actorIndex + auto03E5193C_ai;
        }
    }
    UnitGroupLoopBegin(gv_hotspots_Flashing);
    while (!UnitGroupLoopDone()) {
        gf_StartFlashingUnit(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_ReturnTimestamp () {
    // Implementation
    if (((libCamp_gf_LastSuccessfulMission() == 4) || (libCamp_gf_LastSuccessfulMission() == 17))) {
        return ;
    }
    else {
    }
    gf_DisplayTimestamp(2);
}

void gf_DisplayMissionDebriefing (int lp_mission) {
    int auto92483638_val;

    // Implementation
    libCamp_gf_HideStoryUI(false, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    auto92483638_val = lp_mission;
    if (auto92483638_val == 0) {
        if ((libCamp_gf_ScenePlayed(1) == false)) {
            gf_DisplayTimestamp(0);
            TriggerExecute(gt_Scene01RaynorIntro, true, true);
            libCamp_gf_SetScenePlayed(1, true);
        }
        else {
        }
    }
    else if (auto92483638_val == 1) {
        if ((libCamp_gf_ScenePlayed(4) == false)) {
            gf_DisplayTimestamp(0);
            TriggerExecute(gt_Scene04TychusIntro, true, true);
            libCamp_gf_SetScenePlayed(4, true);
        }
        else {
        }
    }
    else if (auto92483638_val == 2) {
    }
    else if (auto92483638_val == 3) {
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
    }
    TriggerExecute(gt_ReturnGeneric, true, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCamp_gf_HideStoryUI(true, true);
}

string gf_TransitionalBankSection (string lp_section) {
    // Implementation
    return (lp_section);
}

string gf_TransitionalBankKey (string lp_key) {
    // Implementation
    return (lp_key);
}

void gf_TransitionalSave () {
    // Variable Declarations
    string lv_section;
    bool lv_cantinaBroken;
    int lv_indexResearch;
    int lv_indexMerc;

    // Variable Initialization
    lv_section = "";
    lv_cantinaBroken = false;
    lv_indexResearch = 0;
    lv_indexMerc = 0;

    // Implementation
    BankLoad(gv_transitionalBankName, 1);
    gv_transitionalBank = BankLastCreated();
    lv_section = gf_TransitionalBankSection("General");
    BankValueSetFromInt(BankLastCreated(), lv_section, gf_TransitionalBankKey("CurrentRoom"), (gv_currentRoom));
}

void gf_TransitionalLoad () {
    // Variable Declarations
    bool lv_bankExist;
    string lv_section;
    bool lv_cantinaBroken;
    int lv_indexResearch;
    int lv_indexMerc;
    int lv_abChoice;

    // Variable Initialization
    lv_bankExist = false;
    lv_section = "";
    lv_cantinaBroken = false;
    lv_indexResearch = 0;
    lv_indexMerc = 0;
    lv_abChoice = 0;

    // Implementation
    lv_bankExist = BankExists(gv_transitionalBankName, 1);
    TriggerDebugOutput(1, (StringExternal("Param/Value/668D2572") + libNtve_gf_ConvertBooleanToText(lv_bankExist)), false);
    if ((lv_bankExist == false)) {
        gv_isTransitionalLoad = false;
        return ;
    }
    else {
    }
    gv_isTransitionalLoad = true;
    BankLoad(gv_transitionalBankName, 1);
    lv_section = gf_TransitionalBankSection("General");
    gv_currentRoom = gf_RoomFromIndex(BankValueGetAsInt(BankLastCreated(), lv_section, gf_TransitionalBankKey("CurrentRoom")));
    gv_currentLocation = gf_RoomLocation(gv_currentRoom);
}

void gf_DisplayDebugMessage (text lp_msg) {
    // Implementation
    if ((gv_isForDebug == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_msg);
    }
    else {
    }
}

void gf_DebugSceneAddButton (int lp_wide, int lp_tall, int lp_x, int lp_y, text lp_label, trigger lp_callback, text lp_sceneLabel) {
    // Implementation
    gv_debugSceneCount = (gv_debugSceneCount + 1);
    gv_debugSceneCallbacks[gv_debugSceneCount] = lp_callback;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_wide, lp_tall);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugScenePanelButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
    gv_debugSceneButtons[gv_debugSceneCount] = DialogControlLastCreated();
    gv_debugSceneLabels[gv_debugSceneCount] = (lp_label + StringExternal("Param/Value/C76FEA3B") + lp_sceneLabel);
    if ((lp_callback == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
    }
}

void gf_DebugSceneAddLabel (int lp_x, int lp_y, text lp_label) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_x, lp_y);
}

void gf_DebugSceneAddRow (int lp_scene, text lp_name, text lp_subtitle, trigger lp_sceneCallback, trigger lp_animatic) {
    // Variable Declarations
    trigger lv_callback;

    // Variable Initialization
    lv_callback = null;

    // Implementation
    if ((lp_sceneCallback != null)) {
        lv_callback = lp_sceneCallback;
    }
    else {
        lv_callback = lp_animatic;
    }
    gf_DebugSceneAddButton(600, 45, 50, gv_debugSceneRowY, libCamp_gf_SceneName(lp_scene), libCamp_gf_SceneCallback(lp_scene), lp_subtitle);
    gv_debugSceneRowY = (gv_debugSceneRowY + 48);
}

void gf_RoomCheatAddButton (text lp_label) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
}

void gf_RoomCheatCreateDialog () {
    // Implementation
    if ((gv_roomCheatDialog != c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogCreate(100, 100, c_anchorCenter, -50, -50, true);
    gv_roomCheatDialog = DialogLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/C6660181"));
    gv_roomCheatButtonMarSara = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/A770B1AA"));
    gv_roomCheatButtonBridge = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/AF6FF0E1"));
    gv_roomCheatButtonArmory = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/FDEB51AC"));
    gv_roomCheatButtonCantina = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/5BA7AED9"));
    gv_roomCheatButtonLab = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/35DA6131"));
    gv_roomCheatButtonChar = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/0DB89306"));
    gv_roomCheatButtonObservatory = DialogControlLastCreated();
    gf_RoomCheatAddButton(StringExternal("Param/Value/6190BB53"));
    gv_roomCheatButtonCancel = DialogControlLastCreated();
}

void gf_RoomCheatUpdateButton (int lp_button, bool lp_condition) {
    // Variable Declarations
    int lv_y;

    // Variable Initialization
    lv_y = 0;

    // Implementation
    if ((lp_condition == true)) {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), true);
        DialogControlSetPosition(lp_button, PlayerGroupAll(), c_anchorTop, 0, gv_roomCheatSizeY);
        gv_roomCheatSizeY = (gv_roomCheatSizeY + 50);
    }
    else {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), false);
    }
}

void gf_RoomCheatUpdateDialog (bool lp_bypass) {
    // Implementation
    gv_roomCheatSizeX = 300;
    gv_roomCheatSizeY = 35;
    gf_RoomCheatUpdateButton(gv_roomCheatButtonMarSara, (lp_bypass || (gf_RoomIsEnabled(6) && (gv_currentRoom != 6))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonBridge, (lp_bypass || (gf_RoomIsEnabled(2) && (gv_currentRoom != 2))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonArmory, (lp_bypass || (gf_RoomIsEnabled(1) && (gv_currentRoom != 1))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonCantina, (lp_bypass || (gf_RoomIsEnabled(3) && (gv_currentRoom != 3))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonLab, (lp_bypass || (gf_RoomIsEnabled(4) && (gv_currentRoom != 4))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonChar, (lp_bypass || (gf_RoomIsEnabled(5) && (gv_currentRoom != 5))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonObservatory, (lp_bypass || (gf_RoomIsEnabled(9) && (gv_currentRoom != 9))));
    gf_RoomCheatUpdateButton(gv_roomCheatButtonCancel, true);
    gv_roomCheatSizeY = (gv_roomCheatSizeY + 35);
    DialogSetPosition(gv_roomCheatDialog, c_anchorCenter, (0 - (gv_roomCheatSizeX / 2)), (0 - (gv_roomCheatSizeY / 2)));
    DialogSetSize(gv_roomCheatDialog, gv_roomCheatSizeX, gv_roomCheatSizeY);
}

void gf_DisplayRoomCheatDialog (bool lp_check) {
    // Implementation
    gf_RoomCheatCreateDialog();
    gf_RoomCheatUpdateDialog((lp_check == false));
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), true);
}

void gf_HideRoomCheatDialog () {
    // Implementation
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), false);
}

void gf_RoomCameraAddButton (text lp_label) {
    // Implementation
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPropertyAsText(DialogControlLastCreated(), c_triggerControlPropertyText, PlayerGroupAll(), lp_label);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
}

void gf_RoomCameraCreateDialog () {
    // Implementation
    if ((gv_roomCameraDialog != c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogCreate(100, 100, c_anchorCenter, -50, -50, true);
    gv_roomCameraDialog = DialogLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/5288E7CD"));
    gv_roomCameraButtonMarSara = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/D38A49C2"));
    gv_roomCameraButtonBridge = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/426CDD17"));
    gv_roomCameraButtonArmory = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/CE6709E3"));
    gv_roomCameraButtonCantina = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/3CBAFF16"));
    gv_roomCameraButtonLab = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/A67AD1DF"));
    gv_roomCameraButtonChar = DialogControlLastCreated();
    gf_RoomCameraAddButton(StringExternal("Param/Value/A9E7CA0C"));
    gv_roomCameraButtonCancel = DialogControlLastCreated();
}

void gf_RoomCameraUpdateButton (int lp_button, bool lp_condition) {
    // Variable Declarations
    int lv_y;

    // Variable Initialization
    lv_y = 0;

    // Implementation
    if ((lp_condition == true)) {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), true);
        DialogControlSetPosition(lp_button, PlayerGroupAll(), c_anchorTop, 0, gv_roomCameraSizeY);
        gv_roomCameraSizeY = (gv_roomCameraSizeY + 50);
    }
    else {
        DialogControlSetVisible(lp_button, PlayerGroupAll(), false);
    }
}

void gf_RoomCameraUpdateDialog (bool lp_bypass) {
    // Implementation
    gv_roomCameraSizeX = 300;
    gv_roomCameraSizeY = 35;
    gf_RoomCameraUpdateButton(gv_roomCameraButtonMarSara, (lp_bypass || (gf_RoomIsEnabled(6) && (gv_currentRoom != 6))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonBridge, (lp_bypass || (gf_RoomIsEnabled(2) && (gv_currentRoom != 2))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonArmory, (lp_bypass || (gf_RoomIsEnabled(1) && (gv_currentRoom != 1))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonCantina, (lp_bypass || (gf_RoomIsEnabled(3) && (gv_currentRoom != 3))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonLab, (lp_bypass || (gf_RoomIsEnabled(4) && (gv_currentRoom != 4))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonChar, (lp_bypass || (gf_RoomIsEnabled(5) && (gv_currentRoom != 5))));
    gf_RoomCameraUpdateButton(gv_roomCameraButtonCancel, true);
    gv_roomCameraSizeY = (gv_roomCameraSizeY + 35);
    DialogSetPosition(gv_roomCameraDialog, c_anchorCenter, (0 - (gv_roomCameraSizeX / 2)), (0 - (gv_roomCameraSizeY / 2)));
    DialogSetSize(gv_roomCameraDialog, gv_roomCameraSizeX, gv_roomCameraSizeY);
}

void gf_DisplayRoomCameraDialog (bool lp_check) {
    // Implementation
    gf_RoomCameraCreateDialog();
    gf_RoomCameraUpdateDialog((lp_check == false));
    DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), true);
}

void gf_HideRoomCameraDialog () {
    // Implementation
    DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
}

void gf_Debug_CreateBriefingMissionButton (int lp_mission) {
    // Variable Declarations
    const fixed lv_width = 4.0;
    fixed lv_rX;
    fixed lv_rY;

    // Variable Initialization
    lv_rX = 0.0;
    lv_rY = 0.0;

    // Implementation
    gv_debug_BriefingMissioniButtonNewLine = false;
    lv_rX = (lv_width * IntToFixed(gv_debug_BriefingMissioniButtonX));
    lv_rY = IntToFixed(gv_debug_BriefingMissioniButtonY);
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeButton, c_anchorTopLeft, lv_rX, lv_rY, lv_width, 1.0, StringToText(libCamp_gv_tS_MapFile[(lp_mission)]));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BriefingDebugButtonText", PlayerGroupAll());
    gv_debug_BriefingMissioniButton[(lp_mission)] = DialogControlLastCreated();
    if ((libCamp_gf_MissionBriefing(lp_mission) == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
    }
    gv_debug_BriefingMissioniButtonX=gv_debug_BriefingMissioniButtonX + 1;
    if (((lv_rX + lv_width) > gv_debug_BriefingMissioniButtonXMax)) {
        gv_debug_BriefingMissioniButtonXMax = (lv_rX + lv_width);
    }
    else {
    }
}

void gf_Debug_CreateBriefingMissionButtonNewLine () {
    // Implementation
    if ((gv_debug_BriefingMissioniButtonNewLine == true)) {
        return ;
    }
    else {
    }
    gv_debug_BriefingMissioniButtonNewLine = true;
    gv_debug_BriefingMissioniButtonX = 0;
    gv_debug_BriefingMissioniButtonY=gv_debug_BriefingMissioniButtonY + 1;
}

void gf_Debug_CreateBriefingDialog () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = 0;
    lv_y = 0;

    // Implementation
    if ((gv_debug_BriefingDialog != c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libCamp_gf_CreateDialogInGrid(16.0, 12.0, c_anchorCenter, 0.0, 0.0, true);
    gv_debug_BriefingDialog = DialogLastCreated();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeLabel, c_anchorTop, 0.0, 0.0, 10.0, 2.0, StringExternal("Param/Value/95869D9B"));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportTitle", PlayerGroupAll());
    gv_debug_BriefingMissioniButtonX = 0;
    gv_debug_BriefingMissioniButtonXMax = 16.0;
    gv_debug_BriefingMissioniButtonY = 2;
    gf_Debug_CreateBriefingMissionButton(1);
    gf_Debug_CreateBriefingMissionButton(2);
    gf_Debug_CreateBriefingMissionButton(3);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(17);
    gf_Debug_CreateBriefingMissionButton(18);
    gf_Debug_CreateBriefingMissionButton(19);
    gf_Debug_CreateBriefingMissionButton(20);
    gf_Debug_CreateBriefingMissionButton(21);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(12);
    gf_Debug_CreateBriefingMissionButton(13);
    gf_Debug_CreateBriefingMissionButton(14);
    gf_Debug_CreateBriefingMissionButton(15);
    gf_Debug_CreateBriefingMissionButton(16);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(4);
    gf_Debug_CreateBriefingMissionButton(5);
    gf_Debug_CreateBriefingMissionButton(6);
    gf_Debug_CreateBriefingMissionButton(7);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(8);
    gf_Debug_CreateBriefingMissionButton(9);
    gf_Debug_CreateBriefingMissionButton(10);
    gf_Debug_CreateBriefingMissionButton(11);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(22);
    gf_Debug_CreateBriefingMissionButton(23);
    gf_Debug_CreateBriefingMissionButton(24);
    gf_Debug_CreateBriefingMissionButton(25);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    gf_Debug_CreateBriefingMissionButton(26);
    gf_Debug_CreateBriefingMissionButton(27);
    gf_Debug_CreateBriefingMissionButton(28);
    gf_Debug_CreateBriefingMissionButton(29);
    gf_Debug_CreateBriefingMissionButtonNewLine();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_BriefingDialog, c_triggerControlTypeButton, c_anchorBottomRight, 0.0, 0.0, 4.0, 1.0, StringExternal("Param/Value/F4DB8A5C"));
    gv_debug_BriefingButtonClose = DialogControlLastCreated();
    libCamp_gf_SetDialogSizeInGrid(gv_debug_BriefingDialog, gv_debug_BriefingMissioniButtonXMax, IntToFixed((gv_debug_BriefingMissioniButtonY + 2)));
}

void gf_Debug_CreateTVNewsMissionButton (int lp_mission) {
    // Variable Declarations
    const fixed lv_width = 4.0;
    fixed lv_height;
    fixed lv_rX;
    fixed lv_rY;

    // Variable Initialization
    lv_height = 1.2;
    lv_rX = 0.0;
    lv_rY = 0.0;

    // Implementation
    gv_debug_TVNewsMissioniButtonNewLine = false;
    lv_rX = (0.3 + ((lv_width - 0.03) * IntToFixed(gv_debug_TVNewsMissioniButtonX)));
    lv_rY = (IntToFixed(gv_debug_TVNewsMissioniButtonY) * 1.25);
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeButton, c_anchorTopLeft, lv_rX, lv_rY, lv_width, lv_height, libCamp_gf_MissionName(lp_mission));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TVNewsDebugButtonText", PlayerGroupAll());
    gv_debug_TVNewsMissioniButton[(lp_mission)] = DialogControlLastCreated();
    if ((gf_TVNewsTrigger(lp_mission) == null)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
    }
    gv_debug_TVNewsMissioniButtonX=gv_debug_TVNewsMissioniButtonX + 1;
    if (((lv_rX + lv_width) > gv_debug_TVNewsMissioniButtonXMax)) {
        gv_debug_TVNewsMissioniButtonXMax = (lv_rX + lv_width);
    }
    else {
    }
}

void gf_Debug_CreateTVNewsMissionButtonNewLine () {
    // Implementation
    if ((gv_debug_TVNewsMissioniButtonNewLine == true)) {
        return ;
    }
    else {
    }
    gv_debug_TVNewsMissioniButtonNewLine = true;
    gv_debug_TVNewsMissioniButtonX = 0;
    gv_debug_TVNewsMissioniButtonY=gv_debug_TVNewsMissioniButtonY + 1;
}

void gf_Debug_CreateTVNewsDialog () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = 0;
    lv_y = 0;

    // Implementation
    if ((gv_debug_TVNewsDialog != c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libCamp_gf_CreateDialogInGrid(16.0, 12.0, c_anchorCenter, 0.0, 0.0, true);
    gv_debug_TVNewsDialog = DialogLastCreated();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeLabel, c_anchorTop, 0.0, 0.0, 10.0, 2.0, StringExternal("Param/Value/BA1734B0"));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportTitle", PlayerGroupAll());
    gv_debug_TVNewsMissioniButtonX = 0;
    gv_debug_TVNewsMissioniButtonXMax = 16.0;
    gv_debug_TVNewsMissioniButtonY = 2;
    gf_Debug_CreateTVNewsMissionButton(1);
    gf_Debug_CreateTVNewsMissionButton(2);
    gf_Debug_CreateTVNewsMissionButton(17);
    gf_Debug_CreateTVNewsMissionButton(18);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(19);
    gf_Debug_CreateTVNewsMissionButton(20);
    gf_Debug_CreateTVNewsMissionButton(21);
    gf_Debug_CreateTVNewsMissionButton(12);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(13);
    gf_Debug_CreateTVNewsMissionButton(14);
    gf_Debug_CreateTVNewsMissionButton(15);
    gf_Debug_CreateTVNewsMissionButton(16);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(4);
    gf_Debug_CreateTVNewsMissionButton(5);
    gf_Debug_CreateTVNewsMissionButton(6);
    gf_Debug_CreateTVNewsMissionButton(7);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(8);
    gf_Debug_CreateTVNewsMissionButton(9);
    gf_Debug_CreateTVNewsMissionButton(10);
    gf_Debug_CreateTVNewsMissionButton(11);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(22);
    gf_Debug_CreateTVNewsMissionButton(23);
    gf_Debug_CreateTVNewsMissionButton(24);
    gf_Debug_CreateTVNewsMissionButton(25);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    gf_Debug_CreateTVNewsMissionButton(26);
    gf_Debug_CreateTVNewsMissionButton(27);
    gf_Debug_CreateTVNewsMissionButton(28);
    gf_Debug_CreateTVNewsMissionButtonNewLine();
    libCamp_gf_CreateDialogItemInGrid(gv_debug_TVNewsDialog, c_triggerControlTypeButton, c_anchorBottomRight, 0.0, 0.3, 4.0, 1.0, StringExternal("Param/Value/6DD62B66"));
    gv_debug_TVNewsButtonClose = DialogControlLastCreated();
    libCamp_gf_SetDialogSizeInGrid(gv_debug_TVNewsDialog, (gv_debug_TVNewsMissioniButtonXMax + 0.3), ((IntToFixed(gv_debug_TVNewsMissioniButtonY) * 1.25) + 2.0));
}

void gf_DisplayBlizzconScreen () {
    // Variable Declarations
    int lv_dlgBG;
    int lv_dlgText;

    // Variable Initialization
    lv_dlgBG = c_invalidDialogId;
    lv_dlgText = c_invalidDialogId;

    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    DialogCreate(2048, 1026, c_anchorCenter, 0, 0, true);
    lv_dlgBG = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\thanksforplaying09.dds", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(gt_BlizzconScreenWait, true, true);
    GameOver(1, c_gameOverVictory, false, false);
}

void gf_Debug_RoomChangeTimerStart () {
    // Variable Declarations
    text lv_tempText;

    // Variable Initialization
    lv_tempText = null;

    // Implementation
    if ((libCamp_gf_CampaignDebugModeIsOn("RoomSwitchTime") == true)) {
        gv_debug_RoomChangeTimerDone = false;
        lv_tempText = StringToText("#TRESET");
    }
    else {
    }
}

void gf_Debug_RoomChangeTimerStart2 (int lp_room, bool lp_display) {
    // Variable Declarations
    text lv_tempText;

    // Variable Initialization
    lv_tempText = null;

    // Implementation
    if ((libCamp_gf_CampaignDebugModeIsOn("RoomSwitchTime") == true)) {
        if ((gv_debug_RoomChangeTimerDone == false)) {
            gv_debug_RoomChangeTimerDone = true;
            gv_debug_RoomChangeTimerMessage = StringToText("#TELAPSED");
        }
        else {
        }
        if ((lp_display == true)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/6B2389E9") + gf_RoomName(lp_room) + StringExternal("Param/Value/9A82A01B") + gv_debug_RoomChangeTimerMessage + StringExternal("Param/Value/A05FF17F")), true);
        }
        else {
        }
    }
    else {
    }
}

void gf_DebugOutputSetUnitsSingle (int lp_room) {
    unitgroup auto75C0B0D3_g;
    int auto75C0B0D3_u;

    // Variable Declarations
    unitgroup lv_units;
    unit lv_unit;
    text lv_output;

    // Variable Initialization
    lv_units = UnitGroupEmpty();
    lv_unit = null;
    lv_output = StringExternal("Param/Value/A0C35000");

    // Implementation
    lv_output = (StringExternal("Param/Value/B48BC2F4") + gf_RoomName(lp_room) + StringExternal("Param/Value/3E02CDE4"));
    lv_units = gf_RoomUnits(lp_room);
    auto75C0B0D3_g = lv_units;
    auto75C0B0D3_u = 1;
    while (auto75C0B0D3_u <= UnitGroupCount(auto75C0B0D3_g, c_unitCountAll)) {
        lv_unit = UnitGroupUnit(auto75C0B0D3_g, auto75C0B0D3_u);
        lv_output = (lv_output + StringToText((UnitGetType(lv_unit))) + StringExternal("Param/Value/3F38A323"));
        if (lv_unit == UnitGroupUnit(auto75C0B0D3_g, auto75C0B0D3_u)) {
            auto75C0B0D3_u = auto75C0B0D3_u + 1;
        }
    }
    lv_output = (lv_output + StringExternal("Param/Value/831DBE26"));
    TriggerDebugOutput(2, lv_output, true);
}

string gf_ActorStringID (int lp_actorID) {
    // Implementation
    return gv_actors[(lp_actorID)].lv_stringID;
}

text gf_ActorName (int lp_actorID) {
    // Implementation
    return gv_actors[(lp_actorID)].lv_name;
}

point gf_ActorPoint (int lp_roomID, int lp_actorID, int lp_toActorID) {
    // Variable Declarations
    unit lv_room;
    string lv_attachment;
    string lv_actorName1;

    // Variable Initialization
    lv_room = null;
    lv_attachment = "";
    lv_actorName1 = "";

    // Implementation
    lv_attachment = ("Pos_" + gf_ActorStringID(lp_actorID));
    if ((lp_toActorID != 0)) {
        lv_attachment = (lv_attachment + "To" + gf_ActorStringID(lp_toActorID));
    }
    else {
    }
    lv_room = gf_RoomUnit(lp_roomID);
    return UnitGetAttachmentPoint(lv_room, lv_attachment);
}

bool gf_ActorIsEnabledInRoom (int lp_actor, int lp_room) {
    // Implementation
    if ((lp_actor == 2)) {
        if (((lp_room == 11) || (lp_room == 15))) {
            return false;
        }
        else {
        }
        return true;
    }
    else {
    }
    return (gf_ActorRoom(lp_actor) == lp_room);
}

bool gf_ActorIsEnabled (int lp_actor) {
    int auto8A180F8D_as;
    int auto8A180F8D_ae;
    int auto8A180F8D_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto8A180F8D_as = gv_c_ROOM_FIRST;
    auto8A180F8D_ae = gv_c_ROOM_LAST;
    auto8A180F8D_ai = 1;
    lv_index = auto8A180F8D_as;
    if (auto8A180F8D_ai > 0 || (auto8A180F8D_ai == 0 && auto8A180F8D_as < auto8A180F8D_ae)) {
        while (lv_index <= auto8A180F8D_ae) {
            if ((gf_RoomIsEnabled(gf_RoomFromIndex(lv_index)) == true) && (gf_RoomLocation(gf_RoomFromIndex(lv_index)) == gv_currentLocation) && (gf_ActorIsEnabledInRoom(lp_actor, gf_RoomFromIndex(lv_index)) == true)) {
                return true;
            }
            else {
            }
            lv_index = lv_index + auto8A180F8D_ai;
        }
    }
    else if (auto8A180F8D_ai < 0 || (auto8A180F8D_ai == 0 && auto8A180F8D_ae < auto8A180F8D_as)) {
        while (lv_index >= auto8A180F8D_ae) {
            if ((gf_RoomIsEnabled(gf_RoomFromIndex(lv_index)) == true) && (gf_RoomLocation(gf_RoomFromIndex(lv_index)) == gv_currentLocation) && (gf_ActorIsEnabledInRoom(lp_actor, gf_RoomFromIndex(lv_index)) == true)) {
                return true;
            }
            else {
            }
            lv_index = lv_index + auto8A180F8D_ai;
        }
    }
    return false;
}

int gf_ActorID (unit lp_actorUnit) {
    int autoC1AE7369_as;
    int autoC1AE7369_ae;
    int autoC1AE7369_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoC1AE7369_as = gv_c_ACTOR_FIRST;
    autoC1AE7369_ae = gv_c_ACTOR_LAST;
    autoC1AE7369_ai = 1;
    lv_index = autoC1AE7369_as;
    if (autoC1AE7369_ai > 0 || (autoC1AE7369_ai == 0 && autoC1AE7369_as < autoC1AE7369_ae)) {
        while (lv_index <= autoC1AE7369_ae) {
            if ((lp_actorUnit == gv_actors[lv_index].lv_unit)) {
                return gv_actors[lv_index].lv_actorID;
            }
            else {
            }
            lv_index = lv_index + autoC1AE7369_ai;
        }
    }
    else if (autoC1AE7369_ai < 0 || (autoC1AE7369_ai == 0 && autoC1AE7369_ae < autoC1AE7369_as)) {
        while (lv_index >= autoC1AE7369_ae) {
            if ((lp_actorUnit == gv_actors[lv_index].lv_unit)) {
                return gv_actors[lv_index].lv_actorID;
            }
            else {
            }
            lv_index = lv_index + autoC1AE7369_ai;
        }
    }
    return 0;
}

unit gf_ActorUnit (int lp_iD) {
    // Implementation
    return gv_actors[(lp_iD)].lv_unit;
}

int gf_ActorRoom (int lp_iD) {
    // Implementation
    return gv_actors[(lp_iD)].lv_room;
}

bool gf_ActorWithFidget (int lp_actor) {
    // Implementation
    return ((gv_actors[(lp_actor)].lv_type == 3) || (gv_actors[(lp_actor)].lv_type == 2));
}

bool gf_ActorWithConversation (int lp_actor) {
    // Implementation
    if ((gv_actors[(lp_actor)].lv_type == 1) && (gf_ActorConversation(lp_actor) != null)) {
        return true;
    }
    else {
    }
    return false;
}

string gf_ActorConversation (int lp_actorID) {
    int autoF225BA17_val;
    int auto718B0C4D_val;

    // Variable Declarations
    string lv_convo;

    // Variable Initialization
    lv_convo = null;

    // Implementation
    autoF225BA17_val = lp_actorID;
    if (autoF225BA17_val == 3) {
        auto718B0C4D_val = gf_ActorRoom(lp_actorID);
        if (auto718B0C4D_val == 6) {
            lv_convo = "MarSaraTychus";
        }
        else {
        }
    }
    else {
    }
    if ((ConversationDataCanRun(lv_convo, false) == false)) {
        lv_convo = null;
    }
    else {
    }
    return lv_convo;
}

string gf_ActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_roomID, int lp_lightingType) {
    int auto749F2054_val;

    // Implementation
    auto749F2054_val = lp_actorID;
    if (auto749F2054_val == 2) {
        return gf_ActorLightingAnimRaynor(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else if (auto749F2054_val == 3) {
        return gf_ActorLightingAnimTychus(lp_toActorID, lp_roomID, lp_lightingType);
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimRaynor (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    int autoDB0CE9A5_val;
    int autoE3B78DF9_val;

    // Implementation
    autoDB0CE9A5_val = lp_roomID;
    if (autoDB0CE9A5_val == 6) {
        autoE3B78DF9_val = lp_lightingType;
        if (autoE3B78DF9_val == 2) {
            return "Lighting 01 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorLightingAnimTychus (int lp_toActorID, int lp_roomID, int lp_lightingType) {
    int autoE10754D7_val;
    int auto3AC94017_val;
    int autoFC6F8F79_val;
    int auto60F17AB4_val;
    int autoE7EB6316_val;

    // Implementation
    autoE10754D7_val = lp_roomID;
    if (autoE10754D7_val == 6) {
        auto3AC94017_val = lp_lightingType;
        if (auto3AC94017_val == 0) {
            return "Lighting 01 A";
        }
        else if (auto3AC94017_val == 1) {
            return "Lighting 01 B";
        }
        else {
        }
    }
    else if (autoE10754D7_val == 2) {
        autoFC6F8F79_val = lp_lightingType;
        if (autoFC6F8F79_val == 0) {
            return "Lighting 02 A";
        }
        else if (autoFC6F8F79_val == 1) {
            return "Lighting 02 A";
        }
        else {
        }
    }
    else if (autoE10754D7_val == 3) {
        auto60F17AB4_val = lp_lightingType;
        if (auto60F17AB4_val == 1) {
            return "Lighting 04 B";
        }
        else {
        }
    }
    else if (autoE10754D7_val == 5) {
        autoE7EB6316_val = lp_lightingType;
        if (autoE7EB6316_val == 1) {
            return "Lighting 09 B";
        }
        else if (autoE7EB6316_val == 2) {
            return "Lighting 09 E";
        }
        else {
        }
    }
    else {
    }
    return "";
}

string gf_ActorRoomAnim (int lp_actor, int lp_room, int lp_index) {
    int auto6B5829D3_val;
    int auto9BAC5067_val;
    int autoA9C2B4F7_val;
    int auto48389DB8_val;
    int autoC0E82B21_val;

    // Implementation
    auto6B5829D3_val = lp_actor;
    if (auto6B5829D3_val == 2) {
        auto9BAC5067_val = lp_room;
        if (auto9BAC5067_val == 6) {
            autoA9C2B4F7_val = lp_index;
            if (autoA9C2B4F7_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_RaynorCommander_BarAnims\\SM_RaynorCommander_BarAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto6B5829D3_val == 3) {
        auto48389DB8_val = lp_room;
        if (auto48389DB8_val == 6) {
            autoC0E82B21_val = lp_index;
            if (autoC0E82B21_val == 1) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine_01_BarAnims\\SM_Marine_01_BarAnims.m3a";
            }
            else if (autoC0E82B21_val == 2) {
                return "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a";
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return null;
}

void gf_InitActorSingle (int lp_actorID, string lp_stringID, text lp_name, unit lp_unit, int lp_type, string lp_convoStateIndex) {
    // Implementation
    gv_actors[(lp_actorID)].lv_actorID = lp_actorID;
    gv_actors[(lp_actorID)].lv_stringID = lp_stringID;
    gv_actors[(lp_actorID)].lv_name = lp_name;
    gv_actors[(lp_actorID)].lv_unit = lp_unit;
    gv_actors[(lp_actorID)].lv_type = lp_type;
    gv_actors[(lp_actorID)].lv_convoStateIndex = lp_convoStateIndex;
    gv_actors[(lp_actorID)].lv_preloaded = false;
    gv_actors[(lp_actorID)].lv_roomAnim[0] = null;
}

void gf_InitActors () {
    int auto869F95E1_as;
    int auto869F95E1_ae;
    int auto869F95E1_ai;
    int auto7189C51B_as;
    int auto7189C51B_ae;
    int auto7189C51B_ai;
    int auto2E810E55_as;
    int auto2E810E55_ae;
    int auto2E810E55_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    gf_InitActorSingle(1, "Adjutant", StringExternal("Param/Value/BB739A33"), UnitFromId(1), 4, "Characters|CharAdjutant");
    gf_InitActorSingle(2, "Raynor", StringExternal("Param/Value/D1EB5F97"), UnitFromId(424), 2, "Characters|CharRaynor");
    gf_InitActorSingle(3, "Tychus", StringExternal("Param/Value/F024A537"), UnitFromId(421), 1, "Characters|CharTychus");
    gf_InitActorRooms();
    auto869F95E1_as = gv_c_ACTOR_FIRST;
    auto869F95E1_ae = gv_c_ACTOR_LAST;
    auto869F95E1_ai = 1;
    lv_index = auto869F95E1_as;
    if (auto869F95E1_ai > 0 || (auto869F95E1_ai == 0 && auto869F95E1_as < auto869F95E1_ae)) {
        while (lv_index <= auto869F95E1_ae) {
            libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[lv_index].lv_actorID), false);
            lv_index = lv_index + auto869F95E1_ai;
        }
    }
    else if (auto869F95E1_ai < 0 || (auto869F95E1_ai == 0 && auto869F95E1_ae < auto869F95E1_as)) {
        while (lv_index >= auto869F95E1_ae) {
            libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[lv_index].lv_actorID), false);
            lv_index = lv_index + auto869F95E1_ai;
        }
    }
    auto7189C51B_as = gv_c_ACTOR_FIRST;
    auto7189C51B_ae = gv_c_ACTOR_LAST;
    auto7189C51B_ai = 1;
    lv_index = auto7189C51B_as;
    if (auto7189C51B_ai > 0 || (auto7189C51B_ai == 0 && auto7189C51B_as < auto7189C51B_ae)) {
        while (lv_index <= auto7189C51B_ae) {
            if ((gv_actors[lv_index].lv_type == 1)) {
                if ((gf_ActorWithConversation(gv_actors[lv_index].lv_actorID) == true)) {
                    gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gf_ActorRoom(gv_actors[lv_index].lv_actorID), 1);
                }
                else {
                    gf_SetActorType(gv_actors[lv_index].lv_actorID, 2);
                }
            }
            else {
            }
            lv_index = lv_index + auto7189C51B_ai;
        }
    }
    else if (auto7189C51B_ai < 0 || (auto7189C51B_ai == 0 && auto7189C51B_ae < auto7189C51B_as)) {
        while (lv_index >= auto7189C51B_ae) {
            if ((gv_actors[lv_index].lv_type == 1)) {
                if ((gf_ActorWithConversation(gv_actors[lv_index].lv_actorID) == true)) {
                    gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gf_ActorRoom(gv_actors[lv_index].lv_actorID), 1);
                }
                else {
                    gf_SetActorType(gv_actors[lv_index].lv_actorID, 2);
                }
            }
            else {
            }
            lv_index = lv_index + auto7189C51B_ai;
        }
    }
    auto2E810E55_as = gv_c_ACTOR_FIRST;
    auto2E810E55_ae = gv_c_ACTOR_LAST;
    auto2E810E55_ai = 1;
    lv_index = auto2E810E55_as;
    if (auto2E810E55_ai > 0 || (auto2E810E55_ai == 0 && auto2E810E55_as < auto2E810E55_ae)) {
        while (lv_index <= auto2E810E55_ae) {
            if ((gf_ActorWithFidget(gv_actors[lv_index].lv_actorID) == true)) {
                gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gv_actors[lv_index].lv_actorID, 3);
            }
            else {
            }
            lv_index = lv_index + auto2E810E55_ai;
        }
    }
    else if (auto2E810E55_ai < 0 || (auto2E810E55_ai == 0 && auto2E810E55_ae < auto2E810E55_as)) {
        while (lv_index >= auto2E810E55_ae) {
            if ((gf_ActorWithFidget(gv_actors[lv_index].lv_actorID) == true)) {
                gf_AddClickable(gv_clickables, gf_ActorUnit(gv_actors[lv_index].lv_actorID), gv_actors[lv_index].lv_actorID, 3);
            }
            else {
            }
            lv_index = lv_index + auto2E810E55_ai;
        }
    }
    gf_AddClickable(gv_clickables, gf_ActorUnit(1), gf_ActorRoom(1), 2);
    ConversationDataStateSetValue("CharacterLocationStatus|TychusInCantina", 0);
    ConversationDataStateSetValue("CharacterLocationStatus|HansonInLab", 0);
    ConversationDataStateSetValue("CharacterLocationStatus|ToshInCantina", 0);
}

void gf_InitActorRooms () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    gf_SetActorRoom(1, 6);
    if ((libCamp_gf_MissionStatusCheck(3, 2) == false)) {
        gf_SetActorRoom(2, 6);
    }
    else {
        gf_SetActorRoom(2, 0);
    }
    if (((libCamp_gf_LastSuccessfulMission() == 1) || (libCamp_gf_LastSuccessfulMission() == 2))) {
        gf_SetActorRoom(3, 6);
    }
    else {
        gf_SetActorRoom(3, 0);
    }
}

void gf_SetActorUnit (int lp_actorID, unit lp_unit) {
    // Implementation
    gv_actors[(lp_actorID)].lv_unit = lp_unit;
}

void gf_SetActorRoom (int lp_actorID, int lp_roomID) {
    // Implementation
    gv_actors[(lp_actorID)].lv_room = lp_roomID;
}

void gf_SetActorType (int lp_actorID, int lp_type) {
    // Implementation
    gv_actors[(lp_actorID)].lv_type = lp_type;
}

void gf_ResetActorToLocation (int lp_actorID, point lp_location) {
    // Implementation
    if ((lp_location == null)) {
        return ;
    }
    else {
    }
    UnitIssueOrder(gf_ActorUnit(lp_actorID), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(gf_ActorUnit(lp_actorID), c_unitStateMoveSuppressed, false);
    UnitSetPosition(gf_ActorUnit(lp_actorID), lp_location, false);
    UnitSetFacing(gf_ActorUnit(lp_actorID), PointGetFacing(lp_location), 0.0);
    UnitSetState(gf_ActorUnit(lp_actorID), c_unitStateMoveSuppressed, true);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(lp_actorID), 0.0);
}

void gf_HideAllActors (bool lp_hideShow) {
    int autoD92EF53D_as;
    int autoD92EF53D_ae;
    int autoD92EF53D_ai;
    int auto13E65582_as;
    int auto13E65582_ae;
    int auto13E65582_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    if ((lp_hideShow == false)) {
        auto13E65582_as = gv_c_ACTOR_FIRST;
        auto13E65582_ae = gv_c_ACTOR_LAST;
        auto13E65582_ai = 1;
        lv_index = auto13E65582_as;
        if (auto13E65582_ai > 0 || (auto13E65582_ai == 0 && auto13E65582_as < auto13E65582_ae)) {
            while (lv_index <= auto13E65582_ae) {
                gf_RemoveVisibleUnit(false, gv_actors[lv_index].lv_unit);
                lv_index = lv_index + auto13E65582_ai;
            }
        }
        else if (auto13E65582_ai < 0 || (auto13E65582_ai == 0 && auto13E65582_ae < auto13E65582_as)) {
            while (lv_index >= auto13E65582_ae) {
                gf_RemoveVisibleUnit(false, gv_actors[lv_index].lv_unit);
                lv_index = lv_index + auto13E65582_ai;
            }
        }
    }
    else {
        autoD92EF53D_as = gv_c_ACTOR_FIRST;
        autoD92EF53D_ae = gv_c_ACTOR_LAST;
        autoD92EF53D_ai = 1;
        lv_index = autoD92EF53D_as;
        if (autoD92EF53D_ai > 0 || (autoD92EF53D_ai == 0 && autoD92EF53D_as < autoD92EF53D_ae)) {
            while (lv_index <= autoD92EF53D_ae) {
                gf_RemoveVisibleUnit(true, gv_actors[lv_index].lv_unit);
                lv_index = lv_index + autoD92EF53D_ai;
            }
        }
        else if (autoD92EF53D_ai < 0 || (autoD92EF53D_ai == 0 && autoD92EF53D_ae < autoD92EF53D_as)) {
            while (lv_index >= autoD92EF53D_ae) {
                gf_RemoveVisibleUnit(true, gv_actors[lv_index].lv_unit);
                lv_index = lv_index + autoD92EF53D_ai;
            }
        }
    }
}

void gf_ActorTalked (int lp_actor) {
    int auto912D0039_val;

    // Implementation
    auto912D0039_val = lp_actor;
    if (auto912D0039_val == 3) {
        libCamp_gf_SetStoryState(15, 1);
        AchievementTermQuantitySet(1, "TStory01_9_Tychus", 1);
    }
    else {
    }
}

void gf_LockActorReloading (bool lp_lockUnlock) {
    // Implementation
    gv_actorReloadLocked = (lp_lockUnlock == true);
}

void gf_ReloadActors (bool lp_forced) {
    int auto2652B079_as;
    int auto2652B079_ae;
    int auto2652B079_ai;

    // Variable Declarations
    int lv_actorIndex;
    bool lv_load;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_load = false;

    // Implementation
    if ((gv_actorReloadLocked == true)) {
        return ;
    }
    else {
    }
    auto2652B079_as = gv_c_ACTOR_FIRST;
    auto2652B079_ae = gv_c_ACTOR_LAST;
    auto2652B079_ai = 1;
    lv_actorIndex = auto2652B079_as;
    if (auto2652B079_ai > 0 || (auto2652B079_ai == 0 && auto2652B079_as < auto2652B079_ae)) {
        while (lv_actorIndex <= auto2652B079_ae) {
            if ((lp_forced == true)) {
                lv_load = true;
            }
            else {
                if ((gf_ActorIsEnabled(gv_actors[lv_actorIndex].lv_actorID) == true)) {
                    lv_load = true;
                }
                else {
                    lv_load = false;
                }
            }
            if ((lv_load == true)) {
                if ((gv_actors[lv_actorIndex].lv_preloaded == false)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/BF17A6A7") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                    gv_actors[lv_actorIndex].lv_preloaded = true;
                    gf_PreloadUnitStoryMap(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
                }
                else {
                }
            }
            else {
                if ((gv_actors[lv_actorIndex].lv_preloaded == true)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/1C1C2145") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                    gv_actors[lv_actorIndex].lv_preloaded = false;
                    UnitUnloadModel(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
                }
                else {
                }
            }
            lv_actorIndex = lv_actorIndex + auto2652B079_ai;
        }
    }
    else if (auto2652B079_ai < 0 || (auto2652B079_ai == 0 && auto2652B079_ae < auto2652B079_as)) {
        while (lv_actorIndex >= auto2652B079_ae) {
            if ((lp_forced == true)) {
                lv_load = true;
            }
            else {
                if ((gf_ActorIsEnabled(gv_actors[lv_actorIndex].lv_actorID) == true)) {
                    lv_load = true;
                }
                else {
                    lv_load = false;
                }
            }
            if ((lv_load == true)) {
                if ((gv_actors[lv_actorIndex].lv_preloaded == false)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/BF17A6A7") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                    gv_actors[lv_actorIndex].lv_preloaded = true;
                    gf_PreloadUnitStoryMap(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
                }
                else {
                }
            }
            else {
                if ((gv_actors[lv_actorIndex].lv_preloaded == true)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/1C1C2145") + gf_ActorName(gv_actors[lv_actorIndex].lv_actorID)), false);
                    gv_actors[lv_actorIndex].lv_preloaded = false;
                    UnitUnloadModel(gf_ActorUnit(gv_actors[lv_actorIndex].lv_actorID));
                }
                else {
                }
            }
            lv_actorIndex = lv_actorIndex + auto2652B079_ai;
        }
    }
}

void gf_PlayActorLightingAnim (int lp_actorID, int lp_toActorID, int lp_room, int lp_lightingType) {
    // Variable Declarations
    string lv_anim;

    // Variable Initialization
    lv_anim = "Stand";

    // Implementation
    gf_ClearActorLightingAnim(lp_actorID);
    lv_anim = gf_ActorLightingAnim(lp_actorID, lp_toActorID, lp_room, lp_lightingType);
    if ((lv_anim != "")) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLIGHTING, lv_anim, c_animFlagFullMatch | c_animFlagPlayForever, 0.0);
    }
    else {
        gf_ClearAnimationwithblendtime(gv_aNIMID_ACTORLIGHTING, gf_ActorUnit(lp_actorID), 0.0);
    }
}

void gf_ClearActorLightingAnim (int lp_actorID) {
    // Implementation
    gf_ClearAnimationwithblendtime(gv_aNIMID_ACTORLIGHTING, gf_ActorUnit(lp_actorID), 0.0);
}

void gf_ReloadRoomActorAnimation (int lp_actor, int lp_roomID) {
    int auto4DA53D0F_as;
    int auto4DA53D0F_ae;
    int auto4DA53D0F_ai;

    // Variable Declarations
    int lv_actorIndex;
    string lv_animOld;
    string lv_animNew;
    int lv_index;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_animOld = null;
    lv_animNew = null;
    lv_index = 0;

    // Implementation
    lv_actorIndex = (lp_actor);
    auto4DA53D0F_as = 1;
    auto4DA53D0F_ae = 3;
    auto4DA53D0F_ai = 1;
    lv_index = auto4DA53D0F_as;
    if (auto4DA53D0F_ai > 0 || (auto4DA53D0F_ai == 0 && auto4DA53D0F_as < auto4DA53D0F_ae)) {
        while (lv_index <= auto4DA53D0F_ae) {
            lv_animOld = gv_actors[lv_actorIndex].lv_roomAnim[lv_index];
            lv_animNew = gf_ActorRoomAnim(lp_actor, lp_roomID, lv_index);
            if ((lv_animOld != lv_animNew)) {
                if ((lv_animOld != null)) {
                    UnitTypeAnimationUnload(UnitGetType(gf_ActorUnit(lp_actor)), lv_animOld);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/D4A752FC") + StringToText(lv_animOld) + StringExternal("Param/Value/75FB0D17") + gf_ActorName(lp_actor)), false);
                }
                else {
                }
                if ((lv_animNew != null)) {
                    UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(lp_actor)), lv_animNew);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/F7062F37") + StringToText(lv_animNew) + StringExternal("Param/Value/8A217FF5") + gf_ActorName(lp_actor)), false);
                }
                else {
                }
                gv_actors[lv_actorIndex].lv_roomAnim[lv_index] = lv_animNew;
            }
            else {
            }
            lv_index = lv_index + auto4DA53D0F_ai;
        }
    }
    else if (auto4DA53D0F_ai < 0 || (auto4DA53D0F_ai == 0 && auto4DA53D0F_ae < auto4DA53D0F_as)) {
        while (lv_index >= auto4DA53D0F_ae) {
            lv_animOld = gv_actors[lv_actorIndex].lv_roomAnim[lv_index];
            lv_animNew = gf_ActorRoomAnim(lp_actor, lp_roomID, lv_index);
            if ((lv_animOld != lv_animNew)) {
                if ((lv_animOld != null)) {
                    UnitTypeAnimationUnload(UnitGetType(gf_ActorUnit(lp_actor)), lv_animOld);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/D4A752FC") + StringToText(lv_animOld) + StringExternal("Param/Value/75FB0D17") + gf_ActorName(lp_actor)), false);
                }
                else {
                }
                if ((lv_animNew != null)) {
                    UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(lp_actor)), lv_animNew);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/F7062F37") + StringToText(lv_animNew) + StringExternal("Param/Value/8A217FF5") + gf_ActorName(lp_actor)), false);
                }
                else {
                }
                gv_actors[lv_actorIndex].lv_roomAnim[lv_index] = lv_animNew;
            }
            else {
            }
            lv_index = lv_index + auto4DA53D0F_ai;
        }
    }
}

void gf_LoadActorComplexAnimation (int lp_actorID) {
    int auto205CF2C7_val;

    // Implementation
    auto205CF2C7_val = lp_actorID;
    {
    }
}

void gf_ActorScenePrepare (int lp_actorID, int lp_toActorID, int lp_room, int lp_type) {
    int auto315E68F6_val;
    int autoF960228F_val;

    // Variable Declarations
    int lv_lightingType;

    // Variable Initialization
    lv_lightingType = 0;

    // Implementation
    gv_actorScenePreparedCount=gv_actorScenePreparedCount + 1;
    gv_actorScenePrepared[gv_actorScenePreparedCount] = lp_actorID;
    gv_actorScenePreparedToActor[gv_actorScenePreparedCount] = lp_toActorID;
    gv_actorScenePreparedRoom[gv_actorScenePreparedCount] = lp_room;
    gv_actorScenePreparedType[gv_actorScenePreparedCount] = lp_type;
    gf_TurnActorFidgetOnOffInstantly(lp_actorID, false);
    if ((lp_type == 0) && (lp_actorID != 3)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLISTEN, "Stand Listen", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
    }
    auto315E68F6_val = lp_type;
    if (auto315E68F6_val == 1) {
        lv_lightingType = 1;
    }
    else if (auto315E68F6_val == 0) {
        lv_lightingType = 2;
    }
    else if (auto315E68F6_val == 2) {
        lv_lightingType = 2;
    }
    else {
    }
    gf_PlayActorLightingAnim(lp_actorID, lp_toActorID, lp_room, lv_lightingType);
    autoF960228F_val = lp_actorID;
    if (autoF960228F_val == 2) {
        gf_ActorScenePrepareRaynor(lp_toActorID, lp_room, lp_type);
    }
    else if (autoF960228F_val == 3) {
        gf_ActorScenePrepareTychus(lp_toActorID, lp_room, lp_type);
    }
    else {
    }
}

void gf_ActorSceneClearAll () {
    int auto0D438ED8_as;
    int auto0D438ED8_ae;
    int auto0D438ED8_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto0D438ED8_as = 1;
    auto0D438ED8_ae = gv_actorScenePreparedCount;
    auto0D438ED8_ai = 1;
    lv_index = auto0D438ED8_as;
    if (auto0D438ED8_ai > 0 || (auto0D438ED8_ai == 0 && auto0D438ED8_as < auto0D438ED8_ae)) {
        while (lv_index <= auto0D438ED8_ae) {
            gf_ActorSceneClear(gv_actorScenePrepared[lv_index], gv_actorScenePreparedToActor[lv_index], gv_actorScenePreparedRoom[lv_index], gv_actorScenePreparedType[lv_index]);
            lv_index = lv_index + auto0D438ED8_ai;
        }
    }
    else if (auto0D438ED8_ai < 0 || (auto0D438ED8_ai == 0 && auto0D438ED8_ae < auto0D438ED8_as)) {
        while (lv_index >= auto0D438ED8_ae) {
            gf_ActorSceneClear(gv_actorScenePrepared[lv_index], gv_actorScenePreparedToActor[lv_index], gv_actorScenePreparedRoom[lv_index], gv_actorScenePreparedType[lv_index]);
            lv_index = lv_index + auto0D438ED8_ai;
        }
    }
    gv_actorScenePreparedCount = 0;
}

void gf_ActorSceneClear (int lp_actorID, int lp_toActorID, int lp_room, int lp_type) {
    int auto0CDC9ACF_val;

    // Implementation
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(lp_actorID), "InstantStanding");
    gf_TurnActorFidgetOnOffInstantly(lp_actorID, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(lp_actorID)), gv_aNIMID_ACTORLISTEN);
    gf_ClearActorLightingAnim(lp_actorID);
    gf_PlayActorLightingAnim(lp_actorID, 0, lp_room, 0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFING, gf_ActorUnit(lp_actorID), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_ActorUnit(lp_actorID), 0.0);
    auto0CDC9ACF_val = lp_actorID;
    if (auto0CDC9ACF_val == 2) {
        gf_ActorSceneClearRaynor(lp_toActorID, lp_room, lp_type);
    }
    else if (auto0CDC9ACF_val == 3) {
        gf_ActorSceneClearTychus(lp_toActorID, lp_room, lp_type);
    }
    else {
    }
}

void gf_ActorScenePrepareRaynor (int lp_toActorID, int lp_room, int lp_type) {
    int autoD12F6240_val;
    int auto7DADAE64_val;

    // Implementation
    autoD12F6240_val = lp_room;
    if (autoD12F6240_val == 6) {
        auto7DADAE64_val = lp_type;
        if (auto7DADAE64_val == 1) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Stand Ready", true);
        }
        else if (auto7DADAE64_val == 0) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Cover", false);
        }
        else if (auto7DADAE64_val == 2) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Ready M", true);
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorSceneClearRaynor (int lp_toActorID, int lp_room, int lp_type) {
    int auto19A09DCF_val;
    int auto2F9B5E47_val;

    // Implementation
    auto19A09DCF_val = lp_room;
    if (auto19A09DCF_val == 6) {
        auto2F9B5E47_val = lp_type;
        if (auto2F9B5E47_val == 1) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Stand Ready", false);
        }
        else if (auto2F9B5E47_val == 0) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Cover", true);
        }
        else if (auto2F9B5E47_val == 2) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Ready M", false);
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorScenePrepareTychus (int lp_toActorID, int lp_room, int lp_type) {
    int auto76814058_val;
    int auto7C764468_val;

    // Implementation
    if ((lp_room != 5) && ((lp_room != 6) || (lp_type == 0))) {
        UnitTypeAnimationLoad(UnitGetType(gf_ActorUnit(3)), "Assets\\StoryModeCharacters\\Terran\\SM_Marine01_ConversationAnims\\SM_Marine01_ConversationAnims.m3a");
        gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(3), "B", true, 0.0);
    }
    else {
    }
    auto76814058_val = lp_room;
    if (auto76814058_val == 6) {
        auto7C764468_val = lp_type;
        if (auto7C764468_val == 1) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Ready", true);
        }
        else if (auto7C764468_val == 0) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", false);
        }
        else if (auto7C764468_val == 2) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "C", true);
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", false);
        }
        else {
        }
    }
    else {
    }
}

void gf_ActorSceneClearTychus (int lp_toActorID, int lp_room, int lp_type) {
    int autoB8198E91_val;
    int auto69E39FAD_val;

    // Implementation
    if ((lp_room != 5) && ((lp_room != 6) || (lp_type == 0))) {
        gf_TurnAnimationPropertiesOnOff(gf_ActorUnit(3), "B", false, 0.0);
    }
    else {
    }
    autoB8198E91_val = lp_room;
    if (autoB8198E91_val == 6) {
        auto69E39FAD_val = lp_type;
        if (auto69E39FAD_val == 1) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Ready", false);
        }
        else if (auto69E39FAD_val == 0) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", true);
        }
        else if (auto69E39FAD_val == 2) {
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "C", false);
            gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", true);
        }
        else {
        }
    }
    else {
    }
}

void gf_PreloadRoomIfCondition (int lp_room, bool lp_condition) {
    unitgroup auto1D348EDD_g;
    int auto1D348EDD_u;

    // Variable Declarations
    unit lv_roomUnit;
    unit lv_unit;

    // Variable Initialization
    lv_roomUnit = null;
    lv_unit = null;

    // Implementation
    if ((lp_condition == true) && (gv_roomPreloaded[(lp_room)] == false)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/DAFC6ABC") + IntToText((lp_room)) + StringExternal("Param/Value/014C5176") + gf_RoomName(lp_room)), false);
        gv_roomPreloaded[(lp_room)] = true;
        auto1D348EDD_g = gf_RoomUnits(lp_room);
        auto1D348EDD_u = 1;
        while (auto1D348EDD_u <= UnitGroupCount(auto1D348EDD_g, c_unitCountAll)) {
            lv_unit = UnitGroupUnit(auto1D348EDD_g, auto1D348EDD_u);
            gf_PreloadUnitStoryMap(lv_unit);
            if (lv_unit == UnitGroupUnit(auto1D348EDD_g, auto1D348EDD_u)) {
                auto1D348EDD_u = auto1D348EDD_u + 1;
            }
        }
    }
    else {
    }
}

void gf_PreloadUnitGroup (unitgroup lp_unitGroup) {
    unitgroup auto4D7FC978_g;
    int auto4D7FC978_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization
    lv_indexUnit = null;

    // Implementation
    auto4D7FC978_g = lp_unitGroup;
    auto4D7FC978_u = 1;
    while (auto4D7FC978_u <= UnitGroupCount(auto4D7FC978_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(auto4D7FC978_g, auto4D7FC978_u);
        gf_PreloadUnitStoryMap(lv_indexUnit);
        if (lv_indexUnit == UnitGroupUnit(auto4D7FC978_g, auto4D7FC978_u)) {
            auto4D7FC978_u = auto4D7FC978_u + 1;
        }
    }
}

void gf_PreloadUnitStoryMap (unit lp_unit) {
    // Implementation
    PreloadObject(c_gameCatalogUnit, (UnitGetType(lp_unit)), false);
    UnitLoadModel(lp_unit);
}

void gf_PrepareRoomActorVisibility (int lp_roomID) {
    int autoC888A67E_as;
    int autoC888A67E_ae;
    int autoC888A67E_ai;

    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_actorID = 0;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/EE48D823") + gf_RoomName(lp_roomID)), false);
    autoC888A67E_as = gv_c_ACTOR_FIRST;
    autoC888A67E_ae = gv_c_ACTOR_LAST;
    autoC888A67E_ai = 1;
    lv_actorIndex = autoC888A67E_as;
    if (autoC888A67E_ai > 0 || (autoC888A67E_ai == 0 && autoC888A67E_as < autoC888A67E_ae)) {
        while (lv_actorIndex <= autoC888A67E_ae) {
            lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
            if ((gf_ActorIsEnabledInRoom(lv_actorID, lp_roomID) == false)) {
                gf_RemoveVisibleUnit(false, gf_ActorUnit(lv_actorID));
            }
            else {
                TriggerDebugOutput(1, (StringExternal("Param/Value/E4C128DC") + gf_ActorName(lv_actorID)), false);
                gf_ReloadRoomActorAnimation(lv_actorID, lp_roomID);
                gf_PlayActorLightingAnim(lv_actorID, 0, lp_roomID, 0);
                gf_RemoveVisibleUnit(true, gf_ActorUnit(lv_actorID));
            }
            lv_actorIndex = lv_actorIndex + autoC888A67E_ai;
        }
    }
    else if (autoC888A67E_ai < 0 || (autoC888A67E_ai == 0 && autoC888A67E_ae < autoC888A67E_as)) {
        while (lv_actorIndex >= autoC888A67E_ae) {
            lv_actorID = gv_actors[lv_actorIndex].lv_actorID;
            if ((gf_ActorIsEnabledInRoom(lv_actorID, lp_roomID) == false)) {
                gf_RemoveVisibleUnit(false, gf_ActorUnit(lv_actorID));
            }
            else {
                TriggerDebugOutput(1, (StringExternal("Param/Value/E4C128DC") + gf_ActorName(lv_actorID)), false);
                gf_ReloadRoomActorAnimation(lv_actorID, lp_roomID);
                gf_PlayActorLightingAnim(lv_actorID, 0, lp_roomID, 0);
                gf_RemoveVisibleUnit(true, gf_ActorUnit(lv_actorID));
            }
            lv_actorIndex = lv_actorIndex + autoC888A67E_ai;
        }
    }
}

void gf_PrepareRoomActors (int lp_roomID, bool lp_includeRaynor) {
    int autoBE62A339_val;

    // Variable Declarations
    int lv_actorIndex;

    // Variable Initialization
    lv_actorIndex = 0;

    // Implementation
    gf_PrepareRoomActorVisibility(lp_roomID);
    autoBE62A339_val = lp_roomID;
    if (autoBE62A339_val == 11) {
    }
    else if (autoBE62A339_val == 6) {
        if ((lp_includeRaynor == true)) {
            gf_ResetActorToLocation(2, PointFromId(89));
        }
        else {
        }
        gf_ResetActorToLocation(3, PointFromId(91));
        gf_ResetActorToLocation(1, PointFromId(495));
    }
    else {
    }
}

void gf_PrepareRoom (int lp_room) {
    int autoD1937875_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 0;

    // Implementation
    SoundSetReverb("Reverb_StoryModeTest", 0.0, false, false);
    autoD1937875_val = lp_room;
    if (autoD1937875_val == 11) {
        TriggerExecute(gt_PrepareRoomGalaxy, true, false);
    }
    else if (autoD1937875_val == 6) {
        TriggerExecute(gt_PrepareRoomMarSara, true, false);
    }
    else if (autoD1937875_val == 15) {
        TriggerExecute(gt_PrepareRoomVoid, true, false);
    }
    else {
    }
    SoundLengthQueryWait();
}

void gf_WalkinRoom (int lp_room) {
    int auto0CE9CDAF_val;

    // Implementation
    auto0CE9CDAF_val = lp_room;
    if (auto0CE9CDAF_val == 6) {
        TriggerExecute(gt_WalkinMarSara, true, true);
    }
    else {
    }
}

void gf_EnterRoom (int lp_room, bool lp_showTransition) {
    int auto63D10BA2_val;

    // Implementation
    gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
    if ((lp_showTransition == true)) {
        gf_WalkinRoom(lp_room);
    }
    else {
    }
    auto63D10BA2_val = lp_room;
    if (auto63D10BA2_val == 6) {
        TriggerExecute(gt_EnterMarSara, true, false);
    }
    else {
    }
}

void gf_LeaveRoomMarSara (bool lp_showTransition) {
    // Implementation
    gf_TurnMarSaraBarBackgroundSoundOnOff(false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Cover", false);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", false);
    gf_MuteJukebox(true, gv_marSaraJukeboxID);
}

void gf_LeaveRoomGalaxy (bool lp_showTransition) {
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), true);
}

void gf_LeaveRoom (int lp_room, bool lp_showTransition, bool lp_stopTransmissions) {
    int autoF20B8E05_val;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/8A0D742E") + gf_RoomName(lp_room)), false);
    autoF20B8E05_val = lp_room;
    if (autoF20B8E05_val == 6) {
        gf_LeaveRoomMarSara(lp_showTransition);
    }
    else if (autoF20B8E05_val == 11) {
        gf_LeaveRoomGalaxy(lp_showTransition);
    }
    else {
    }
    if ((lp_stopTransmissions == true)) {
        gf_StopAllTransmissionConversation();
    }
    else {
    }
}

void gf_InitMarSaraBarUnits () {
    // Implementation
    gv_marSaraRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, 0, 0), 0);
    gf_ShowHideUnitGroup(false, gv_marSaraRoomUnits);
    gv_marSaraRoom = UnitFromId(80);
}

void gf_InitMarSaraBarHotspots () {
    // Implementation
    gv_marSaraAdjutant = UnitFromId(97);
    gv_marSaraProps = UnitFromId(97);
    gv_marSaraBadge = UnitFromId(324);
    gv_marSaraBriefcase = UnitFromId(144);
    gv_marSaraHydra = UnitFromId(236);
    gv_marSaraJukebox = UnitFromId(81);
    gv_marSaraPinboard = UnitFromId(160);
    gv_marSaraTV = UnitFromId(102);
    gf_AddClickable(gv_clickables, gv_marSaraBriefcase, 6, 2);
    gf_AddClickable(gv_clickables, gv_marSaraTV, 6, 3);
    gf_AddClickable(gv_clickables, gv_marSaraJukebox, 6, 2);
    if ((libCamp_gf_MissionStatusCheck(1, 2) == true)) {
    }
    else {
    }
    if ((libCamp_gf_MissionStatusCheck(2, 2) == true)) {
        gf_AddClickable(gv_clickables, gv_marSaraBadge, 6, 3);
        gf_AddClickable(gv_clickables, gv_marSaraHydra, 6, 3);
    }
    else {
    }
}

bool gf_RoomStates (int lp_stateType, int lp_room) {
    // Variable Declarations
    string lv_states;
    int lv_index;

    // Variable Initialization
    lv_states = "";
    lv_index = 0;

    // Implementation
    lv_states = libCamp_gf_StoryModeRoomStates();
    lv_index = gf_RoomStatesIndex(lp_stateType, lp_room);
    return StringEqual(StringSub(lv_states, lv_index, lv_index), "1", c_stringCase);
}

void gf_SetRoomStates (int lp_stateType, int lp_room, bool lp_states) {
    // Variable Declarations
    string lv_states;
    int lv_index;
    string lv_newState;

    // Variable Initialization
    lv_states = "";
    lv_index = 0;
    lv_newState = "";

    // Implementation
    lv_states = libCamp_gf_StoryModeRoomStates();
    lv_index = gf_RoomStatesIndex(lp_stateType, lp_room);
    if ((lp_states == true)) {
        lv_newState = "1";
    }
    else {
        lv_newState = "0";
    }
    libCamp_gf_SetStoryModeRoomStates(StringReplace(lv_states, lv_newState, lv_index, lv_index));
}

int gf_RoomStatesIndex (int lp_stateType, int lp_room) {
    // Implementation
    return (((lp_stateType) * gv_c_ROOM_LAST) + (lp_room));
}

void gf_RegisterRoomStates () {
    // Implementation
    libCamp_gf_RegisterStoryModeRoomStatesDefaultCallback(gt_RoomStatesDefaultCallback);
}

int gf_RoomLocation (int lp_room) {
    int auto403A5568_val;

    // Implementation
    auto403A5568_val = lp_room;
    if (auto403A5568_val == 6) {
        return 1;
    }
    else {
    }
    return 0;
}

int gf_ConvertIntegerToRoomLocation (int lp_index) {
    // Implementation
    return lp_index;
}

bool gf_RoomIsOnLocation (int lp_room, int lp_location) {
    // Implementation
    return (gf_RoomLocation(lp_room) == lp_location);
}

bool gf_RoomLocationIsEnabled (int lp_location) {
    // Implementation
    return gv_roomLocationEnabled[(lp_location)];
}

void gf_EnableRoomLocation (bool lp_enableDisable, int lp_location) {
    // Implementation
    gv_roomLocationEnabled[(lp_location)] = (lp_enableDisable == true);
}

void gf_UnloadLocation (int lp_location) {
    int auto0878F892_as;
    int auto0878F892_ae;
    int auto0878F892_ai;

    // Variable Declarations
    int lv_index;
    int lv_room;

    // Variable Initialization
    lv_index = 0;
    lv_room = 0;

    // Implementation
    auto0878F892_as = gv_c_ROOM_FIRST;
    auto0878F892_ae = gv_c_ROOM_LAST;
    auto0878F892_ai = 1;
    lv_index = auto0878F892_as;
    if (auto0878F892_ai > 0 || (auto0878F892_ai == 0 && auto0878F892_as < auto0878F892_ae)) {
        while (lv_index <= auto0878F892_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            if ((gf_RoomIsOnLocation(lv_room, lp_location) == true)) {
                gf_UnloadRoom(lv_room);
            }
            else {
            }
            lv_index = lv_index + auto0878F892_ai;
        }
    }
    else if (auto0878F892_ai < 0 || (auto0878F892_ai == 0 && auto0878F892_ae < auto0878F892_as)) {
        while (lv_index >= auto0878F892_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            if ((gf_RoomIsOnLocation(lv_room, lp_location) == true)) {
                gf_UnloadRoom(lv_room);
            }
            else {
            }
            lv_index = lv_index + auto0878F892_ai;
        }
    }
}

void gf_UnloadRoom (int lp_room) {
    unitgroup autoF63B25EA_g;
    int autoF63B25EA_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization
    lv_pickedUnit = null;

    // Implementation
    if ((gv_roomPreloaded[(lp_room)] == false)) {
        return ;
    }
    else {
    }
    gv_roomPreloaded[(lp_room)] = false;
    autoF63B25EA_g = gf_RoomUnits(lp_room);
    autoF63B25EA_u = 1;
    while (autoF63B25EA_u <= UnitGroupCount(autoF63B25EA_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(autoF63B25EA_g, autoF63B25EA_u);
        UnitUnloadModel(lv_pickedUnit);
        if (lv_pickedUnit == UnitGroupUnit(autoF63B25EA_g, autoF63B25EA_u)) {
            autoF63B25EA_u = autoF63B25EA_u + 1;
        }
    }
}

void gf_PreloadLocation (int lp_location) {
    int autoF4EEB69E_as;
    int autoF4EEB69E_ae;
    int autoF4EEB69E_ai;

    // Variable Declarations
    int lv_index;
    int lv_room;

    // Variable Initialization
    lv_index = 0;
    lv_room = 0;

    // Implementation
    autoF4EEB69E_as = gv_c_ROOM_FIRST;
    autoF4EEB69E_ae = gv_c_ROOM_LAST;
    autoF4EEB69E_ai = 1;
    lv_index = autoF4EEB69E_as;
    if (autoF4EEB69E_ai > 0 || (autoF4EEB69E_ai == 0 && autoF4EEB69E_as < autoF4EEB69E_ae)) {
        while (lv_index <= autoF4EEB69E_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            if ((gf_RoomIsOnLocation(lv_room, lp_location) == true) && (gf_RoomIsEnabled(lv_room) == true)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/760FB0C0") + gf_RoomName(lv_room)), false);
                gf_PreloadRoomIfCondition(lv_room, true);
            }
            else {
            }
            lv_index = lv_index + autoF4EEB69E_ai;
        }
    }
    else if (autoF4EEB69E_ai < 0 || (autoF4EEB69E_ai == 0 && autoF4EEB69E_ae < autoF4EEB69E_as)) {
        while (lv_index >= autoF4EEB69E_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            if ((gf_RoomIsOnLocation(lv_room, lp_location) == true) && (gf_RoomIsEnabled(lv_room) == true)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/760FB0C0") + gf_RoomName(lv_room)), false);
                gf_PreloadRoomIfCondition(lv_room, true);
            }
            else {
            }
            lv_index = lv_index + autoF4EEB69E_ai;
        }
    }
}

void gf_ReloadLocations () {
    int autoD9FD6817_as;
    int autoD9FD6817_ae;
    int autoD9FD6817_ai;

    // Variable Declarations
    int lv_index;
    int lv_room;
    int lv_location;
    string lv_image;

    // Variable Initialization
    lv_index = 0;
    lv_room = 0;
    lv_location = 2;
    lv_image = null;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/E6AEF428"), false);
    if ((gv_currentLocation == 0)) {
        return ;
    }
    else {
    }
    autoD9FD6817_as = gv_c_ROOMLOCATION_FIRST;
    autoD9FD6817_ae = gv_c_ROOMLOCATION_LAST;
    autoD9FD6817_ai = 1;
    lv_index = autoD9FD6817_as;
    if (autoD9FD6817_ai > 0 || (autoD9FD6817_ai == 0 && autoD9FD6817_as < autoD9FD6817_ae)) {
        while (lv_index <= autoD9FD6817_ae) {
            lv_location = gf_ConvertIntegerToRoomLocation(lv_index);
            if ((lv_location == gv_currentLocation)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/C2DA54AC") + IntToText(lv_index)), false);
                gf_PreloadLocation(lv_location);
            }
            else {
                gf_UnloadLocation(lv_location);
            }
            lv_index = lv_index + autoD9FD6817_ai;
        }
    }
    else if (autoD9FD6817_ai < 0 || (autoD9FD6817_ai == 0 && autoD9FD6817_ae < autoD9FD6817_as)) {
        while (lv_index >= autoD9FD6817_ae) {
            lv_location = gf_ConvertIntegerToRoomLocation(lv_index);
            if ((lv_location == gv_currentLocation)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/C2DA54AC") + IntToText(lv_index)), false);
                gf_PreloadLocation(lv_location);
            }
            else {
                gf_UnloadLocation(lv_location);
            }
            lv_index = lv_index + autoD9FD6817_ai;
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/BBFEC2A0"), false);
    gf_ReloadActors(false);
    TriggerDebugOutput(1, StringExternal("Param/Value/18FFC861"), false);
}

void gf_TurnMarSaraBarBackgroundSoundOnOff (bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetMuted");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetPaused");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetMuted");
    }
    else {
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_Fan), "SoundSetMuted 1");
        ActorSend(ActorFrom(gv_sOUNDACTOR_MarSara_NeonSign), "SoundSetMuted 1");
    }
}

void gf_RoomScenePrepare (int lp_room, int lp_type) {
    int autoF40C51C7_val;
    int auto30B20C87_val;

    // Implementation
    gv_roomScenePreparedCount=gv_roomScenePreparedCount + 1;
    gv_roomScenePrepared[gv_roomScenePreparedCount] = lp_room;
    gv_roomScenePreparedType[gv_roomScenePreparedCount] = lp_type;
    autoF40C51C7_val = lp_room;
    if (autoF40C51C7_val == 6) {
        auto30B20C87_val = lp_type;
        if (auto30B20C87_val == 2) {
            gf_TurnAnimationPropertiesOnOffInstantly(gv_marSaraTV, "Work", true);
        }
        else if (auto30B20C87_val == 0) {
            gf_MuteJukebox(true, gv_marSaraJukeboxID);
        }
        else {
        }
    }
    else {
    }
}

void gf_RoomSceneClearAll () {
    int autoEBC60DCB_as;
    int autoEBC60DCB_ae;
    int autoEBC60DCB_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoEBC60DCB_as = 1;
    autoEBC60DCB_ae = gv_roomScenePreparedCount;
    autoEBC60DCB_ai = 1;
    lv_index = autoEBC60DCB_as;
    if (autoEBC60DCB_ai > 0 || (autoEBC60DCB_ai == 0 && autoEBC60DCB_as < autoEBC60DCB_ae)) {
        while (lv_index <= autoEBC60DCB_ae) {
            gf_RoomSceneClear(gv_roomScenePrepared[lv_index], gv_roomScenePreparedType[lv_index]);
            lv_index = lv_index + autoEBC60DCB_ai;
        }
    }
    else if (autoEBC60DCB_ai < 0 || (autoEBC60DCB_ai == 0 && autoEBC60DCB_ae < autoEBC60DCB_as)) {
        while (lv_index >= autoEBC60DCB_ae) {
            gf_RoomSceneClear(gv_roomScenePrepared[lv_index], gv_roomScenePreparedType[lv_index]);
            lv_index = lv_index + autoEBC60DCB_ai;
        }
    }
    gv_roomScenePreparedCount = 0;
}

void gf_RoomSceneClear (int lp_room, int lp_type) {
    int auto672D7D05_val;
    int auto91B6F2A9_val;

    // Implementation
    auto672D7D05_val = lp_room;
    if (auto672D7D05_val == 6) {
        auto91B6F2A9_val = lp_type;
        if (auto91B6F2A9_val == 2) {
        }
        else if (auto91B6F2A9_val == 0) {
            gf_MuteJukebox(false, gv_marSaraJukeboxID);
        }
        else {
        }
    }
    else {
    }
}

void gf_ViewRoomCamera (int lp_room, playergroup lp_players, fixed lp_duration) {
    playergroup auto3C20983D_g;
    int auto3C20983D_p;
    int auto67E08BC8_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 0;

    // Implementation
    auto3C20983D_g = lp_players;
    auto3C20983D_p = 1;
    while (auto3C20983D_p <= PlayerGroupCount(auto3C20983D_g)) {
        lv_player = PlayerGroupPlayer(auto3C20983D_g, auto3C20983D_p);
        auto67E08BC8_val = lp_room;
        {
            CameraUseModel(lv_player, gf_RoomUnit(lp_room), "Default", lp_duration);
            gf_ClearAnimationwithblendtime(gv_aNIMID_ZOOM, gf_RoomUnit(1), 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(1)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, 0.0);
        }
        if (lv_player == PlayerGroupPlayer(auto3C20983D_g, auto3C20983D_p)) {
            auto3C20983D_p = auto3C20983D_p + 1;
        }
    }
}

unit gf_RoomUnit (int lp_roomID) {
    int auto7FD5B867_val;

    // Implementation
    auto7FD5B867_val = lp_roomID;
    if (auto7FD5B867_val == 6) {
        return gv_marSaraRoom;
    }
    else if (auto7FD5B867_val == 11) {
        return gv_galaxyRoom;
    }
    else if (auto7FD5B867_val == 15) {
        return gv_voidRoom;
    }
    else {
    }
    return null;
}

unitgroup gf_RoomUnits (int lp_room) {
    int auto6A11BBD9_val;

    // Implementation
    auto6A11BBD9_val = lp_room;
    if (auto6A11BBD9_val == 6) {
        return gv_marSaraRoomUnits;
    }
    else if (auto6A11BBD9_val == 11) {
        return gv_galaxyRoomUnits;
    }
    else if (auto6A11BBD9_val == 15) {
        return gv_voidRoomUnits;
    }
    else {
    }
    return UnitGroupEmpty();
}

bool gf_RoomIsEnabled (int lp_room) {
    // Variable Declarations
    int lv_indexResearch;

    // Variable Initialization
    lv_indexResearch = 0;

    // Implementation
    if ((gf_RoomLocationIsEnabled(gf_RoomLocation(lp_room)) == false)) {
        return false;
    }
    else {
    }
    return true;
}

text gf_RoomName (int lp_room) {
    int auto21353DF3_val;

    // Implementation
    auto21353DF3_val = lp_room;
    if (auto21353DF3_val == 6) {
        return StringExternal("Param/Value/A97F1CC2");
    }
    else if (auto21353DF3_val == 11) {
        return StringExternal("Param/Value/474CF0AF");
    }
    else if (auto21353DF3_val == 15) {
        return StringExternal("Param/Value/E08A5DE1");
    }
    else if (auto21353DF3_val == 0) {
        return StringExternal("Param/Value/706237AC");
    }
    else {
    }
    return StringExternal("Param/Value/0C4C95A5");
}

int gf_RoomFromIndex (int lp_index) {
    int auto9E8DFA28_val;

    // Implementation
    auto9E8DFA28_val = lp_index;
    if (auto9E8DFA28_val == (6)) {
        return 6;
    }
    else if (auto9E8DFA28_val == (11)) {
        return 11;
    }
    else if (auto9E8DFA28_val == (15)) {
        return 15;
    }
    else {
    }
    return 0;
}

void gf_ChangeRoom (int lp_room, bool lp_showTransition) {
    // Implementation
    gf_GoToRoom(lp_room, lp_showTransition);
    gf_EnterRoom(lp_room, lp_showTransition);
    gf_HideFullScreenImage(false);
}

void gf_GoToRoom (int lp_room, bool lp_showTransition) {
    // Variable Declarations
    int lv_oldLocation;
    int lv_location;

    // Variable Initialization
    lv_oldLocation = 2;
    lv_location = 2;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/A1DB48E9") + gf_RoomName(lp_room) + StringExternal("Param/Value/7E5C57BE") + gf_RoomName(gv_currentRoom)), false);
    if ((lp_room != gv_currentRoom)) {
        if ((gv_currentRoom != 0)) {
            if ((lp_room != 11)) {
                gf_LeaveRoom(gv_currentRoom, lp_showTransition, true);
            }
            else {
                gf_LeaveRoom(gv_currentRoom, lp_showTransition, false);
            }
        }
        else {
        }
        StorySetChange();
        gv_currentRoom = lp_room;
        lv_location = gf_RoomLocation(gv_currentRoom);
        if ((lv_location != 0)) {
            lv_oldLocation = gv_currentLocation;
            gv_currentLocation = lv_location;
            if ((lv_oldLocation != gv_currentLocation) && (gv_currentLocation != 0)) {
                gf_ReloadLocations();
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    gf_PrepareRoom(lp_room);
    gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
}

point gf_CenterOfRoom (int lp_room) {
    // Implementation
    return UnitGetPosition(gf_RoomUnit(lp_room));
}

void gf_AddBGActor (int lp_actorID, point lp_home) {
    // Implementation
    gv_bGActorCount=gv_bGActorCount + 1;
    gv_bGActors[gv_bGActorCount].lv_actorID = lp_actorID;
    gv_bGActors[gv_bGActorCount].lv_home = lp_home;
    gv_bGActors[gv_bGActorCount].lv_nodeCount = 0;
    gv_bGActors[gv_bGActorCount].lv_doTrigger = TriggerCreate("gt_BGActorNodeDo_Func");
    gv_bGActors[gv_bGActorCount].lv_currentNodeID = 0;
}

int gf_LastAddedBGActorID () {
    // Implementation
    return gv_bGActorCount;
}

int gf_GetBGActorID (int lp_actorID) {
    int auto82C6B2C0_as;
    int auto82C6B2C0_ae;
    int auto82C6B2C0_ai;

    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Implementation
    auto82C6B2C0_as = 1;
    auto82C6B2C0_ae = gv_bGActorCount;
    auto82C6B2C0_ai = 1;
    lv_bGActorID = auto82C6B2C0_as;
    if (auto82C6B2C0_ai > 0 || (auto82C6B2C0_ai == 0 && auto82C6B2C0_as < auto82C6B2C0_ae)) {
        while (lv_bGActorID <= auto82C6B2C0_ae) {
            if ((gv_bGActors[lv_bGActorID].lv_actorID == lp_actorID)) {
                return lv_bGActorID;
            }
            else {
            }
            lv_bGActorID = lv_bGActorID + auto82C6B2C0_ai;
        }
    }
    else if (auto82C6B2C0_ai < 0 || (auto82C6B2C0_ai == 0 && auto82C6B2C0_ae < auto82C6B2C0_as)) {
        while (lv_bGActorID >= auto82C6B2C0_ae) {
            if ((gv_bGActors[lv_bGActorID].lv_actorID == lp_actorID)) {
                return lv_bGActorID;
            }
            else {
            }
            lv_bGActorID = lv_bGActorID + auto82C6B2C0_ai;
        }
    }
    return -1;
}

int gf_GetBGActorIDByActionTrigger (trigger lp_actionTrigger) {
    int auto014E7E2E_as;
    int auto014E7E2E_ae;
    int auto014E7E2E_ai;
    int auto9EF98DEA_as;
    int auto9EF98DEA_ae;
    int auto9EF98DEA_ai;

    // Variable Declarations
    int lv_actorID;
    int lv_nodeID;

    // Variable Initialization
    lv_actorID = 0;
    lv_nodeID = 0;

    // Implementation
    auto014E7E2E_as = 1;
    auto014E7E2E_ae = gv_bGActorCount;
    auto014E7E2E_ai = 1;
    lv_actorID = auto014E7E2E_as;
    if (auto014E7E2E_ai > 0 || (auto014E7E2E_ai == 0 && auto014E7E2E_as < auto014E7E2E_ae)) {
        while (lv_actorID <= auto014E7E2E_ae) {
            auto9EF98DEA_as = 1;
            auto9EF98DEA_ae = gv_bGActors[lv_actorID].lv_nodeCount;
            auto9EF98DEA_ai = 1;
            lv_nodeID = auto9EF98DEA_as;
            if (auto9EF98DEA_ai > 0 || (auto9EF98DEA_ai == 0 && auto9EF98DEA_as < auto9EF98DEA_ae)) {
                while (lv_nodeID <= auto9EF98DEA_ae) {
                    if ((gv_bGActors[lv_actorID].lv_nodes[lv_nodeID].lv_actionTrigger == lp_actionTrigger)) {
                        return lv_actorID;
                    }
                    else {
                    }
                    lv_nodeID = lv_nodeID + auto9EF98DEA_ai;
                }
            }
            else if (auto9EF98DEA_ai < 0 || (auto9EF98DEA_ai == 0 && auto9EF98DEA_ae < auto9EF98DEA_as)) {
                while (lv_nodeID >= auto9EF98DEA_ae) {
                    if ((gv_bGActors[lv_actorID].lv_nodes[lv_nodeID].lv_actionTrigger == lp_actionTrigger)) {
                        return lv_actorID;
                    }
                    else {
                    }
                    lv_nodeID = lv_nodeID + auto9EF98DEA_ai;
                }
            }
            lv_actorID = lv_actorID + auto014E7E2E_ai;
        }
    }
    else if (auto014E7E2E_ai < 0 || (auto014E7E2E_ai == 0 && auto014E7E2E_ae < auto014E7E2E_as)) {
        while (lv_actorID >= auto014E7E2E_ae) {
            auto9EF98DEA_as = 1;
            auto9EF98DEA_ae = gv_bGActors[lv_actorID].lv_nodeCount;
            auto9EF98DEA_ai = 1;
            lv_nodeID = auto9EF98DEA_as;
            if (auto9EF98DEA_ai > 0 || (auto9EF98DEA_ai == 0 && auto9EF98DEA_as < auto9EF98DEA_ae)) {
                while (lv_nodeID <= auto9EF98DEA_ae) {
                    if ((gv_bGActors[lv_actorID].lv_nodes[lv_nodeID].lv_actionTrigger == lp_actionTrigger)) {
                        return lv_actorID;
                    }
                    else {
                    }
                    lv_nodeID = lv_nodeID + auto9EF98DEA_ai;
                }
            }
            else if (auto9EF98DEA_ai < 0 || (auto9EF98DEA_ai == 0 && auto9EF98DEA_ae < auto9EF98DEA_as)) {
                while (lv_nodeID >= auto9EF98DEA_ae) {
                    if ((gv_bGActors[lv_actorID].lv_nodes[lv_nodeID].lv_actionTrigger == lp_actionTrigger)) {
                        return lv_actorID;
                    }
                    else {
                    }
                    lv_nodeID = lv_nodeID + auto9EF98DEA_ai;
                }
            }
            lv_actorID = lv_actorID + auto014E7E2E_ai;
        }
    }
    return -1;
}

unit gf_GetBGActor (int lp_bGActorID) {
    // Implementation
    return gf_ActorUnit(gv_bGActors[lp_bGActorID].lv_actorID);
}

void gf_AddBGActorNode (int lp_actorID, int lp_nodeType, point lp_targetLoc, bool lp_turnOrNot, fixed lp_stayDuration, string lp_anim1, fixed lp_anim1Duration, string lp_anim2, fixed lp_anim2Duration, string lp_anim3, fixed lp_anim3Duration) {
    int auto36595557_val;

    // Variable Declarations
    int lv_nodeID;
    int lv_animID;

    // Variable Initialization
    lv_nodeID = 0;
    lv_animID = 0;

    // Implementation
    gv_bGActors[lp_actorID].lv_nodeCount=gv_bGActors[lp_actorID].lv_nodeCount + 1;
    lv_nodeID = gv_bGActors[lp_actorID].lv_nodeCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_type = lp_nodeType;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_target = lp_targetLoc;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_turnOrNot = lp_turnOrNot;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_stayDuration = lp_stayDuration;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount = 0;
    auto36595557_val = lp_nodeType;
    if (auto36595557_val == 1) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeMoveArrive_Func");
        TriggerAddEventUnitRegion(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, UnitRefFromUnit(gf_GetBGActor(lp_actorID)), RegionCircle(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_target, 0.2), true);
    }
    else if (auto36595557_val == 0) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeStayExpires_Func");
        TriggerAddEventTimer(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, gv_bGActors[lp_actorID].lv_timer);
    }
    else if (auto36595557_val == 2) {
        gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger = TriggerCreate("gt_BGActorNodeStayExpires_Func");
        TriggerAddEventTimer(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, gv_bGActors[lp_actorID].lv_timer);
    }
    else {
    }
    TriggerEnable(gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_actionTrigger, false);
    if ((lp_anim1 == "")) {
        return ;
    }
    else {
    }
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount=gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount + 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim1;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim1Duration;
    if ((lp_anim2 == "")) {
        return ;
    }
    else {
    }
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount=gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount + 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim2;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim2Duration;
    if ((lp_anim3 == "")) {
        return ;
    }
    else {
    }
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount=gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount + 1;
    lv_animID = gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animCount;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_anim[lv_animID] = lp_anim3;
    gv_bGActors[lp_actorID].lv_nodes[lv_nodeID].lv_animDuration[lv_animID] = lp_anim3Duration;
}

void gf_BGActorStart (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }
    else {
    }
    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/EFFA4A63") + gf_ActorName(lp_actorID)), false);
    if ((gv_bGActors[lv_bGActorID].lv_started == false)) {
        gv_bGActors[lv_bGActorID].lv_started = true;
        gf_ResetActorToLocation(lp_actorID, gv_bGActors[lv_bGActorID].lv_home);
        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        gf_BGActorDoNext(lv_bGActorID);
    }
    else {
        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        libNtve_gf_PauseUnit(gf_ActorUnit(lp_actorID), false);
        gf_BGActorResume(lp_actorID);
    }
}

void gf_BGActorStop (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;
    int lv_nodeID;

    // Variable Initialization
    lv_bGActorID = 0;
    lv_nodeID = 0;

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }
    else {
    }
    if (((gv_bGActors[lv_bGActorID].lv_nodeCount == 0) || (gv_bGActors[lv_bGActorID].lv_started == false))) {
        return ;
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/3A3327C5") + gf_ActorName(lp_actorID)), false);
    gf_BGActorPause(lp_actorID);
    libNtve_gf_PauseUnit(gf_ActorUnit(lp_actorID), true);
    gf_RemoveVisibleUnit(false, gf_ActorUnit(lp_actorID));
}

void gf_BGActorTalkToRaynor (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }
    else {
    }
    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }
    else {
    }
    gf_BGActorPause(lp_actorID);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_GetBGActor(lv_bGActorID), c_animTimeDefault);
}

void gf_BGActorPause (int lp_actorID) {
    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }
    else {
    }
    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/335FC362") + gf_ActorName(lp_actorID)), false);
    TriggerStop(gv_bGActors[lv_bGActorID].lv_doTrigger);
    TimerPause(gv_bGActors[lv_bGActorID].lv_timer, true);
}

void gf_BGActorResume (int lp_actorID) {
    int auto7B059918_val;

    // Variable Declarations
    int lv_bGActorID;
    int lv_currentNodeID;

    // Variable Initialization
    lv_bGActorID = 0;
    lv_currentNodeID = 0;

    // Implementation
    lv_bGActorID = gf_GetBGActorID(lp_actorID);
    if ((lv_bGActorID <= 0)) {
        return ;
    }
    else {
    }
    if ((gv_bGActors[lv_bGActorID].lv_nodeCount == 0)) {
        return ;
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/E9C352CD") + gf_ActorName(lp_actorID)), false);
    lv_currentNodeID = gv_bGActors[lv_bGActorID].lv_currentNodeID;
    TimerPause(gv_bGActors[lv_bGActorID].lv_timer, false);
    auto7B059918_val = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_type;
    if (auto7B059918_val == 1) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
        }
    }
    else if (auto7B059918_val == 0) {
        gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
    }
    else {
    }
}

void gf_BGActorDoNext (int lp_bGActorID) {
    // Variable Declarations
    int lv_currentNodeID;

    // Variable Initialization
    lv_currentNodeID = 0;

    // Implementation
    gv_bGActors[lp_bGActorID].lv_currentNodeID=gv_bGActors[lp_bGActorID].lv_currentNodeID + 1;
    if ((gv_bGActors[lp_bGActorID].lv_currentNodeID > gv_bGActors[lp_bGActorID].lv_nodeCount)) {
        gv_bGActors[lp_bGActorID].lv_currentNodeID = 1;
    }
    else {
    }
    gv_tP_BGActorID = lp_bGActorID;
    gv_tP_BGActorCurrentNodeID = gv_bGActors[lp_bGActorID].lv_currentNodeID;
    TriggerExecute(gv_bGActors[lp_bGActorID].lv_doTrigger, true, false);
}

void gf_HotspotZoom (unit lp_room, string lp_zoomCamera, string lp_animation, fixed lp_duration) {
    playergroup autoB9BF28AF_g;
    int autoB9BF28AF_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization
    lv_indexPlayer = 0;

    // Implementation
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gf_DisplayDebugMessage(StringExternal("Param/Value/2F41D290"));
    autoB9BF28AF_g = PlayerGroupAll();
    autoB9BF28AF_p = 1;
    while (autoB9BF28AF_p <= PlayerGroupCount(autoB9BF28AF_g)) {
        lv_indexPlayer = PlayerGroupPlayer(autoB9BF28AF_g, autoB9BF28AF_p);
        CameraUseModel(lv_indexPlayer, lp_room, lp_zoomCamera, 0.0);
        if (lv_indexPlayer == PlayerGroupPlayer(autoB9BF28AF_g, autoB9BF28AF_p)) {
            autoB9BF28AF_p = autoB9BF28AF_p + 1;
        }
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_room), gv_aNIMID_ZOOM, lp_animation, c_animFlagPlayForever | c_animFlagNonLooping, 0);
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeReal);
    }
    else {
    }
}

void gf_HotspotLeave (int lp_room, trigger lp_prepareRoomCallBack, fixed lp_outDuration, fixed lp_inDuration) {
    // Implementation
    gf_DisplayDebugMessage(StringExternal("Param/Value/536AC473"));
    TriggerDebugOutput(1, StringExternal("Param/Value/E16789E0"), false);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, lp_outDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(lp_prepareRoomCallBack, true, false);
    gf_GoToRoom(lp_room, false);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    CinematicFade(true, lp_inDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

void gf_HotspotLeaveWithCamera (int lp_room, trigger lp_prepareRoomCallBack, string lp_zoomBackCamera, string lp_zoomBackAnimation, fixed lp_zoomBackDuration) {
    playergroup autoFB9AF868_g;
    int autoFB9AF868_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization
    lv_indexPlayer = 0;

    // Implementation
    gf_DisplayDebugMessage(StringExternal("Param/Value/554296D0"));
    gf_StopAllTransmissionConversation();
    TriggerExecute(lp_prepareRoomCallBack, true, false);
    autoFB9AF868_g = PlayerGroupAll();
    autoFB9AF868_p = 1;
    while (autoFB9AF868_p <= PlayerGroupCount(autoFB9AF868_g)) {
        lv_indexPlayer = PlayerGroupPlayer(autoFB9AF868_g, autoFB9AF868_p);
        CameraUseModel(lv_indexPlayer, gf_RoomUnit(lp_room), lp_zoomBackCamera, 0.0);
        if (lv_indexPlayer == PlayerGroupPlayer(autoFB9AF868_g, autoFB9AF868_p)) {
            autoFB9AF868_p = autoFB9AF868_p + 1;
        }
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(lp_room)), gv_aNIMID_ZOOM, lp_zoomBackAnimation, c_animFlagNonLooping, 0);
    if ((lp_zoomBackDuration > 0.0)) {
        Wait(lp_zoomBackDuration, c_timeReal);
    }
    else {
    }
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(lp_room)), gv_aNIMID_ZOOM);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

unit gf_HotspotClicked () {
    // Implementation
    return gv_hotspotClicked;
}

void gf_AddFlashingTextTagToHotspot (unit lp_unit, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Implementation
    if ((ConversationDataStateGetValue(lp_conversationStateIndex) == 1)) {
        return ;
    }
    else {
    }
    gf__AddFlashingTextTag(lp_unit, ConversationDataStateName(lp_conversationStateIndex), ConversationDataStateAttachPoint(lp_conversationStateIndex), lp_offsetX, lp_offsetY, ConversationDataStateImagePath(lp_conversationStateIndex), ConversationDataStateImageEdge(lp_conversationStateIndex), lp_edgeOffsetX, lp_edgeOffsetY);
}

void gf_AddFlashingTextTagToActor (int lp_actor, string lp_conversationStateIndex, int lp_offsetX, int lp_offsetY, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Variable Declarations
    string lv_convo;

    // Variable Initialization
    lv_convo = null;

    // Implementation
    lv_convo = gf_ActorConversation(lp_actor);
    if (((lv_convo == null) || (ConversationDataCanRun(lv_convo, true) == false))) {
        gf_LoadActorComplexAnimation(lp_actor);
        return ;
    }
    else {
    }
    gf__AddFlashingTextTag(gf_ActorUnit(lp_actor), ConversationDataStateName(lp_conversationStateIndex), ConversationDataStateAttachPoint(lp_conversationStateIndex), lp_offsetX, lp_offsetY, ConversationDataStateImagePath(lp_conversationStateIndex), ConversationDataStateImageEdge(lp_conversationStateIndex), lp_edgeOffsetX, lp_edgeOffsetY);
}

void gf__AddFlashingTextTag (unit lp_unit, text lp_text, string lp_attachmentPoint, int lp_offsetX, int lp_offsetY, string lp_edgeImage, int lp_edge, int lp_edgeOffsetX, int lp_edgeOffsetY) {
    // Implementation
    if ((gf_HotspotFlashingTextTag(lp_unit) != c_textTagNone)) {
        return ;
    }
    else {
    }
    if ((gv_hotspots_FlashingTextTagCount >= 30)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CEF2927D"));
        return ;
    }
    else {
    }
    TextTagCreate(lp_text, 18, UnitGetPosition(lp_unit), 0.0, true, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.0, 0.0);
    TextTagAttachToUnitPoint(TextTagLastCreated(), lp_unit, lp_attachmentPoint, lp_offsetX, lp_offsetY);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetEdgeImage(TextTagLastCreated(), lp_edge, lp_edgeImage, lp_edgeOffsetX, lp_edgeOffsetY);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_hotspots_FlashingTextTagCount=gv_hotspots_FlashingTextTagCount + 1;
    gv_hotspots_FlashingTextTags[gv_hotspots_FlashingTextTagCount] = TextTagLastCreated();
    UnitSetCustomValue(lp_unit, (2), IntToFixed(gv_hotspots_FlashingTextTagCount));
    if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == false)) {
        gf_HideFlashingTextTag(false, lp_unit);
    }
    else {
        gf_HideFlashingTextTag(true, lp_unit);
    }
}

int gf_HotspotFlashingTextTag (unit lp_unit) {
    // Variable Declarations
    int lv_index;
    unit lv_hotspot;

    // Variable Initialization
    lv_index = 0;
    lv_hotspot = null;

    // Implementation
    lv_hotspot = lp_unit;
    lv_index = FixedToInt(UnitGetCustomValue(lv_hotspot, (2)));
    if ((lv_index <= 0)) {
        return c_textTagNone;
    }
    else {
    }
    return gv_hotspots_FlashingTextTags[lv_index];
}

bool gf_HotspotFlashingPaused (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_unit, (2)));
    if ((lv_index <= 0)) {
        return false;
    }
    else {
    }
    return gv_hotspots_FlashingPaused[lv_index];
}

string gf_HotspotConvoState (unit lp_unit) {
    int auto5E20D3BB_val;
    unit autoEE6EF645_val;

    // Implementation
    auto5E20D3BB_val = gf_GetUnitClickableRoom(lp_unit);
    if (auto5E20D3BB_val == 6) {
        autoEE6EF645_val = lp_unit;
        if (autoEE6EF645_val == gf_ActorUnit(3)) {
            return "Hotspots|MarSaraTychus";
        }
        else if (autoEE6EF645_val == gv_marSaraBriefcase) {
            return "Hotspots|MarSaraBriefcase";
        }
        else if (autoEE6EF645_val == gv_marSaraTV) {
            return "Hotspots|MarSaraTV";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(3)) {
            return "Hotspots|MarSaraFreedomPoster";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(5)) {
            return "Hotspots|MarSaraVikingPhoto";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(8)) {
            return "Hotspots|MarSaraHydraHunt";
        }
        else if (autoEE6EF645_val == gf_PinboardItem(9)) {
            return "Hotspots|MarSaraKerriganPhoto";
        }
        else if (autoEE6EF645_val == gv_marSaraBadge) {
            return "Hotspots|MarSaraBadge";
        }
        else if (autoEE6EF645_val == gv_marSaraHydra) {
            return "Hotspots|MarSaraHydraHead";
        }
        else {
            return null;
        }
    }
    else {
    }
    return null;
}

void gf_StartFlashingUnit (unit lp_unit) {
    // Variable Declarations
    string lv_convoState;
    int lv_actorID;

    // Variable Initialization
    lv_convoState = null;
    lv_actorID = 0;

    // Implementation
    lv_convoState = gf_HotspotConvoState(lp_unit);
    if ((lv_convoState == null)) {
        return ;
    }
    else {
    }
    lv_actorID = gf_ActorID(lp_unit);
    if ((lv_actorID == 0)) {
        gf_AddFlashingTextTagToHotspot(lp_unit, lv_convoState, 0, 0, 0, 0);
    }
    else {
        gf_AddFlashingTextTagToActor(lv_actorID, lv_convoState, 0, 0, 0, 0);
    }
}

void gf_StopFlashingUnit (unit lp_unit) {
    // Variable Declarations
    int lv_tag;

    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    UnitGroupRemove(gv_hotspots_Flashing, lp_unit);
    lv_tag = gf_HotspotFlashingTextTag(lp_unit);
    if ((lv_tag == c_textTagNone)) {
        return ;
    }
    else {
    }
    UnitSetCustomValue(lp_unit, (2), 0.0);
    TextTagDestroy(lv_tag);
    gf_LoadActorComplexAnimation(gf_ActorID(lp_unit));
}

void gf_HideFlashingTextTag (bool lp_showHide, unit lp_unit) {
    // Variable Declarations
    int lv_tag;

    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    lv_tag = gf_HotspotFlashingTextTag(lp_unit);
    if ((lv_tag != c_textTagNone)) {
        TextTagShow(lv_tag, PlayerGroupAll(), lp_showHide);
        if ((lp_showHide == true)) {
            TextTagPause(lv_tag, false);
        }
        else {
            TextTagPause(lv_tag, true);
        }
    }
    else {
    }
}

void gf_PauseFlashingUnit (bool lp_pauseUnpause, unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = FixedToInt(UnitGetCustomValue(lp_unit, (2)));
    if ((lv_index <= 0)) {
        return ;
    }
    else {
    }
    if ((lp_pauseUnpause == true)) {
        gv_hotspots_FlashingPaused[lv_index] = true;
        gf_HideFlashingTextTag(false, lp_unit);
    }
    else {
        gv_hotspots_FlashingPaused[lv_index] = false;
        if ((UnitGroupHasUnit(gv_visibleUnits, lp_unit) == true)) {
            gf_HideFlashingTextTag(true, lp_unit);
        }
        else {
        }
    }
}

void gf_PauseFlashing (bool lp_pauseUnpause) {
    unitgroup autoDDB96A95_g;
    int autoDDB96A95_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = null;

    // Implementation
    autoDDB96A95_g = gv_hotspots_Flashing;
    autoDDB96A95_u = 1;
    while (autoDDB96A95_u <= UnitGroupCount(autoDDB96A95_g, c_unitCountAll)) {
        lv_unit = UnitGroupUnit(autoDDB96A95_g, autoDDB96A95_u);
        gf_PauseFlashingUnit(lp_pauseUnpause, lv_unit);
        if (lv_unit == UnitGroupUnit(autoDDB96A95_g, autoDDB96A95_u)) {
            autoDDB96A95_u = autoDDB96A95_u + 1;
        }
    }
    if ((lp_pauseUnpause == true)) {
        gf_ShowHideJukeboxTrackInfo(false);
    }
    else {
        gf_ShowHideJukeboxTrackInfo(true);
    }
}

void gf_HotspotHighlighted (unit lp_hotspot, bool lp_highlighted) {
    // Variable Declarations
    int lv_tag;

    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    lv_tag = gf_HotspotFlashingTextTag(lp_hotspot);
    if ((lv_tag != c_textTagNone)) {
        if ((lp_highlighted == true)) {
            TextTagSetTime(lv_tag, c_textTagTimeCurrent, 0.0);
        }
        else {
            TextTagSetTime(lv_tag, c_textTagTimeCurrent, 60.0);
        }
    }
    else {
    }
}

int gf_PlanetPanelPlanetIndexFromPlanet (int lp_planet) {
    int auto362A63CD_as;
    int auto362A63CD_ae;
    int auto362A63CD_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    auto362A63CD_as = 1;
    auto362A63CD_ae = gv_planetPanel_PlanetCount;
    auto362A63CD_ai = 1;
    lv_index = auto362A63CD_as;
    if (auto362A63CD_ai > 0 || (auto362A63CD_ai == 0 && auto362A63CD_as < auto362A63CD_ae)) {
        while (lv_index <= auto362A63CD_ae) {
            if ((gv_planetPanel_Planets[lv_index].lv_planet == lp_planet)) {
                return lv_index;
            }
            else {
            }
            lv_index = lv_index + auto362A63CD_ai;
        }
    }
    else if (auto362A63CD_ai < 0 || (auto362A63CD_ai == 0 && auto362A63CD_ae < auto362A63CD_as)) {
        while (lv_index >= auto362A63CD_ae) {
            if ((gv_planetPanel_Planets[lv_index].lv_planet == lp_planet)) {
                return lv_index;
            }
            else {
            }
            lv_index = lv_index + auto362A63CD_ai;
        }
    }
    return 0;
}

int gf_PlanetPanelPlanetIndexFromPlanetID (int lp_planetID) {
    int autoDF866A6B_as;
    int autoDF866A6B_ae;
    int autoDF866A6B_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoDF866A6B_as = 1;
    autoDF866A6B_ae = gv_planetPanel_PlanetCount;
    autoDF866A6B_ai = 1;
    lv_index = autoDF866A6B_as;
    if (autoDF866A6B_ai > 0 || (autoDF866A6B_ai == 0 && autoDF866A6B_as < autoDF866A6B_ae)) {
        while (lv_index <= autoDF866A6B_ae) {
            if ((gv_planetPanel_Planets[lv_index].lv_planetID == lp_planetID)) {
                return lv_index;
            }
            else {
            }
            lv_index = lv_index + autoDF866A6B_ai;
        }
    }
    else if (autoDF866A6B_ai < 0 || (autoDF866A6B_ai == 0 && autoDF866A6B_ae < autoDF866A6B_as)) {
        while (lv_index >= autoDF866A6B_ae) {
            if ((gv_planetPanel_Planets[lv_index].lv_planetID == lp_planetID)) {
                return lv_index;
            }
            else {
            }
            lv_index = lv_index + autoDF866A6B_ai;
        }
    }
    return 0;
}

int gf_PlanetPanelPlanetIDFromPlanet (int lp_planet) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = gf_PlanetPanelPlanetIndexFromPlanet(lp_planet);
    if ((lv_index <= 0)) {
        return 0;
    }
    else {
    }
    return gv_planetPanel_Planets[lv_index].lv_planetID;
}

int gf_PlanetPanelPlanetFromPlanetID (int lp_planetID) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = gf_PlanetPanelPlanetIndexFromPlanetID(lp_planetID);
    if ((lv_index <= 0)) {
        return c_invalidPlanetId;
    }
    else {
    }
    return gv_planetPanel_Planets[lv_index].lv_planet;
}

bool gf_PlanetPanelPlanetPitched (int lp_planet) {
    // Variable Declarations
    int lv_planetID;

    // Variable Initialization

    // Implementation
    lv_planetID = gf_PlanetPanelPlanetIDFromPlanet(lp_planet);
    if ((lv_planetID == 0)) {
        return false;
    }
    else {
    }
    return gv_planetPanel_PlanetPitched[(lv_planetID)];
}

void gf_PlanetPanelDisplay (int lp_planetID, trigger lp_leaveCallback) {
    // Variable Declarations
    int lv_indexPlanet;
    int lv_missionID;
    string lv_pitches;
    int lv_planet;

    // Variable Initialization
    lv_indexPlanet = 0;
    lv_missionID = 0;

    // Implementation
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    gf_GoToRoom(11, false);
    gf_PlanetPanelDestory();
    if ((lp_leaveCallback == null)) {
        PlanetPanelSetBackButtonEnabled(PlayerGroupAll(), false);
    }
    else {
    }
    gv_planetPanel_LeaveCallback = lp_leaveCallback;
    if ((lp_planetID != 0)) {
        gf_PlanetPanelAddPlanet(lp_planetID, true);
        PlanetSetSelected(PlayerGroupAll(), PlanetLastCreated());
        PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePlay);
    }
    else {
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, true);
}

void gf_PlanetPanelClose () {
    // Variable Declarations
    int lv_planetIndex;
    int lv_missionID;

    // Variable Initialization
    lv_planetIndex = 0;
    lv_missionID = 0;

    // Implementation
    gf_PauseNewItemInfo(false);
    libCamp_gf_HideStoryUI(true, false);
    PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStateDisabled);
    gf_PlanetPanelDestory();
    gf_StopAllTransmissionConversation();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
}

void gf_PlanetPanelDestory () {
    // Implementation
    PlanetClearSelected(PlayerGroupAll());
    PlanetDestroyAll(PlayerGroupAll());
    gv_planetPanel_Created = false;
    gv_planetPanel_PlanetCount = 0;
}

void gf_PlanetPanelAddPlanet (int lp_planetID, bool lp_hideButton) {
    // Variable Declarations
    int lv_planet;

    // Variable Initialization

    // Implementation
    lv_planet = libCamp_gf_AddPlanet(lp_planetID);
    gv_planetPanel_PlanetCount=gv_planetPanel_PlanetCount + 1;
    gv_planetPanel_Planets[gv_planetPanel_PlanetCount].lv_planet = lv_planet;
    gv_planetPanel_Planets[gv_planetPanel_PlanetCount].lv_planetID = lp_planetID;
    if ((lp_hideButton == true)) {
        PlanetSetState(lv_planet, c_planetStateHidden);
    }
    else {
        PlanetSetState(lv_planet, c_planetStateActive);
    }
}

void gf_PlanetPanelPreload () {
    int autoD34D02C8_i;

    // Variable Declarations
    int lv_indexPlanet;
    int lv_missionID;

    // Variable Initialization
    lv_indexPlanet = 0;
    lv_missionID = 0;

    // Implementation
    autoD34D02C8_i = libCamp_gv_tSC_PLANET_FIRST;
    while (autoD34D02C8_i <= libCamp_gv_tSC_PLANET_LAST) {
        lv_indexPlanet = libCamp_gv_tS_PlanetID[autoD34D02C8_i];
        lv_missionID = libCamp_gf_PlanetMission(lv_indexPlanet);
        if ((lv_missionID != 0)) {
            PreloadObject(c_gameCatalogModel, (libCamp_gf_ContactPortraitModel(libCamp_gf_MissionContact(lv_missionID))), false);
            PreloadObject(c_gameCatalogModel, (libCamp_gf_PlanetIconModel(lv_indexPlanet)), false);
            PreloadObject(c_gameCatalogModel, (libCamp_gf_PlanetModel(lv_indexPlanet)), false);
        }
        else {
        }
        autoD34D02C8_i = autoD34D02C8_i + 1;
    }
}

void gf_PlanetPanelGrayoutPortrait (bool lp_grayout) {
    // Implementation
    if ((lp_grayout == true)) {
        PortraitForceTransition(PortraitGetPlanetPanel(), true, true);
    }
    else {
        PortraitForceTransition(PortraitGetPlanetPanel(), false, false);
    }
}

void gf_DisplayIntroTextBox (text lp_header, string lp_headerStyle, text lp_text, string lp_textStyle, int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_width, int lp_height) {
    // Variable Declarations
    int lv_textBorder;

    // Variable Initialization
    lv_textBorder = c_invalidDialogControlId;

    // Implementation
    if ((gv_introTextDialog != c_invalidDialogId)) {
        DialogDestroy(gv_introTextDialog);
    }
    else {
    }
    DialogCreate(lp_width, lp_height, lp_anchor, lp_offsetX, lp_offsetY, true);
    gv_introTextDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 15), 40);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_headerStyle, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -2, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_header, PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    lv_textBorder = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_armory_text_innerframe.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_width, (lp_height - 40));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 50), (lp_height - 90));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lp_textStyle, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textBorder, c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    gf_HideIntroTextBox(true);
}

void gf_HideIntroTextBox (bool lp_showHide) {
    // Implementation
    if ((gv_introTextDialog != c_invalidDialogId)) {
        DialogSetVisible(gv_introTextDialog, PlayerGroupAll(), lp_showHide);
    }
    else {
    }
}

void gf_PlayFidget (string lp_fidget, int lp_actor1, int lp_actor2) {
    // Implementation
    if ((lp_fidget == null)) {
        return ;
    }
    else {
    }
    ConversationDataRegisterUnit(gf_ConvoCharacter(2), gf_ActorUnit(2));
    if ((lp_actor1 != 0)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor1), gf_ActorUnit(lp_actor1));
    }
    else {
    }
    if ((lp_actor2 != 0)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor2), gf_ActorUnit(lp_actor2));
    }
    else {
    }
    ConversationDataRun(lp_fidget, PlayerGroupAll(), c_conversationSkipSimple, true);
    if ((lp_actor1 != 0)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor1), gf_ActorUnit(lp_actor1));
    }
    else {
    }
    if ((lp_actor2 != 0)) {
        ConversationDataRegisterUnit(gf_ConvoCharacter(lp_actor2), gf_ActorUnit(lp_actor2));
    }
    else {
    }
}

void gf_PlayGossip (int lp_actor) {
    int auto537BB163_val;
    int auto46469A7A_val;

    // Variable Declarations
    string lv_gossip;

    // Variable Initialization
    lv_gossip = null;

    // Implementation
    if (((lp_actor == 0) || (lp_actor == gv_currentGossipActor) || (UnitTestState(gf_ActorUnit(lp_actor), c_unitStateHighlightable) == false) || (gf_ActorWithFidget(lp_actor) == false))) {
        return ;
    }
    else {
    }
    lv_gossip = null;
    auto537BB163_val = gv_currentRoom;
    if (auto537BB163_val == 6) {
        auto46469A7A_val = lp_actor;
        if (auto46469A7A_val == 2) {
            lv_gossip = "MarSaraFidgetsDrinks";
        }
        else {
        }
    }
    else {
    }
    if ((lv_gossip == null)) {
        return ;
    }
    else {
    }
    gv_currentGossipActor = lp_actor;
    gf_SetAllSoundChannelVolumesStoryMode(1);
    gf_StopAllTransmissionConversation();
    gf_PlayFidget(lv_gossip, lp_actor, 0);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    if ((gv_currentGossipActor == lp_actor)) {
        gv_currentGossipActor = 0;
    }
    else {
    }
}

void gf_UseConversationCamera (int lp_room, int lp_character, int lp_cameraType, unit lp_cameraObject) {
    int autoF218E54D_val;
    int auto10E63330_val;
    int autoABC25A19_val;
    int auto8E140248_val;
    int autoAFCC7143_val;
    int auto44005C00_val;
    int autoD9DC265E_val;
    int auto5E94A5A2_val;

    // Variable Declarations
    string lv_cameraName;
    string lv_c_StringCharacter;
    string lv_c_StringRaynor;

    // Variable Initialization
    lv_cameraName = "";
    lv_c_StringCharacter = "Character ";
    lv_c_StringRaynor = "Raynor ";

    // Implementation
    gv_convoCameraCurrent = lp_cameraType;
    if ((gv_convoCameraChangeCallback != null)) {
        TriggerStop(gv_convoCameraChangeCallback);
        gv_convoCameraChangeResult = true;
        TriggerExecute(gv_convoCameraChangeCallback, true, true);
        if ((gv_convoCameraChangeResult == false)) {
            return ;
        }
        else {
        }
    }
    else {
    }
    if ((gv_convoCameras[(lp_cameraType)] != null)) {
        CameraApplyInfo(1, gv_convoCameras[(lp_cameraType)], 0.0, -1, 10, true);
        return ;
    }
    else {
    }
    autoF218E54D_val = lp_room;
    if (autoF218E54D_val == 6) {
        auto10E63330_val = lp_character;
        if (auto10E63330_val == 3) {
            if ((gf_UseConversationCameraMarSaraTychus(lp_cameraType) == true)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else if (autoF218E54D_val == 2) {
        autoABC25A19_val = lp_character;
        if (autoABC25A19_val == 3) {
            if ((gf_UseConversationCameraBridgeTychus(lp_cameraType) == true)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else if (autoF218E54D_val == 3) {
        auto8E140248_val = lp_character;
        if (auto8E140248_val == 3) {
            if ((gf_UseConversationCameraCantinaTychus(lp_cameraType) == true)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else if (autoF218E54D_val == 5) {
        autoAFCC7143_val = lp_character;
        if (autoAFCC7143_val == 3) {
            if ((gf_UseConversationCameraCharTychus(lp_cameraType) == true)) {
                return ;
            }
            else {
            }
        }
        else {
        }
    }
    else if (autoF218E54D_val == 4) {
        auto44005C00_val = lp_character;
        {
        }
    }
    else if (autoF218E54D_val == 1) {
        autoD9DC265E_val = lp_character;
        {
        }
    }
    else {
    }
    auto5E94A5A2_val = lp_cameraType;
    if (auto5E94A5A2_val == 1) {
        lv_cameraName = "Master";
    }
    else if (auto5E94A5A2_val == 2) {
        if ((gv_convoCameraCustomCallback != null)) {
            TriggerExecute(gv_convoCameraCustomCallback, true, true);
        }
        else {
        }
        return ;
    }
    else if (auto5E94A5A2_val == 15) {
        lv_cameraName = (lv_c_StringRaynor + "Closeup");
    }
    else if (auto5E94A5A2_val == 16) {
        lv_cameraName = (lv_c_StringRaynor + "Medium");
    }
    else if (auto5E94A5A2_val == 17) {
        lv_cameraName = (lv_c_StringRaynor + "Shoulder");
    }
    else if (auto5E94A5A2_val == 18) {
        lv_cameraName = (lv_c_StringRaynor + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 19) {
        lv_cameraName = (lv_c_StringRaynor + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 20) {
        lv_cameraName = (lv_c_StringRaynor + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 3) {
        lv_cameraName = (lv_c_StringCharacter + "Closeup");
    }
    else if (auto5E94A5A2_val == 4) {
        lv_cameraName = (lv_c_StringCharacter + "Medium");
    }
    else if (auto5E94A5A2_val == 5) {
        lv_cameraName = (lv_c_StringCharacter + "Shoulder");
    }
    else if (auto5E94A5A2_val == 6) {
        lv_cameraName = (lv_c_StringCharacter + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 7) {
        lv_cameraName = (lv_c_StringCharacter + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 8) {
        lv_cameraName = (lv_c_StringCharacter + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 9) {
        lv_cameraName = (lv_c_StringCharacter + "Closeup");
    }
    else if (auto5E94A5A2_val == 10) {
        lv_cameraName = (lv_c_StringCharacter + "Medium");
    }
    else if (auto5E94A5A2_val == 11) {
        lv_cameraName = (lv_c_StringCharacter + "Shoulder");
    }
    else if (auto5E94A5A2_val == 12) {
        lv_cameraName = (lv_c_StringCharacter + "Pushin");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 13) {
        lv_cameraName = (lv_c_StringCharacter + "Pushout");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else if (auto5E94A5A2_val == 14) {
        lv_cameraName = (lv_c_StringCharacter + "Pan Medium");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_cameraObject), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    }
    else {
        return ;
    }
    gf_DisplayDebugMessage((StringExternal("Param/Value/61281884") + gf_RoomName(lp_room) + StringExternal("Param/Value/B463AF26") + gf_ActorName(lp_character) + StringExternal("Param/Value/20728E6C") + StringToText(lv_cameraName)));
    CameraUseModel(1, lp_cameraObject, lv_cameraName, 0.0);
}

bool gf_UseConversationCameraMarSaraTychus (int lp_cameraType) {
    int autoFA824B7F_val;

    // Implementation
    autoFA824B7F_val = lp_cameraType;
    if (autoFA824B7F_val == 1) {
        CameraApplyInfo(1, CameraInfoFromId(426), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == 15) {
        CameraApplyInfo(1, CameraInfoFromId(485), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == 16) {
        CameraApplyInfo(1, CameraInfoFromId(488), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == 3) {
        CameraApplyInfo(1, CameraInfoFromId(423), 0.0, -1, 10, true);
    }
    else if (autoFA824B7F_val == 4) {
        CameraApplyInfo(1, CameraInfoFromId(492), 0.0, -1, 10, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeTosh (int lp_cameraType) {
    int auto883C35C4_val;

    // Implementation
    auto883C35C4_val = lp_cameraType;
    if (auto883C35C4_val == 1) {
    }
    else if (auto883C35C4_val == 15) {
    }
    else if (auto883C35C4_val == 16) {
    }
    else if (auto883C35C4_val == 17) {
    }
    else if (auto883C35C4_val == 3) {
    }
    else if (auto883C35C4_val == 4) {
    }
    else if (auto883C35C4_val == 5) {
    }
    else if (auto883C35C4_val == 9) {
    }
    else if (auto883C35C4_val == 10) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeHorner (int lp_cameraType) {
    int autoE9D988A6_val;

    // Implementation
    autoE9D988A6_val = lp_cameraType;
    if (autoE9D988A6_val == 1) {
    }
    else if (autoE9D988A6_val == 15) {
    }
    else if (autoE9D988A6_val == 16) {
    }
    else if (autoE9D988A6_val == 3) {
    }
    else if (autoE9D988A6_val == 4) {
    }
    else if (autoE9D988A6_val == 5) {
    }
    else if (autoE9D988A6_val == 9) {
    }
    else if (autoE9D988A6_val == 10) {
    }
    else if (autoE9D988A6_val == 11) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeHanson (int lp_cameraType) {
    int autoC4B7DAA8_val;

    // Implementation
    autoC4B7DAA8_val = lp_cameraType;
    if (autoC4B7DAA8_val == 1) {
    }
    else if (autoC4B7DAA8_val == 15) {
    }
    else if (autoC4B7DAA8_val == 16) {
    }
    else if (autoC4B7DAA8_val == 17) {
    }
    else if (autoC4B7DAA8_val == 3) {
    }
    else if (autoC4B7DAA8_val == 4) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeTychus (int lp_cameraType) {
    int autoB62DE91B_val;

    // Implementation
    autoB62DE91B_val = lp_cameraType;
    if (autoB62DE91B_val == 1) {
    }
    else if (autoB62DE91B_val == 15) {
    }
    else if (autoB62DE91B_val == 16) {
    }
    else if (autoB62DE91B_val == 3) {
    }
    else if (autoB62DE91B_val == 4) {
    }
    else if (autoB62DE91B_val == 9) {
    }
    else if (autoB62DE91B_val == 10) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraBridgeCommunicator (int lp_cameraType) {
    int autoBF5DA589_val;

    // Implementation
    autoBF5DA589_val = lp_cameraType;
    if (autoBF5DA589_val == 1) {
    }
    else if (autoBF5DA589_val == 15) {
    }
    else if (autoBF5DA589_val == 16) {
    }
    else if (autoBF5DA589_val == 3) {
    }
    else if (autoBF5DA589_val == 4) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCantinaTychus (int lp_cameraType) {
    int autoC325EFC3_val;

    // Implementation
    autoC325EFC3_val = lp_cameraType;
    if (autoC325EFC3_val == 1) {
    }
    else if (autoC325EFC3_val == 16) {
    }
    else if (autoC325EFC3_val == 15) {
    }
    else if (autoC325EFC3_val == 4) {
    }
    else if (autoC325EFC3_val == 3) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCantinaTosh (int lp_cameraType) {
    int autoC7D5E46E_val;

    // Implementation
    autoC7D5E46E_val = lp_cameraType;
    if (autoC7D5E46E_val == 1) {
    }
    else if (autoC7D5E46E_val == 16) {
    }
    else if (autoC7D5E46E_val == 15) {
    }
    else if (autoC7D5E46E_val == 4) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCharTychus (int lp_cameraType) {
    int auto7ED8D1B9_val;

    // Implementation
    auto7ED8D1B9_val = lp_cameraType;
    if (auto7ED8D1B9_val == 1) {
    }
    else if (auto7ED8D1B9_val == 16) {
    }
    else if (auto7ED8D1B9_val == 15) {
    }
    else if (auto7ED8D1B9_val == 4) {
    }
    else if (auto7ED8D1B9_val == 3) {
    }
    else if (auto7ED8D1B9_val == 5) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraCharWarfield (int lp_cameraType) {
    int auto9428B27A_val;

    // Implementation
    auto9428B27A_val = lp_cameraType;
    if (auto9428B27A_val == 17) {
    }
    else if (auto9428B27A_val == 16) {
    }
    else if (auto9428B27A_val == 15) {
    }
    else if (auto9428B27A_val == 5) {
    }
    else if (auto9428B27A_val == 4) {
    }
    else if (auto9428B27A_val == 3) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraLabHanson (int lp_cameraType) {
    int autoB4E9728C_val;

    // Implementation
    autoB4E9728C_val = lp_cameraType;
    if (autoB4E9728C_val == 1) {
    }
    else if (autoB4E9728C_val == 15) {
    }
    else if (autoB4E9728C_val == 16) {
    }
    else if (autoB4E9728C_val == 17) {
    }
    else if (autoB4E9728C_val == 3) {
    }
    else if (autoB4E9728C_val == 4) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraLabAdjutant (int lp_cameraType) {
    int auto7C630580_val;

    // Implementation
    auto7C630580_val = lp_cameraType;
    if (auto7C630580_val == 15) {
    }
    else if (auto7C630580_val == 16) {
    }
    else if (auto7C630580_val == 3) {
    }
    else if (auto7C630580_val == 4) {
    }
    else {
        return false;
    }
    return true;
}

bool gf_UseConversationCameraAmorySwan (int lp_cameraType) {
    int auto6A33610D_val;

    // Implementation
    auto6A33610D_val = lp_cameraType;
    if (auto6A33610D_val == 1) {
    }
    else if (auto6A33610D_val == 15) {
    }
    else if (auto6A33610D_val == 16) {
    }
    else if (auto6A33610D_val == 17) {
    }
    else if (auto6A33610D_val == 3) {
    }
    else if (auto6A33610D_val == 4) {
    }
    else if (auto6A33610D_val == 5) {
    }
    else {
        return false;
    }
    return true;
}

void gf_SetConvensationCamera (int lp_type, camerainfo lp_cameraObject) {
    // Implementation
    gv_convoCameras[(lp_type)] = lp_cameraObject;
}

string gf_ConvoCharacter (int lp_actorID) {
    // Variable Declarations
    string lv_characterIndex;

    // Variable Initialization

    // Implementation
    if ((lp_actorID != 0)) {
        lv_characterIndex = gv_actors[(lp_actorID)].lv_convoStateIndex;
    }
    else {
    }
    return lv_characterIndex;
}

void gf_ConvoSetting (int lp_room, int lp_raynor, int lp_to1, unit lp_cameraObject1, int lp_to2, unit lp_cameraObject2, trigger lp_customCameraCallback, trigger lp_changeCameraCallback) {
    // Variable Declarations
    trigger lv_t;
    string lv_characterIndex1;
    string lv_characterIndex2;

    // Variable Initialization
    lv_t = null;

    // Implementation
    gf_DisplayDebugMessage((StringExternal("Param/Value/C3FCC4E0") + gf_RoomName(lp_room)));
    gv_convoCameraCurrent = 0;
    gv_convoCameraRoom = lp_room;
    gv_convoCameraActor1 = lp_to1;
    gv_convoCameraActor2 = lp_to2;
    gv_convoCameraObjectCurrent1 = lp_cameraObject1;
    gv_convoCameraObjectCurrent2 = lp_cameraObject2;
    ConversationDataRegisterUnit("Characters|CharRaynor", gf_ActorUnit(lp_raynor));
    ConversationDataRegisterUnit(gf_ConvoCharacter(lp_to1), gf_ActorUnit(lp_to1));
    ConversationDataRegisterUnit(gf_ConvoCharacter(lp_to2), gf_ActorUnit(lp_to2));
    gv_convoCameraChangeCallback = lp_changeCameraCallback;
    ConversationDataRegisterCamera("Cameras|Master", null, null, gt_ConvoCameraTriggerMaster, true);
    ConversationDataRegisterCamera("Cameras|CustomCamera01", null, null, gt_ConvoCameraTriggerCustom, true);
    ConversationDataRegisterCamera("Cameras|RaynorMedium", null, null, gt_ConvoCameraTriggerRaynorMedium, true);
    ConversationDataRegisterCamera("Cameras|RaynorCloseUp", null, null, gt_ConvoCameraTriggerRaynorCloseup, true);
    ConversationDataRegisterCamera("Cameras|Speaker2Medium", null, null, gt_ConvoCameraTriggerCharacter1Medium, true);
    ConversationDataRegisterCamera("Cameras|Speaker2CloseUp", null, null, gt_ConvoCameraTriggerCharacter1Closeup, true);
    ConversationDataRegisterCamera("Cameras|Speaker3Medium", null, null, gt_ConvoCameraTriggerCharacter2Medium, true);
    ConversationDataRegisterCamera("Cameras|Speaker3CloseUp", null, null, gt_ConvoCameraTriggerCharacter2Closeup, true);
    gv_convoCameraCustomCallback = lp_customCameraCallback;
    lv_characterIndex1 = gf_ConvoCharacter(lp_to1);
    ConversationDataRegisterUnit(lv_characterIndex1, gf_ActorUnit(lp_to1));
    ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Closeup, true);
    ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Medium, true);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Shoulder, true);
    ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pushin, true);
    ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pushout, true);
    ConversationDataRegisterCamera("Cameras|PanMediumToMedium", lv_characterIndex1, null, gt_ConvoCameraTriggerCharacter1Pan, true);
    if ((lp_to2 != 0)) {
        lv_characterIndex2 = gf_ConvoCharacter(lp_to2);
        ConversationDataRegisterUnit(lv_characterIndex2, gf_ActorUnit(lp_to2));
        ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Closeup, true);
        ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Medium, true);
        ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Shoulder, true);
        ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pushin, true);
        ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pushout, true);
        ConversationDataRegisterCamera("Cameras|PanMediumToMedium", lv_characterIndex2, null, gt_ConvoCameraTriggerCharacter2Pan, true);
    }
    else {
    }
    ConversationDataRegisterCamera("Cameras|CloseUp", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorCloseup, true);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorMedium, true);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorShoulder, true);
    ConversationDataRegisterCamera("Cameras|PushIn", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPushin, true);
    ConversationDataRegisterCamera("Cameras|PullOut", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPushout, true);
    ConversationDataRegisterCamera("Cameras|PanMediumToMedium", "Characters|CharRaynor", null, gt_ConvoCameraTriggerRaynorPan, true);
}

int gf_ConvoGetActorLocatioinActor (int lp_room, int lp_to) {
    // Variable Declarations
    int lv_tempTo;

    // Variable Initialization
    lv_tempTo = 0;

    // Implementation
    if ((true == true)) {
        lv_tempTo = lp_to;
    }
    return lv_tempTo;
}

void gf_ConvoPositionActors (int lp_room, int lp_raynor, int lp_to1, int lp_to2) {
    // Variable Declarations
    int lv_tempTo1;
    int lv_tempTo2;

    // Variable Initialization
    lv_tempTo1 = 0;
    lv_tempTo2 = 0;

    // Implementation
    lv_tempTo1 = gf_ConvoGetActorLocatioinActor(lp_room, lp_to1);
    if ((lv_tempTo1 != 0)) {
        gf_ResetActorToLocation(lp_raynor, gf_ActorPoint(lp_room, lp_raynor, lv_tempTo1));
        gf_ResetActorToLocation(lp_to1, gf_ActorPoint(lp_room, lv_tempTo1, 2));
    }
    else {
        gf_ResetActorToLocation(2, gf_ActorPoint(lp_room, lp_raynor, lp_to1));
    }
    lv_tempTo2 = gf_ConvoGetActorLocatioinActor(lp_room, lp_to2);
    if ((lv_tempTo2 != 0)) {
        gf_ResetActorToLocation(lp_to2, gf_ActorPoint(lp_room, lv_tempTo2, lp_raynor));
    }
    else {
    }
}

void gf_ConvoClearCamera (int lp_to1, int lp_to2) {
    int auto1DA7D60C_as;
    int auto1DA7D60C_ae;
    int auto1DA7D60C_ai;

    // Variable Declarations
    string lv_characterIndex1;
    string lv_characterIndex2;
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    ConversationDataRegisterCamera("Cameras|Master", null, null, null, false);
    lv_characterIndex1 = gf_ConvoCharacter(lp_to1);
    ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex1, null, null, false);
    ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex1, null, null, false);
    if ((lp_to2 != 0)) {
        lv_characterIndex2 = gf_ConvoCharacter(lp_to2);
        ConversationDataRegisterCamera("Cameras|CloseUp", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|Medium", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|ShoulderHip", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|PushIn", lv_characterIndex2, null, null, false);
        ConversationDataRegisterCamera("Cameras|PullOut", lv_characterIndex2, null, null, false);
    }
    else {
    }
    ConversationDataRegisterCamera("Cameras|CloseUp", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|Medium", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|ShoulderHip", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|PushIn", "Characters|CharRaynor", null, null, false);
    ConversationDataRegisterCamera("Cameras|PullOut", "Characters|CharRaynor", null, null, false);
    auto1DA7D60C_as = gv_c_ConvoCameraTypeFirst;
    auto1DA7D60C_ae = gv_c_ConvoCameraTypeLast;
    auto1DA7D60C_ai = 1;
    lv_index = auto1DA7D60C_as;
    if (auto1DA7D60C_ai > 0 || (auto1DA7D60C_ai == 0 && auto1DA7D60C_as < auto1DA7D60C_ae)) {
        while (lv_index <= auto1DA7D60C_ae) {
            gv_convoCameras[lv_index] = null;
            lv_index = lv_index + auto1DA7D60C_ai;
        }
    }
    else if (auto1DA7D60C_ai < 0 || (auto1DA7D60C_ai == 0 && auto1DA7D60C_ae < auto1DA7D60C_as)) {
        while (lv_index >= auto1DA7D60C_ae) {
            gv_convoCameras[lv_index] = null;
            lv_index = lv_index + auto1DA7D60C_ai;
        }
    }
}

void gf_Convo (string lp_convo, int lp_room, int lp_raynor, point lp_raynorHome, int lp_to1, unit lp_cameraObject1, point lp_characterHome1, int lp_to2, unit lp_cameraObject2, point lp_characterHome2, trigger lp_callbackPre, trigger lp_callbackPost, bool lp_changeScreenMode, bool lp_changeCameraAtEnd, trigger lp_customCameraCallback, trigger lp_changeCameraCallback) {
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, false);
    gf_SetWorldMode(2);
    gf_SetIdleState(0);
    gf_ConvoSetting(lp_room, lp_raynor, lp_to1, lp_cameraObject1, lp_to2, lp_cameraObject2, lp_customCameraCallback, lp_changeCameraCallback);
    gf_ConvoPositionActors(lp_room, lp_raynor, lp_to1, lp_to2);
    gf_RoomScenePrepare(lp_room, 1);
    gf_ActorScenePrepare(lp_to1, 0, lp_room, 1);
    gf_ActorScenePrepare(lp_to2, 0, lp_room, 1);
    gf_ActorScenePrepare(lp_raynor, lp_to1, lp_room, 1);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_raynor), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to1), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to2), "AnimCancelActiveBlends ::Conversation");
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    TriggerExecute(lp_callbackPre, true, false);
    if ((lp_changeScreenMode == true)) {
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    }
    else {
    }
    gf_SetAllSoundChannelVolumesStoryMode(1);
    ConversationDataRun(lp_convo, PlayerGroupAll(), c_conversationSkipFull, true);
    gf_ConvoClearCamera(lp_to1, lp_to2);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(2), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to1), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(lp_to2), "AnimCancelActiveBlends ::Conversation");
    TriggerExecute(lp_callbackPost, true, false);
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    if ((lp_raynorHome != null)) {
        gf_ResetActorToLocation(lp_raynor, lp_raynorHome);
    }
    else {
    }
    if ((lp_characterHome1 != null)) {
        gf_ResetActorToLocation(lp_to1, lp_characterHome1);
    }
    else {
    }
    if ((lp_characterHome2 != null)) {
        gf_ResetActorToLocation(lp_to2, lp_characterHome2);
    }
    else {
    }
    if ((lp_changeCameraAtEnd == true)) {
        gf_ViewRoomCamera(lp_room, PlayerGroupAll(), 0.0);
    }
    else {
    }
    gf_SetAllSoundChannelVolumesStoryMode(2);
    if ((lp_changeScreenMode == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }
    else {
    }
    libCamp_gf_HideStoryUI(true, false);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(0);
    gf_SetIdleState(1);
}

void gf_DisplayTimestampFromDataConvo (string lp_convoID) {
    // Implementation
    libCamp_gf_HideStoryUI(false, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    gf_TurnClickablesOnOff(gv_clickables, false);
    UISetCursorVisible(PlayerGroupAll(), false);
    gf_DisplayTimestampFromDataConvoCore(lp_convoID);
    UISetCursorVisible(PlayerGroupAll(), true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libCamp_gf_HideStoryUI(true, true);
}

void gf_DisplayTimestampFromDataConvoCore (string lp_convoID) {
    // Implementation
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    gv_convoIDGlobal = lp_convoID;
    TriggerExecute(gt_DisplayTimestampFromDataConvoSkippable, true, true);
    UIHideTextCrawl(PlayerGroupAll());
}

void gf_DisplayTimestamp (int lp_type) {
    int auto67693FBE_val;
    int auto6B3BEF32_val;
    int auto78687E39_val;
    int auto1B89DD26_val;

    // Variable Declarations
    string lv_convoID;

    // Variable Initialization
    lv_convoID = null;

    // Implementation
    if (((libCamp_gf_LastMissionConditionCheck(0) == false) || (libCamp_gf_LastMissionConditionCheck(1) == true))) {
        return ;
    }
    else {
    }
    lv_convoID = null;
    auto67693FBE_val = libCamp_gf_LastMap();
    if (auto67693FBE_val == 1) {
        auto6B3BEF32_val = lp_type;
        if (auto6B3BEF32_val == 0) {
            lv_convoID = "Timestamps|Raynor01_Cutscene";
        }
        else {
        }
    }
    else if (auto67693FBE_val == 2) {
        auto78687E39_val = lp_type;
        if (auto78687E39_val == 2) {
            lv_convoID = "Timestamps|Raynor02_Storymode";
        }
        else {
        }
    }
    else if (auto67693FBE_val == 3) {
        auto1B89DD26_val = lp_type;
        if (auto1B89DD26_val == 0) {
            lv_convoID = "Timestamps|Raynor03_Cutscene";
        }
        else if (auto1B89DD26_val == 1) {
            lv_convoID = "Timestamps|Raynor03_Debrief";
        }
        else {
        }
    }
    else {
    }
    if ((lv_convoID == null)) {
        return ;
    }
    else {
    }
    gf_DisplayTimestampFromDataConvo(lv_convoID);
}

void gf_SceneInitDataSingle (int lp_sceneIndex, string lp_file1, string lp_file2, string lp_file3, string lp_anim1, string lp_anim2, string lp_anim3, soundlink lp_mESound1, soundlink lp_mESound2, soundlink lp_mESound3) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = (lp_sceneIndex);
    gv_sceneFile[lv_index][1] = lp_file1;
    gv_sceneFile[lv_index][2] = lp_file2;
    gv_sceneFile[lv_index][3] = lp_file3;
    gv_sceneAnim[lv_index][1] = lp_anim1;
    gv_sceneAnim[lv_index][2] = lp_anim2;
    gv_sceneAnim[lv_index][3] = lp_anim3;
    gv_sceneMESound[lv_index][1] = lp_mESound1;
    gv_sceneMESound[lv_index][2] = lp_mESound2;
    gv_sceneMESound[lv_index][3] = lp_mESound3;
}

void gf_SceneInitData () {
    // Implementation
    gf_SceneInitDataSingle(1, "CinematicScenes/Terran01.SC2Scene", null, null, "Dialogue 01", "", "", SoundLink("Terran01_ME", -1), null, null);
    gf_SceneInitDataSingle(4, "CinematicScenes/Terran04.SC2Scene", null, null, "Dialogue 04", "", "", SoundLink("Terran04_ME", -1), null, null);
    gf_SceneInitDataSingle(5, "CinematicScenes/Terran05.SC2Scene", null, null, "Dialogue 05", "", "", SoundLink("Terran05_ME", -1), null, null);
}

void gf_ScenePreload (int lp_sceneID) {
    int auto1063B0D9_as;
    int auto1063B0D9_ae;
    int auto1063B0D9_ai;
    int auto1D660D56_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/9EA3DDF8") + libCamp_gf_SceneName(lp_sceneID)), false);
    if ((gv_scenePreloaded[(lp_sceneID)] == true)) {
        return ;
    }
    else {
    }
    auto1063B0D9_as = 1;
    auto1063B0D9_ae = 3;
    auto1063B0D9_ai = 1;
    lv_index = auto1063B0D9_as;
    if (auto1063B0D9_ai > 0 || (auto1063B0D9_ai == 0 && auto1063B0D9_as < auto1063B0D9_ae)) {
        while (lv_index <= auto1063B0D9_ae) {
            if ((gv_sceneFile[(lp_sceneID)][lv_index] != null)) {
                PreloadScene(gv_sceneFile[(lp_sceneID)][lv_index], false);
            }
            else {
            }
            if ((gv_sceneMESound[(lp_sceneID)][lv_index] != null)) {
                libNtve_gf_PreloadSoundObject(SoundLinkId(gv_sceneMESound[(lp_sceneID)][lv_index]), false);
            }
            else {
            }
            lv_index = lv_index + auto1063B0D9_ai;
        }
    }
    else if (auto1063B0D9_ai < 0 || (auto1063B0D9_ai == 0 && auto1063B0D9_ae < auto1063B0D9_as)) {
        while (lv_index >= auto1063B0D9_ae) {
            if ((gv_sceneFile[(lp_sceneID)][lv_index] != null)) {
                PreloadScene(gv_sceneFile[(lp_sceneID)][lv_index], false);
            }
            else {
            }
            if ((gv_sceneMESound[(lp_sceneID)][lv_index] != null)) {
                libNtve_gf_PreloadSoundObject(SoundLinkId(gv_sceneMESound[(lp_sceneID)][lv_index]), false);
            }
            else {
            }
            lv_index = lv_index + auto1063B0D9_ai;
        }
    }
    auto1D660D56_val = lp_sceneID;
    if (auto1D660D56_val == 1) {
        PreloadMovie("Assets\\Textures\\sm_pt01_tv.ogv", false);
    }
    else {
    }
    gv_scenePreloaded[(lp_sceneID)] = true;
}

void gf_ScenePreloadInit () {
    int auto8C05EC7D_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    if ((gv_isTransitionalLoad == true)) {
        return ;
    }
    else {
    }
    auto8C05EC7D_val = libCamp_gf_LastSuccessfulMission();
    if (auto8C05EC7D_val == 0) {
        if ((libCamp_gf_ScenePlayed(1) == false)) {
            gf_ScenePreload(1);
        }
        else {
        }
    }
    else if (auto8C05EC7D_val == 1) {
        if ((libCamp_gf_ScenePlayed(4) == false)) {
            gf_ScenePreload(4);
        }
        else {
        }
    }
    else if (auto8C05EC7D_val == 3) {
        if ((libCamp_gf_ScenePlayed(5) == false)) {
            gf_ScenePreload(5);
        }
        else {
        }
    }
    else {
    }
}

void gf_ScenePrepare (int lp_sceneID, bool lp_clickableOff) {
    // Variable Declarations
    int lv_actorIndex;
    int lv_actorID;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_actorID = 0;

    // Implementation
    gf_SetWorldMode(4);
    gf_SetIdleState(0);
    if ((lp_clickableOff == true)) {
        gf_TurnClickablesOnOff(gv_clickables, false);
    }
    else {
    }
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(15, false);
    gf_HideAllActors(false);
    libCamp_gf_ChangeAmbience(null);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gf_HideFullScreenImage(false);
}

void gf_ScenePlayAsync (int lp_sceneID, int lp_subIndex) {
    int autoC16F46C5_val;

    // Variable Declarations
    int lv_actorIndex;
    unitgroup lv_sceneActorGroup;
    unit lv_cameraUnit;
    int lv_sceneIndex;
    string lv_movieName;

    // Variable Initialization
    lv_actorIndex = 0;
    lv_sceneActorGroup = UnitGroupEmpty();
    lv_cameraUnit = null;
    lv_sceneIndex = 0;
    lv_movieName = "";

    // Implementation
    lv_sceneIndex = (lp_sceneID);
    libCamp_gf_ChangeAmbience(null);
    Wait(0.1, c_timeGame);
    SoundPlaySceneFile(gv_sceneMESound[lv_sceneIndex][lp_subIndex], PlayerGroupAll(), gv_sceneFile[lv_sceneIndex][lp_subIndex], "Cam_Export");
    gv_sceneSound = SoundLastPlayed();
    lv_movieName = ("TScene" + IntToString(lv_sceneIndex));
    if ((lp_sceneID == 6)) {
        autoC16F46C5_val = lp_subIndex;
        if (autoC16F46C5_val == 1) {
            lv_movieName = (lv_movieName + "a");
        }
        else if (autoC16F46C5_val == 2) {
            lv_movieName = (lv_movieName + "b");
        }
        else if (autoC16F46C5_val == 3) {
            lv_movieName = (lv_movieName + "c");
        }
        else {
        }
    }
    else {
    }
    lv_movieName = (lv_movieName + ".ogg");
    MovieStartRecording(lv_movieName);
    TriggerExecute(gt_SceneSkippable, true, true);
    MovieStopRecording();
}

void gf_SceneCleanup () {
    // Implementation
    SoundStop(gv_sceneSound, true);
    gv_sceneSound = null;
    SoundStopAllModelSounds();
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(0);
    gf_SetIdleState(1);
}

void gf_SceneCleanupWithFadeandEnterRoom () {
    // Implementation
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_SceneCleanup();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
}

void gf_Scene (int lp_sceneID, int lp_subIndex, bool lp_clickableOff, bool lp_fadeIn) {
    // Implementation
    gf_ScenePreload(lp_sceneID);
    gf_ScenePrepare(lp_sceneID, lp_clickableOff);
    gf_ScenePlayAsync(lp_sceneID, lp_subIndex);
    if ((lp_fadeIn == true)) {
        gf_SceneCleanupWithFadeandEnterRoom();
    }
    else {
        gf_SceneCleanup();
    }
}

void gf_AnimaticPrepare () {
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_SetWorldMode(4);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_GoToRoom(15, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libCamp_gf_ChangeAmbience(null);
    gf_FadeOutSoundChannelVolumeForMovie(0.5);
}

void gf_AnimaticCleanup (int lp_room) {
    // Implementation
    if ((lp_room != 0)) {
        gf_GoToRoom(lp_room, false);
    }
    else {
    }
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    gf_StopAllTransmissionConversation();
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetWorldMode(0);
    gf_TurnClickablesOnOff(gv_clickables, true);
}

void gf_Briefing (int lp_mission, int lp_room, trigger lp_skippable, trigger lp_preload) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetWorldMode(5);
    gf_SetIdleState(0);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(0);
    gf_LockActorReloading(true);
    gf_GoToRoom(lp_room, false);
    if ((lp_preload != null)) {
        TriggerExecute(lp_preload, true, false);
    }
    else {
    }
    SoundLengthQueryWait();
    gf_RoomScenePrepare(lp_room, 0);
    gf_HideAllActors(false);
    gv_briefingCompleted = false;
    TriggerExecute(lp_skippable, true, true);
    TriggerExecute(gt_StopSoundtrackMultiple, true, false);
    if ((gv_briefingMovieSound != null)) {
        SoundStop(gv_briefingMovieSound, true);
        gv_briefingMovieSound = null;
    }
    else {
    }
    if ((gv_briefingSoundPlayed != null)) {
        SoundStop(gv_briefingSoundPlayed, true);
        gv_briefingSoundPlayed = null;
    }
    else {
    }
    if ((gv_briefingCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    if (((lp_mission == 10) || (lp_mission == 22) || (lp_mission == 23) || (lp_mission == 24) || (lp_mission == 25))) {
        gf_FadeOutAllSoundChannelVolume(lv_fadeDuration);
        gf_CustomFadeInOut(false, lv_fadeDuration, true);
        CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        gf_CustomFadeInOut(true, 0.0, false);
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    else if (true) {
        gf_FadeOutAllSoundChannelVolume(lv_fadeDuration);
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    gf_StopAllTransmissionConversation();
    if ((gv_briefingMovieTransmission != c_invalidTransmissionId)) {
        TransmissionClear(gv_briefingMovieTransmission);
        gv_briefingMovieTransmission = c_invalidTransmissionId;
        UISetWorldVisible(PlayerGroupAll(), true);
    }
    else {
    }
    gf_RoomSceneClearAll();
    if ((gv_briefingVideoPlaying != null)) {
        ActorSend(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 2)), MakeMsgTextureVideoStop(TextureGetSlotName(gv_briefingVideoPlaying), TextureGetSlotComponent(gv_briefingVideoPlaying)));
    }
    else {
    }
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, 1));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, 2));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, 3));
    gf_RemoveVisibleUnit(false, gf_BriefingScreen(lp_room, 4));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, 1));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, 2));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, 3));
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_room, 4));
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, 1), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, 2), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, 3), 0.0);
    gf_ClearAnimationwithblendtime(c_animNameDefault, gf_BriefingScreen(lp_room, 4), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lp_room, 1), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_BRIEFINGSCREENFUZZY, gf_BriefingScreen(lp_room, 2), 0.0);
    gf_ClearAnimationwithblendtime(gv_aNIMID_INCOMINGTRANSMISSION, gf_BriefingScreen(lp_room, 1), 0.0);
    gf_ClearAnimationwithblendtime("BriefingVideoSwap", gf_BriefingScreen(lp_room, 2), 0.0);
    gf_BriefingDestoryAllPortraits();
    UISetWorldVisible(PlayerGroupAll(), true);
    PortraitSetVisible(libNtve_gf_FullscreenPortrait(), PlayerGroupAll(), false, false);
    gf_BriefingRemoveAllActors();
    gf_LockActorReloading(false);
}

void gf_BriefingPreload (bool lp_all) {
    int auto6DD042BC_i;

    // Variable Declarations
    int lv_room;
    int lv_indexMission;
    int lv_index;

    // Variable Initialization
    lv_room = 0;
    lv_indexMission = 0;
    lv_index = 0;

    // Implementation
    if ((lp_all == true)) {
        gf_ReloadActors(true);
    }
    else {
    }
    if (((lp_all == true) || (gf_RoomIsEnabled(6) == true))) {
        lv_room = 6;
        gf_BriefingPreloadScreens(lv_room);
    }
    else {
    }
    if (((lp_all == true) || (gf_RoomIsEnabled(2) == true))) {
        lv_room = 2;
        gf_BriefingPreloadScreens(lv_room);
    }
    else {
    }
    if (((lp_all == true) || (libCamp_gf_MissionStatusCheck(22, 1) == true) || (libCamp_gf_MissionStatusCheck(23, 1) == true) || (libCamp_gf_MissionStatusCheck(24, 1) == true) || (libCamp_gf_MissionStatusCheck(25, 1) == true))) {
        lv_room = 4;
        gf_BriefingPreloadScreens(lv_room);
    }
    else {
    }
    if (((lp_all == true) || (gf_RoomIsEnabled(5) == true))) {
        lv_room = 5;
        gf_BriefingPreloadScreens(lv_room);
    }
    else {
    }
    auto6DD042BC_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto6DD042BC_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto6DD042BC_i];
        if ((libCamp_gf_MissionStatusCheck(lv_indexMission, 1) == true)) {
            TriggerExecute(libCamp_gf_MissionBriefingRoughPreload(lv_indexMission), true, false);
        }
        else {
        }
        auto6DD042BC_i = auto6DD042BC_i + 1;
    }
}

void gf_BriefingPreloadScreens (int lp_room) {
    // Implementation
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, 1));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, 2));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, 3));
    gf_PreloadUnitStoryMap(gf_BriefingScreen(lp_room, 4));
}

void gf_BriefingPrepare (int lp_room, int lp_initCamera, int lp_actor1, int lp_actor2, int lp_actor3, bool lp_mainAnim, bool lp_center, bool lp_left, bool lp_right) {
    // Implementation
    gf_BriefingPlayVideo("video_static", lp_room, 2, false);
    gf_BriefingAddActor(lp_room, lp_actor1);
    gf_BriefingAddActor(lp_room, lp_actor2);
    gf_BriefingAddActor(lp_room, lp_actor3);
    if ((lp_mainAnim == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 1)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 1)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, 1));
    }
    else {
    }
    if ((lp_center == true)) {
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, 2));
    }
    else {
    }
    if ((lp_left == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 3)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 3)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, 3));
    }
    else {
    }
    if ((lp_right == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 4)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
        libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 4)), c_animNameDefault, 100.0);
        gf_RemoveVisibleUnit(true, gf_BriefingScreen(lp_room, 4));
    }
    else {
    }
    gf_BriefingApplyCamera(lp_room, lp_initCamera, 0.0);
}

string gf_BriefingCamera (int lp_camera) {
    int auto139618EC_val;

    // Implementation
    auto139618EC_val = lp_camera;
    if (auto139618EC_val == 1) {
        return "CAM_BriefingScreen01";
    }
    else if (auto139618EC_val == 2) {
        return "CAM_BriefingScreen02";
    }
    else if (auto139618EC_val == 3) {
        return "CAM_BriefingScreen03";
    }
    else if (auto139618EC_val == 4) {
        return "CAM_BriefingScreen04";
    }
    else if (auto139618EC_val == 5) {
        return "CAM_Intro";
    }
    else if (auto139618EC_val == 6) {
        return "CAM_Intro2";
    }
    else if (auto139618EC_val == 7) {
        return "CAM_Intro3";
    }
    else if (auto139618EC_val == 8) {
        return "CAM_twoshots01";
    }
    else if (auto139618EC_val == 9) {
        return "CAM_twoshots02";
    }
    else if (auto139618EC_val == 10) {
        return "CAM_twoshots03";
    }
    else if (auto139618EC_val == 11) {
        return "CAM_twoshots04";
    }
    else if (auto139618EC_val == 12) {
        return "CAM_raynor01";
    }
    else if (auto139618EC_val == 13) {
        return "CAM_tychus01";
    }
    else if (auto139618EC_val == 15) {
        return "CAM_Hanson01";
    }
    else if (auto139618EC_val == 14) {
        return "CAM_Horner01";
    }
    else {
    }
    return "";
}

unit gf_BriefingScreen (int lp_room, int lp_briefingScreen) {
    int autoF8FAAF55_val;
    int auto9B6CC97E_val;
    int auto80F234F9_val;
    int auto60F94461_val;

    // Implementation
    autoF8FAAF55_val = lp_room;
    if (autoF8FAAF55_val == 6) {
        auto9B6CC97E_val = lp_briefingScreen;
        if (auto9B6CC97E_val == 1) {
            return gv_briefing_MarSaraMain;
        }
        else if (auto9B6CC97E_val == 2) {
            return gv_briefing_MarSaraCenter;
        }
        else if (auto9B6CC97E_val == 3) {
            return gv_briefing_MarSaraLeft;
        }
        else if (auto9B6CC97E_val == 4) {
            return gv_briefing_MarSaraRight;
        }
        else {
        }
    }
    else if (autoF8FAAF55_val == 2) {
        auto80F234F9_val = lp_briefingScreen;
        if (auto80F234F9_val == 1) {
            return gv_briefing_BridgeMain;
        }
        else if (auto80F234F9_val == 2) {
            return gv_briefing_BridgeCenter;
        }
        else if (auto80F234F9_val == 3) {
            return gv_briefing_BridgeLeft;
        }
        else if (auto80F234F9_val == 4) {
            return gv_briefing_BridgeRight;
        }
        else {
        }
    }
    else if (autoF8FAAF55_val == 5) {
        auto60F94461_val = lp_briefingScreen;
        if (auto60F94461_val == 1) {
            return gv_briefing_CharMain;
        }
        else if (auto60F94461_val == 2) {
            return gv_briefing_CharCenter;
        }
        else if (auto60F94461_val == 3) {
            return gv_briefing_CharLeft;
        }
        else if (auto60F94461_val == 4) {
            return gv_briefing_CharRight;
        }
        else {
        }
    }
    else {
    }
    return null;
}

void gf_BriefingApplyCamera (int lp_room, int lp_camera, fixed lp_duration) {
    int auto5CE83116_val;
    int auto84E074C0_val;
    int auto9705B3A7_val;
    int autoEE7794B3_val;

    // Variable Declarations
    string lv_cameraName;
    camerainfo lv_cameraObject;

    // Variable Initialization
    lv_cameraName = "";
    lv_cameraObject = null;

    // Implementation
    if ((lp_camera == 0)) {
        return ;
    }
    else {
    }
    lv_cameraObject = null;
    auto5CE83116_val = lp_room;
    if (auto5CE83116_val == 6) {
        auto84E074C0_val = lp_camera;
        if (auto84E074C0_val == 2) {
            lv_cameraObject = CameraInfoFromId(78);
        }
        else if (auto84E074C0_val == 3) {
            lv_cameraObject = CameraInfoFromId(78);
        }
        else if (auto84E074C0_val == 5) {
            lv_cameraObject = CameraInfoFromId(109);
        }
        else {
        }
    }
    else if (auto5CE83116_val == 2) {
        auto9705B3A7_val = lp_camera;
        if (auto9705B3A7_val == 2) {
        }
        else if (auto9705B3A7_val == 3) {
        }
        else if (auto9705B3A7_val == 5) {
        }
        else {
        }
    }
    else if (auto5CE83116_val == 4) {
        autoEE7794B3_val = lp_camera;
        if (autoEE7794B3_val == 2) {
            lv_cameraObject = CameraInfoFromId(66);
        }
        else if (autoEE7794B3_val == 3) {
            lv_cameraObject = CameraInfoFromId(73);
        }
        else if (autoEE7794B3_val == 5) {
            lv_cameraObject = CameraInfoFromId(73);
        }
        else {
        }
    }
    else {
    }
    if ((lv_cameraObject != null)) {
        CameraApplyInfo(1, lv_cameraObject, lp_duration, -1, 10, true);
        return ;
    }
    else {
    }
    lv_cameraName = gf_BriefingCamera(lp_camera);
    CameraUseModel(1, gf_BriefingScreen(lp_room, 1), lv_cameraName, (lp_duration * 1.0));
    if ((lp_camera == 6)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_room, 1)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }
    else {
    }
}

int gf_BriefingCreatePortrait (string lp_model, string lp_camera, int lp_screen, bool lp_attachToScreenNow) {
    int autoA2D26592_val;

    // Variable Declarations
    int lv_width;
    int lv_height;
    int lv_channel;
    string lv_cameraString;

    // Variable Initialization
    lv_width = 0;
    lv_height = 0;
    lv_channel = 0;
    lv_cameraString = "";

    // Implementation
    autoA2D26592_val = lp_screen;
    if (autoA2D26592_val == 2) {
        lv_width = 720;
        lv_height = 406;
        lv_channel = 1;
    }
    else if (autoA2D26592_val == 3) {
        lv_width = 400;
        lv_height = 400;
        lv_channel = 2;
    }
    else if (autoA2D26592_val == 4) {
        lv_width = 400;
        lv_height = 400;
        lv_channel = 3;
    }
    else {
        return 0;
    }
    lv_cameraString = lp_camera;
    PortraitCreate(0, 0, c_anchorCenter, lv_width, lv_height, lp_model, lv_cameraString, "Default", true, false);
    PortraitSetOffscreen(PortraitLastCreated(), true);
    if ((lp_attachToScreenNow == true)) {
        PortraitSetChannel(PortraitLastCreated(), lv_channel);
    }
    else {
    }
    gv_briefingPortraitCount=gv_briefingPortraitCount + 1;
    gv_briefingPortraits[gv_briefingPortraitCount] = PortraitLastCreated();
    return PortraitLastCreated();
}

point gf_BriefingActorAttachPoint (int lp_room, int lp_actor) {
    int auto37EE8C4A_val;
    int auto49F1FEFF_val;
    int auto5A6A9993_val;
    int auto7F30152E_val;

    // Variable Declarations
    string lv_attachName;
    int lv_actualActorUsed;

    // Variable Initialization
    lv_attachName = "";
    lv_actualActorUsed = 0;

    // Implementation
    auto37EE8C4A_val = lp_room;
    if (auto37EE8C4A_val == 2) {
        auto49F1FEFF_val = lp_actor;
        if (auto49F1FEFF_val == 2) {
        }
        else if (auto49F1FEFF_val == 3) {
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == 6) {
        auto5A6A9993_val = lp_actor;
        if (auto5A6A9993_val == 2) {
            return PointFromId(107);
        }
        else if (auto5A6A9993_val == 3) {
            return PointFromId(108);
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == 4) {
        auto7F30152E_val = lp_actor;
        if (auto7F30152E_val == 2) {
        }
        else {
        }
    }
    else if (auto37EE8C4A_val == 5) {
    }
    else {
    }
    lv_actualActorUsed = lp_actor;
    if (true) {
    }
    else {
    }
    lv_attachName = ("Pos_" + gf_ActorStringID(lv_actualActorUsed));
    return UnitGetAttachmentPoint(gf_BriefingScreen(lp_room, 1), lv_attachName);
}

void gf_BriefingAddActor (int lp_roomID, int lp_actorID) {
    // Implementation
    if ((lp_actorID == 0)) {
        return ;
    }
    else {
    }
    gf_ResetActorToLocation(lp_actorID, gf_BriefingActorAttachPoint(lp_roomID, lp_actorID));
    gf_ActorScenePrepare(lp_actorID, 0, lp_roomID, 0);
    gf_RemoveVisibleUnit(true, gf_ActorUnit(lp_actorID));
}

void gf_BriefingRemoveAllActors () {
    // Implementation
    gf_ActorSceneClearAll();
}

void gf_BriefingDestoryAllPortraits () {
    int autoBAF5ECB9_as;
    int autoBAF5ECB9_ae;
    int autoBAF5ECB9_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    autoBAF5ECB9_as = 1;
    autoBAF5ECB9_ae = gv_briefingPortraitCount;
    autoBAF5ECB9_ai = 1;
    lv_index = autoBAF5ECB9_as;
    if (autoBAF5ECB9_ai > 0 || (autoBAF5ECB9_ai == 0 && autoBAF5ECB9_as < autoBAF5ECB9_ae)) {
        while (lv_index <= autoBAF5ECB9_ae) {
            PortraitDestroy(gv_briefingPortraits[lv_index]);
            lv_index = lv_index + autoBAF5ECB9_ai;
        }
    }
    else if (autoBAF5ECB9_ai < 0 || (autoBAF5ECB9_ai == 0 && autoBAF5ECB9_ae < autoBAF5ECB9_as)) {
        while (lv_index >= autoBAF5ECB9_ae) {
            PortraitDestroy(gv_briefingPortraits[lv_index]);
            lv_index = lv_index + autoBAF5ECB9_ai;
        }
    }
    gv_briefingPortraitCount = 0;
}

void gf_BriefingPlayVideo (string lp_movie, int lp_roomID, int lp_screen, bool lp_transientAnim) {
    int autoF8AD0AE9_val;

    // Variable Declarations
    int lv_wipeSoundIndex;

    // Variable Initialization
    lv_wipeSoundIndex = 0;

    // Implementation
    TriggerStop(gt_BriefingPlayVideoTargetingCursorSound);
    gv_briefingMovieTexturePlaying = lp_movie;
    if ((lp_transientAnim == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lp_roomID, lp_screen)), gv_aNIMID_BRIEFINGVIDEOSWAP, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        lv_wipeSoundIndex = RandomInt(1, 3);
        autoF8AD0AE9_val = lv_wipeSoundIndex;
        if (autoF8AD0AE9_val == 1) {
            SoundPlay(SoundLink("UI_ScreenWipe", 0), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF8AD0AE9_val == 2) {
            SoundPlay(SoundLink("UI_ScreenWipe", 1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF8AD0AE9_val == 3) {
            SoundPlay(SoundLink("UI_ScreenWipe", 2), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
        }
    }
    else {
    }
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_roomID, lp_screen));
    libNtve_gf_PlayMovieTextureOnUnitActor(gf_BriefingScreen(lp_roomID, lp_screen), lp_movie);
    libNtve_gf_SendActorMessageToUnit(gf_BriefingScreen(lp_roomID, lp_screen), "TextureVideoPlay video 30 Synced");
    gv_briefingVideoPlaying = lp_movie;
    TriggerExecute(gt_BriefingPlayVideoTargetingCursorSound, true, false);
}

void gf_BriefingStopVideo (int lp_roomID, int lp_screen) {
    // Implementation
    libNtve_gf_StopAllVideoTexturesOnUnit(gf_BriefingScreen(lp_roomID, lp_screen));
}

trigger gf_CurrentTVNews () {
    // Implementation
    return gf_TVNewsTrigger(libCamp_gf_LastSuccessfulMission());
}

trigger gf_TVNewsTrigger (int lp_mission) {
    // Implementation
    return gv_tVNewsTrigger[(lp_mission)];
}

void gf_InitTVNewsSingle (int lp_lastMission, string lp_convoID, trigger lp_callback, trigger lp_preload) {
    // Implementation
    gv_tVNewsConvoID[(lp_lastMission)] = lp_convoID;
    gv_tVNewsTrigger[(lp_lastMission)] = lp_callback;
    gv_tVNewsPreload[(lp_lastMission)] = lp_preload;
}

void gf_TVNewsPreload (int lp_mission) {
    // Variable Declarations
    trigger lv_preloadCallback;

    // Variable Initialization
    lv_preloadCallback = null;

    // Implementation
    gf_TVNewsPreloadGeneric(lp_mission);
    if ((lp_mission == 0)) {
        lv_preloadCallback = gv_tVNewsPreload[(31)];
    }
    else {
        lv_preloadCallback = gv_tVNewsPreload[(lp_mission)];
    }
    if ((lv_preloadCallback == null)) {
        return ;
    }
    else {
    }
    TriggerExecute(lv_preloadCallback, true, false);
}

void gf_TVNewsPreloadGeneric (int lp_mission) {
    int autoF3066F77_val;
    int autoDB08DBD1_as;
    int autoDB08DBD1_ae;
    int autoDB08DBD1_ai;

    // Variable Declarations
    int lv_index;
    int lv_actor;
    int lv_room;

    // Variable Initialization
    lv_index = 0;
    lv_actor = 0;
    lv_room = 0;

    // Implementation
    if (((lp_mission == 26) || (lp_mission == 27) || (lp_mission == 28))) {
        lv_room = 5;
    }
    else if (((lp_mission == 31) || (lp_mission == 1) || (lp_mission == 2))) {
        lv_room = 6;
    }
    else if (true) {
        lv_room = 3;
    }
    autoF3066F77_val = lv_room;
    if (autoF3066F77_val == 6) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(2));
        gf_PreloadUnitStoryMap(gf_ActorUnit(1));
        if (((lp_mission == 1) || (lp_mission == 2))) {
            gf_PreloadUnitStoryMap(gf_ActorUnit(3));
        }
        else {
        }
    }
    else if (autoF3066F77_val == 3) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(2));
        gf_PreloadUnitStoryMap(gf_ActorUnit(3));
        if ((lp_mission == 9)) {
        }
        else {
        }
    }
    else if (autoF3066F77_val == 5) {
        gf_PreloadUnitStoryMap(gf_ActorUnit(3));
    }
    else {
    }
    gf_PreloadRoomIfCondition(lv_room, true);
    autoDB08DBD1_as = gv_c_ACTOR_FIRST;
    autoDB08DBD1_ae = gv_c_ACTOR_LAST;
    autoDB08DBD1_ai = 1;
    lv_index = autoDB08DBD1_as;
    if (autoDB08DBD1_ai > 0 || (autoDB08DBD1_ai == 0 && autoDB08DBD1_as < autoDB08DBD1_ae)) {
        while (lv_index <= autoDB08DBD1_ae) {
            lv_actor = gv_actors[lv_index].lv_actorID;
            if ((gf_ActorIsEnabledInRoom(lv_actor, 3) == true)) {
                gf_PreloadUnitStoryMap(gf_ActorUnit(lv_actor));
            }
            else {
            }
            lv_index = lv_index + autoDB08DBD1_ai;
        }
    }
    else if (autoDB08DBD1_ai < 0 || (autoDB08DBD1_ai == 0 && autoDB08DBD1_ae < autoDB08DBD1_as)) {
        while (lv_index >= autoDB08DBD1_ae) {
            lv_actor = gv_actors[lv_index].lv_actorID;
            if ((gf_ActorIsEnabledInRoom(lv_actor, 3) == true)) {
                gf_PreloadUnitStoryMap(gf_ActorUnit(lv_actor));
            }
            else {
            }
            lv_index = lv_index + autoDB08DBD1_ai;
        }
    }
}

void gf_TVNewsMarSara (int lp_mission, trigger lp_skippable) {
    // Implementation
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(1);
    gf_SetIdleState(0);
    libCamp_gf_HideStoryUI(false, true);
    if ((gv_currentRoom != 6)) {
        gf_ChangeRoom(6, false);
    }
    else {
    }
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    gf_RoomScenePrepare(6, 2);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(0);
    gf_TVNewsPreload(lp_mission);
    gf_ResetActorToLocation(2, PointFromId(89));
    gf_ActorScenePrepare(2, 0, 6, 2);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(2)), "Cover");
    gf_RemoveVisibleUnit(true, gf_ActorUnit(2));
    if (((lp_skippable == gt_TVNewsRaynor01Skippable) || (lp_skippable == gt_TVNewsRaynor02Skippable))) {
        gf_ResetActorToLocation(3, PointFromId(91));
        gf_ActorScenePrepare(3, 0, 6, 2);
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(3)), "Cover");
        gf_RemoveVisibleUnit(true, gf_ActorUnit(3));
    }
    else {
    }
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    gv_tVNewsCurrentThread = lp_skippable;
    TriggerEnable(gt_TVNewsBack, true);
    TriggerExecute(lp_skippable, true, true);
    TriggerEnable(gt_TVNewsBack, false);
    gv_tVNewsCurrentThread = null;
    gf_TVNewsMarSaraStopAllThreads();
    gf_HideIntroTextBox(false);
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, "TextureSelectById video_static");
    gf_StopAllTransmissionConversation();
    libNtve_gf_StopAllVideoTexturesOnUnit(gv_marSaraTV);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 0, ""));
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(2), "AnimCancelActiveBlends ::Conversation");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(3), "AnimCancelActiveBlends ::Conversation");
    gf_ActorSceneClearAll();
    gf_RoomSceneClearAll();
    gf_ViewRoomCamera(6, PlayerGroupAll(), 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.3);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    if ((gv_debug_TVNewsOn == false)) {
        CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    else {
    }
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    gf_SetWorldMode(0);
    gf_SetIdleState(1);
}

void gf_TVNewsMarSaraStopAllThreads () {
    // Implementation
    TriggerStop(gt_TVNewsRaynor01Event02);
    TriggerStop(gt_TVNewsRaynor01Event05);
    TriggerStop(gt_TVNewsRaynor02Event03);
    TriggerStop(gt_TVNewsRaynor02Event05);
}

void gf_TVNewsWatched (int lp_lastMission) {
    int auto7CC36240_i;

    // Variable Declarations
    int lv_index;
    int lv_indexMap;
    int lv_count;

    // Variable Initialization
    lv_index = 0;
    lv_indexMap = 0;
    lv_count = 0;

    // Implementation
    lv_index = (lp_lastMission);
    ConversationDataStateSetValue(gv_tVNewsConvoID[lv_index], 1);
    auto7CC36240_i = libCamp_gv_TSC_MAP_FIRST;
    while (auto7CC36240_i <= libCamp_gv_TSC_MAP_LAST) {
        lv_indexMap = libCamp_gv_tS_MapID[auto7CC36240_i];
        lv_index = (lv_indexMap);
        if ((gv_tVNewsConvoID[lv_index] != null)) {
            if ((ConversationDataStateGetValue(gv_tVNewsConvoID[lv_index]) > 0)) {
                lv_count=lv_count + 1;
            }
            else {
            }
        }
        else {
        }
        auto7CC36240_i = auto7CC36240_i + 1;
    }
    AchievementTermQuantitySet(1, "TStory01_10", lv_count);
}

void gf_WaitForTimeToPlayNextTip (fixed lp_duration) {
    // Implementation
    Wait(lp_duration, c_timeReal);
    if (((gf_CurrentWorldMode() != 0) || (gf_CurrentIdleState() != 1))) {
        gf_WaitForGlobalIdle();
        Wait(1.0, c_timeReal);
        gf_WaitForGlobalIdle();
    }
    else {
    }
}

void gf_AddTip (string lp_convoState) {
    // Variable Declarations
    fixed lv_waitDuration;

    // Variable Initialization
    lv_waitDuration = 0.0;

    // Implementation
    if ((ConversationDataStateGetValue(lp_convoState) != 0)) {
        return ;
    }
    else {
    }
    if ((gv_tipStart == true)) {
        gv_tipStart = false;
        lv_waitDuration = gv_c_TIPINTERVALSTART;
    }
    else {
        lv_waitDuration = gv_c_TIPINTERVAL;
    }
    gf_WaitForTimeToPlayNextTip(lv_waitDuration);
    gf_SetIdleState(0);
    libCamp_gf_CreateTipFromConversationState(lp_convoState, 0, PlayerGroupAll());
    ConversationDataStateSetValue(lp_convoState, 1);
    Wait(4.0, c_timeReal);
    gf_SetIdleState(1);
}

void gf_StartTipHint () {
    // Implementation
    if ((libCamp_gf_LastMission() == 1) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
        TriggerExecute(gt_TipAfterTRaynor01, true, false);
    }
    else if ((libCamp_gf_LastMission() == 2) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
        TriggerExecute(gt_TipAfterTRaynor02, true, false);
    }
    else if ((libCamp_gf_LastMission() == 3) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
    }
    else if (((libCamp_gf_LastMission() == 4) || (libCamp_gf_LastMission() == 17)) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
    }
    else if ((libCamp_gf_LastMission() == 18) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
    }
    else if ((libCamp_gf_LastMission() == 26) && (libCamp_gf_LastMissionConditionCheck(0) == true) && (libCamp_gf_LastMissionConditionCheck(1) == false) && (libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true)) {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait For Skip Trig
//--------------------------------------------------------------------------------------------------
bool gt_WaitForSkipTrig_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(gv_waitForSkipTimeout, gv_waitForSkipTimeType);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitForSkipTrig_Init () {
    gt_WaitForSkipTrig = TriggerCreate("gt_WaitForSkipTrig_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Clicked
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BackButtonEscapeSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonClicked_Init () {
    gt_BackButtonClicked = TriggerCreate("gt_BackButtonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Escape
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonEscape_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        TriggerExecute(gt_BackButtonEscapeSkippable, true, true);
        if ((gv_backButtonHidden == false)) {
            break;
        }
        else {
        }
    }
    gf_BackButtonBack();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonEscape_Init () {
    gt_BackButtonEscape = TriggerCreate("gt_BackButtonEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BackButton Escape Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BackButtonEscapeSkippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    while (true) {
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackButtonEscapeSkippable_Init () {
    gt_BackButtonEscapeSkippable = TriggerCreate("gt_BackButtonEscapeSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TBDWindowClose Clicked
//--------------------------------------------------------------------------------------------------
bool gt_TBDWindowCloseClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tBDWindowButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_tBDWindowDialog);
    TriggerExecute(gv_tBDWindowExitCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBDWindowCloseClicked_Init () {
    gt_TBDWindowCloseClicked = TriggerCreate("gt_TBDWindowCloseClicked_Func");
    TriggerAddEventDialogControl(gt_TBDWindowCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Clicked
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    gf_TurnClickablesOnOff(gv_clickables, false);
    SoundPlay(SoundLink("SetPiece_Jukebox_Select", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID=gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID + 1;
    gf_JukeboxNextTrack(lv_jukeboxID, false);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxClicked_Init () {
    gt_JukeboxClicked = TriggerCreate("gt_JukeboxClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Loop
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;
    int lv_sessionID;
    int lv_trackCurrent;
    int lv_trackStarted;
    fixed lv_duration;
    fixed lv_volume;
    fixed lv_offset;

    // Variable Initialization
    lv_jukeboxID = 0;
    lv_sessionID = 0;
    lv_trackCurrent = 0;
    lv_trackStarted = 0;
    lv_duration = 0.0;
    lv_volume = 0.0;
    lv_offset = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    lv_sessionID = gv_tP_JukeboxSessionIDLocal;
    lv_trackStarted = gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent;
    lv_trackCurrent = (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent - 1);
    while (true) {
        lv_trackCurrent=lv_trackCurrent + 1;
        if (((lv_sessionID != gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID) || (lv_trackCurrent > gv_jukeboxes[lv_jukeboxID].lv_trackCount))) {
            return true;
        }
        else {
        }
        gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent = lv_trackCurrent;
        TriggerDebugOutput(1, (StringExternal("Param/Value/899C0450") + IntToText(lv_trackCurrent)), false);
        TriggerDebugOutput(1, (StringExternal("Param/Value/0CA20F37") + IntToText(lv_trackStarted)), false);
        if ((lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
            if ((lv_trackCurrent != lv_trackStarted)) {
                gf_TurnClickableOnOff(gv_jukeboxes[lv_jukeboxID].lv_box, false);
                if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music != null)) {
                    SoundStop(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music, true);
                    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = null;
                }
                else {
                }
                TriggerDebugOutput(1, (StringExternal("Param/Value/AB1AB48C")), false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
                Wait(1.0, c_timeReal);
                gf_TurnClickableOnOff(gv_jukeboxes[lv_jukeboxID].lv_box, true);
            }
            else {
                Wait(1.0, c_timeReal);
            }
        }
        else {
            gf_JukeboxUpdateTrackInfo(lv_jukeboxID);
            TriggerDebugOutput(1, (StringExternal("Param/Value/0913E0DC") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lv_jukeboxID].lv_startRandom) + StringExternal("Param/Value/8BCDDABD") + libNtve_gf_ConvertBooleanToText(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore)), false);
            if ((gv_jukeboxes[lv_jukeboxID].lv_startRandom == true) && (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore == false)) {
                lv_offset = RandomFixed(10.0, (SoundLengthSync(gv_jukeboxes[lv_jukeboxID].lv_tracks[gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent]) - 30.0));
                gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore = true;
                TriggerDebugOutput(1, (StringExternal("Param/Value/4062419E") + FixedToText(lv_offset, c_fixedPrecisionAny)), false);
            }
            else {
                lv_offset = 0.0;
            }
            if (((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_muted == true) || (gv_terranUpTheNightPlaying == true))) {
                lv_volume = 0.0;
            }
            else {
                lv_volume = 100.0;
            }
            SoundPlay(gv_jukeboxes[lv_jukeboxID].lv_tracks[gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent], PlayerGroupAll(), lv_volume, lv_offset);
            gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = SoundLastPlayed();
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            TriggerDebugOutput(1, (StringExternal("Param/Value/D7DC7C30") + IntToText(lv_sessionID) + StringExternal("Param/Value/72B22E0C") + IntToText(gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID)), false);
            if ((lv_sessionID != gv_jukeboxes[lv_jukeboxID].lv_playback.lv_sessionID)) {
                return true;
            }
            else {
            }
            TriggerDebugOutput(1, (StringExternal("Param/Value/64B78EC7")), false);
            gv_jukeboxes[lv_jukeboxID].lv_playback.lv_music = null;
            Wait(1.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackLoop_Init () {
    gt_JukeboxTrackLoop = TriggerCreate("gt_JukeboxTrackLoop_Func");
    TriggerEnable(gt_JukeboxTrackLoop, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Animation
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackAnimationDone = false;
    if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == 1)) {
        if ((((gv_jukeboxes[lv_jukeboxID].lv_startRandom == false) && (!(((libCamp_gf_LastMap() == 1) && (libCamp_gf_LastMapConditionCheck(0) == true) && (libCamp_gf_LastMapConditionCheck(1) == false))))) || (gv_jukeboxes[lv_jukeboxID].lv_playback.lv_startedBefore == true))) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeReal);
        }
        else {
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.0, c_timeReal);
    }
    else if ((true == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_jukeboxes[lv_jukeboxID].lv_box), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    }
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackAnimationDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackAnimation_Init () {
    gt_JukeboxTrackAnimation = TriggerCreate("gt_JukeboxTrackAnimation_Func");
    TriggerEnable(gt_JukeboxTrackAnimation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jukebox Track Comments
//--------------------------------------------------------------------------------------------------
bool gt_JukeboxTrackComments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gv_tP_JukeboxID;
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackCommentsDone = false;
    if ((gv_jukeboxes[lv_jukeboxID].lv_playback.lv_trackCurrent == gv_jukeboxes[lv_jukeboxID].lv_trackCount)) {
        gf_PlayFidget(gv_jukeboxes[lv_jukeboxID].lv_fidgetSetTurnOff, 0, 0);
    }
    else {
        gf_PlayFidget(gv_jukeboxes[lv_jukeboxID].lv_fidgetSetTrack, 0, 0);
    }
    gv_jukeboxes[lv_jukeboxID].lv_playback.lv_nextTrackCommentsDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JukeboxTrackComments_Init () {
    gt_JukeboxTrackComments = TriggerCreate("gt_JukeboxTrackComments_Func");
    TriggerEnable(gt_JukeboxTrackComments, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Music Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_StopSoundtrackMultiple_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopSoundtrackMultiple_Init () {
    gt_StopSoundtrackMultiple = TriggerCreate("gt_StopSoundtrackMultiple_Func");
    TriggerEnable(gt_StopSoundtrackMultiple, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PinboardClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pb;
    int lv_pbIndex;
    int lv_item;
    int lv_itemIndex;
    unitgroup lv_itemGroup;

    // Variable Initialization
    lv_pb = 0;
    lv_pbIndex = 0;
    lv_item = 0;
    lv_itemIndex = 0;
    lv_itemGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pb = gf_GetPinboardFromUnit(EventUnit());
    if ((lv_pb == 0)) {
        lv_item = gf_GetPinboardItemFromUnit(EventUnit());
        if ((lv_item == 0)) {
            return true;
        }
        else {
        }
        lv_pb = gf_GetPinboardOfItem(lv_item);
    }
    else {
    }
    if ((lv_pb == 0)) {
        return true;
    }
    else {
    }
    lv_pbIndex = (lv_pb);
    if (((UnitTestState(gv_pinboards[lv_pbIndex].lv_pinboard, c_unitStateHighlightable) == false) || (gv_pinboards[lv_pbIndex].lv_range == 0))) {
        return true;
    }
    else {
    }
    gv_pinboardCurrent = lv_pb;
    gv_pinboards[lv_pbIndex].lv_range = 0;
    gf_HighlightPinboard(gv_pinboardCurrent, false, null);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopAllTransmissionConversation();
    TriggerExecute(gt_PinboardZoom, true, false);
    Wait(1.0, c_timeReal);
    gf_PreparePinboard(gv_pinboardCurrent);
    gf_StopFlashingUnit(gv_pinboards[lv_pbIndex].lv_pinboard);
    TriggerExecute(gt_PinboardItemClicked, true, true);
    TriggerExecute(gt_PinboardLeave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardClicked_Init () {
    gt_PinboardClicked = TriggerCreate("gt_PinboardClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Zoom
//--------------------------------------------------------------------------------------------------
bool gt_PinboardZoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pbIndex;

    // Variable Initialization
    lv_pbIndex = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pbIndex = (gv_pinboardCurrent);
    gf_HotspotZoom(gf_RoomUnit(gv_pinboards[lv_pbIndex].lv_room), gv_pinboards[lv_pbIndex].lv_zoomCamera, gv_pinboards[lv_pbIndex].lv_zoomAnimation, gv_pinboards[lv_pbIndex].lv_zoomDuration);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardZoom_Init () {
    gt_PinboardZoom = TriggerCreate("gt_PinboardZoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Leave
//--------------------------------------------------------------------------------------------------
bool gt_PinboardLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pbIndex;

    // Variable Initialization
    lv_pbIndex = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_GenericTransitionExit_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    lv_pbIndex = (gv_pinboardCurrent);
    gf_HotspotLeaveWithCamera(gv_pinboards[lv_pbIndex].lv_room, null, gv_pinboards[lv_pbIndex].lv_zoomBackCamera, gv_pinboards[lv_pbIndex].lv_zoomBackAnimation, gv_pinboards[lv_pbIndex].lv_zoomBackDuration);
    if ((gv_pinboards[lv_pbIndex].lv_room == 6)) {
        gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    }
    else {
    }
    gv_pinboards[lv_pbIndex].lv_range = 1;
    gf_PreparePinboard(gv_pinboardCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardLeave_Init () {
    gt_PinboardLeave = TriggerCreate("gt_PinboardLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_item;
    int lv_pbIndex;
    int lv_itemIndex;
    unitgroup lv_itemGroup;
    string lv_convoState;

    // Variable Initialization
    lv_player = 0;
    lv_item = 0;
    lv_pbIndex = 0;
    lv_itemIndex = 0;
    lv_itemGroup = UnitGroupEmpty();
    lv_convoState = null;

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_item = gf_GetPinboardItemFromUnit(EventUnit());
    if ((lv_item == 0)) {
        return true;
    }
    else {
    }
    gv_pinboardCurrent = gf_GetPinboardOfItem(lv_item);
    gv_pinboardItemCurrent = lv_item;
    lv_pbIndex = (gv_pinboardCurrent);
    lv_itemIndex = (gv_pinboardItemCurrent);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_StopFlashingUnit(gv_pinboardItems[lv_itemIndex].lv_item);
    lv_convoState = gf_HotspotConvoState(gv_pinboardItems[lv_itemIndex].lv_item);
    if ((lv_convoState != null)) {
        ConversationDataStateSetValue(lv_convoState, 1);
    }
    else {
    }
    gf_StopAllTransmissionConversation();
    libCamp_gf_HideStoryUI(false, true);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PinboardZoom, true, false);
    Wait(1.0, c_timeReal);
    gf_PreparePinboard(gv_pinboardCurrent);
    gf_StopFlashingUnit(EventUnit());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly Start", c_animFlagPlayForever, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly Start", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(gv_pinboardItems[lv_itemIndex].lv_activateSound, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.667, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, c_animTimeDefault);
    gf_SetAllSoundChannelVolumesStoryMode(1);
    gf_Convo(gv_pinboardItems[(gv_pinboardItemCurrent)].lv_fidgetSet, 6, 2, PointFromId(89), 3, gv_marSaraTychusCameras, PointFromId(91), 0, null, null, gt_PinboardItemClickedPreCallback, gt_PinboardItemClickedPostCallback, true, false, gt_PinboardItemClickedCamera, gt_PinboardItemClickedCameraChanged);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    TriggerExecute(gt_PinboardItemClickedCamera, true, false);
    gf_DisplayBackButton(gt_PinboardItemBack);
    TriggerEnable(gt_PinboardItemBack, true);
    TriggerExecute(gt_PinboardItemSkippable, true, true);
    gf_HideBackButton(false);
    gf_StopAllTransmissionConversation();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[lv_itemIndex].lv_item), gv_aNIMID_ZOOM, "Fly End", 0, 0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboards[lv_pbIndex].lv_pinboard), gv_aNIMID_ZOOM, "Fly End", 0, c_animTimeDefault);
    SoundPlay(gv_pinboardItems[lv_itemIndex].lv_activateSound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_PinboardLeave, true, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClicked_Init () {
    gt_PinboardItemClicked = TriggerCreate("gt_PinboardItemClicked_Func");
    TriggerAddEventUnitClick(gt_PinboardItemClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedPreCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedPreCallback_Init () {
    gt_PinboardItemClickedPreCallback = TriggerCreate("gt_PinboardItemClickedPreCallback_Func");
    TriggerEnable(gt_PinboardItemClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedPostCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[(gf_GetCurrentPinboardItem())].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedPostCallback_Init () {
    gt_PinboardItemClickedPostCallback = TriggerCreate("gt_PinboardItemClickedPostCallback_Func");
    TriggerEnable(gt_PinboardItemClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(gv_currentRoom), "Zoom_04", "Fly 04", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(gv_currentRoom)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedCamera_Init () {
    gt_PinboardItemClickedCamera = TriggerCreate("gt_PinboardItemClickedCamera_Func");
    TriggerEnable(gt_PinboardItemClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Clicked Camera Changed
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemClickedCameraChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentItem;

    // Variable Initialization
    lv_currentItem = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentItem = gf_GetCurrentPinboardItem();
    if ((lv_currentItem == 0)) {
        return true;
    }
    else {
    }
    if ((gv_convoCameraCurrent != 0) && (gv_convoCameraCurrent != 2)) {
        gf_ClearAnimationwithblendtime(gv_aNIMID_ZOOM, gv_pinboardItems[(lv_currentItem)].lv_item, 0.0);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_pinboardItems[(lv_currentItem)].lv_item), gv_aNIMID_ZOOM, "Fly", c_animFlagPlayForever, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemClickedCameraChanged_Init () {
    gt_PinboardItemClickedCameraChanged = TriggerCreate("gt_PinboardItemClickedCameraChanged_Func");
    TriggerEnable(gt_PinboardItemClickedCameraChanged, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Skippable
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemID;

    // Variable Initialization
    lv_itemID = c_timerWindowNone;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemSkippable_Init () {
    gt_PinboardItemSkippable = TriggerCreate("gt_PinboardItemSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinboard Item Back
//--------------------------------------------------------------------------------------------------
bool gt_PinboardItemBack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_PinboardItemSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinboardItemBack_Init () {
    gt_PinboardItemBack = TriggerCreate("gt_PinboardItemBack_Func");
    TriggerEnable(gt_PinboardItemBack, false);
    TriggerAddEventMouseClicked(gt_PinboardItemBack, c_playerAny, c_mouseButtonNone, true);
    TriggerAddEventKeyPressed(gt_PinboardItemBack, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display New Items
//--------------------------------------------------------------------------------------------------
bool gt_DisplayNewItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_UpdateNewItems();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayNewItems_Init () {
    gt_DisplayNewItems = TriggerCreate("gt_DisplayNewItems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Item Available
//--------------------------------------------------------------------------------------------------
bool gt_NewItemAvailable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_type;
    text lv_text;
    string lv_imagePortrait;
    string lv_modelFlash;
    fixed lv_duration;
    int lv_customData;

    // Variable Initialization
    lv_type = 0;
    lv_text = StringExternal("Param/Value/582B8BC6");
    lv_modelFlash = null;
    lv_duration = 0.0;
    lv_customData = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_type = gv_tP_NEWITEMAVAILABLE_Type;
    lv_text = gv_tP_NEWITEMAVAILABLE_Text;
    lv_imagePortrait = gv_tP_NEWITEMAVAILABLE_ImagePortrait;
    lv_modelFlash = gv_tP_NEWITEMAVAILABLE_ModelFlash;
    lv_duration = gv_tP_NEWITEMAVAILABLE_Duratioin;
    lv_customData = gv_tP_NEWITEMAVAILABLE_CustomData;
    TriggerQueueEnter();
    gv_newItemsCount=gv_newItemsCount + 1;
    gv_newItems[gv_newItemsCount].lv_type = lv_type;
    gv_newItems[gv_newItemsCount].lv_text = lv_text;
    gv_newItems[gv_newItemsCount].lv_imagePortrait = lv_imagePortrait;
    gv_newItems[gv_newItemsCount].lv_modelFlash = lv_modelFlash;
    gv_newItems[gv_newItemsCount].lv_displayDuration = lv_duration;
    gv_newItems[gv_newItemsCount].lv_customData = lv_customData;
    gv_newItems[gv_newItemsCount].lv_dialog = c_invalidDialogId;
    gv_newItems[gv_newItemsCount].lv_label = c_invalidDialogControlId;
    gv_newItems[gv_newItemsCount].lv_flash = c_invalidPortraitId;
    gv_newItems[gv_newItemsCount].lv_beingRemoved = false;
    gf_UpdateNewItems();
    Wait(1.5, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewItemAvailable_Init () {
    gt_NewItemAvailable = TriggerCreate("gt_NewItemAvailable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create New Item
//--------------------------------------------------------------------------------------------------
bool gt_CreateNewItem_Func (bool testConds, bool runActions) {
    int auto30B20644_val;

    // Variable Declarations
    int lv_newItemIndex;
    fixed lv_offset;
    string lv_model;

    // Variable Initialization
    lv_newItemIndex = 0;
    lv_offset = 0.0;
    lv_model = null;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_CreateNewItem_NewItemIndex;
    lv_offset = gv_tP_CreateNewItem_Offset;
    if ((gv_newItems[lv_newItemIndex].lv_type == 0)) {
        return true;
    }
    else {
    }
    libCamp_gf_CreateDialogInGrid(20.0, 1.0, c_anchorTopLeft, 0.0, 0.0, false);
    gv_newItems[lv_newItemIndex].lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeImage, c_anchorLeft, -0.2, 0.0, 1.0, 1.0, StringExternal("Param/Value/EBBF872C"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_newItems[lv_newItemIndex].lv_imagePortrait, PlayerGroupAll());
    libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeLabel, c_anchorLeft, 0.8, 0.0, 20.0, 2.0, gv_newItems[lv_newItemIndex].lv_text);
    gv_newItems[lv_newItemIndex].lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StoryModeNewItemTooltip", PlayerGroupAll());
    PortraitCreate(0, 0, c_anchorTopLeft, FixedToInt(gv_c_NEWITEMINFO_FLASHWIDTH), FixedToInt(gv_c_NEWITEMINFO_FLASHHEIGHT), gv_newItems[lv_newItemIndex].lv_modelFlash, "CameraPortrait", "Default", false, false);
    gv_newItems[lv_newItemIndex].lv_flash = PortraitLastCreated();
    PortraitSetBackgroundVisible(PortraitLastCreated(), false);
    PortraitSetBorderVisible(PortraitLastCreated(), false);
    gf_MoveNewItem(lv_newItemIndex, lv_offset, 0.0);
    Wait(0.5, c_timeReal);
    auto30B20644_val = gv_newItems[lv_newItemIndex].lv_type;
    if (auto30B20644_val == 4) {
    }
    else if (auto30B20644_val == 7) {
    }
    else {
    }
    SoundPlay(SoundLink("TUINewRoomActorOnline", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PortraitSetAnim(gv_newItems[lv_newItemIndex].lv_flash, "Birth", "TriggerPortraitAnim", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, 0.0);
    if ((gv_newItemInfoPaused == true)) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), false, false);
    }
    else {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    }
    gf_WaitNewItemInfoDisplayDuration(lv_newItemIndex);
    gf_RemoveNewItem(lv_newItemIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNewItem_Init () {
    gt_CreateNewItem = TriggerCreate("gt_CreateNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move New Item
//--------------------------------------------------------------------------------------------------
bool gt_MoveNewItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newItemIndex;
    fixed lv_offsetTarget;
    fixed lv_duration;
    fixed lv_offsetOriginal;
    fixed lv_offset;
    fixed lv_incrementOffset;
    fixed lv_incrementTime;
    int lv_moveCount;

    // Variable Initialization
    lv_newItemIndex = 0;
    lv_offsetTarget = 0.0;
    lv_duration = 0.0;
    lv_offsetOriginal = 0.0;
    lv_offset = 0.0;
    lv_incrementOffset = 0.0;
    lv_incrementTime = 0.0;
    lv_moveCount = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_MoveNewItem_NewItemIndex;
    lv_offsetTarget = gv_tP_MoveNewItem_OffsetY;
    lv_duration = gv_tP_MoveNewItem_Duration;
    if ((lv_duration <= 0.0)) {
        gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
        return true;
    }
    else {
    }
    lv_incrementOffset = 0.15;
    lv_offsetOriginal = libCamp_gf_DialogOffsetYInGrid(gv_newItems[lv_newItemIndex].lv_dialog);
    if ((AbsF((lv_offsetTarget - lv_offsetOriginal)) <= lv_incrementOffset)) {
        gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
        return true;
    }
    else {
    }
    if ((lv_offsetTarget < lv_offsetOriginal)) {
        lv_incrementOffset = (lv_incrementOffset * -1.0);
    }
    else {
    }
    lv_offset = lv_offsetOriginal;
    while (true) {
        lv_offset=lv_offset + lv_incrementOffset;
        if ((lv_incrementOffset > 0.0) && (lv_offset >= lv_offsetTarget)) {
            break;
        }
        else {
        }
        if ((lv_incrementOffset < 0.0) && (lv_offset <= lv_offsetTarget)) {
            break;
        }
        else {
        }
        gf_MoveNewItemInstant(lv_newItemIndex, lv_offset);
        Wait(0.0625, c_timeReal);
    }
    gf_MoveNewItemInstant(lv_newItemIndex, lv_offsetTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveNewItem_Init () {
    gt_MoveNewItem = TriggerCreate("gt_MoveNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove New Item
//--------------------------------------------------------------------------------------------------
bool gt_RemoveNewItem_Func (bool testConds, bool runActions) {
    int autoBB9F0C83_as;
    int autoBB9F0C83_ae;
    int autoBB9F0C83_ai;

    // Variable Declarations
    int lv_newItemIndex;
    int lv_index;
    int lv_fadeTimes;
    fixed lv_interval;
    fixed lv_transparencyChange;

    // Variable Initialization
    lv_newItemIndex = 0;
    lv_index = 0;
    lv_fadeTimes = 0;
    lv_interval = 0.0;
    lv_transparencyChange = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newItemIndex = gv_tP_NewItemBeingRemoved;
    if (((lv_newItemIndex <= 0) || (gv_newItems[lv_newItemIndex].lv_beingRemoved == true))) {
        return true;
    }
    else {
    }
    gv_newItems[lv_newItemIndex].lv_beingRemoved = true;
    lv_fadeTimes = 30;
    lv_interval = (1.5 / IntToFixed(lv_fadeTimes));
    lv_transparencyChange = (100.0 / IntToFixed(lv_fadeTimes));
    libNtve_gf_PortraitSetAnim(gv_newItems[lv_newItemIndex].lv_flash, "Death", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
    autoBB9F0C83_as = 1;
    autoBB9F0C83_ae = lv_fadeTimes;
    autoBB9F0C83_ai = 1;
    lv_index = autoBB9F0C83_as;
    if (autoBB9F0C83_ai > 0 || (autoBB9F0C83_ai == 0 && autoBB9F0C83_as < autoBB9F0C83_ae)) {
        while (lv_index <= autoBB9F0C83_ae) {
            DialogSetTransparency(gv_newItems[lv_newItemIndex].lv_dialog, (lv_transparencyChange * IntToFixed(lv_index)));
            Wait(lv_interval, c_timeReal);
            lv_index = lv_index + autoBB9F0C83_ai;
        }
    }
    else if (autoBB9F0C83_ai < 0 || (autoBB9F0C83_ai == 0 && autoBB9F0C83_ae < autoBB9F0C83_as)) {
        while (lv_index >= autoBB9F0C83_ae) {
            DialogSetTransparency(gv_newItems[lv_newItemIndex].lv_dialog, (lv_transparencyChange * IntToFixed(lv_index)));
            Wait(lv_interval, c_timeReal);
            lv_index = lv_index + autoBB9F0C83_ai;
        }
    }
    gf_DestoryNewItem(lv_newItemIndex);
    gv_newItems[lv_newItemIndex].lv_beingRemoved = false;
    gf_UpdateNewItems();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveNewItem_Init () {
    gt_RemoveNewItem = TriggerCreate("gt_RemoveNewItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Enabled Look At
//--------------------------------------------------------------------------------------------------
bool gt_DebugEnabledLookAt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lookAtEnabled = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/77BDD6A4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugEnabledLookAt_Init () {
    gt_DebugEnabledLookAt = TriggerCreate("gt_DebugEnabledLookAt_Func");
    TriggerAddEventChatMessage(gt_DebugEnabledLookAt, 1, "ENABLELOOKAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Disabled Look At
//--------------------------------------------------------------------------------------------------
bool gt_DebugDisabledLookAt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lookAtEnabled = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/615132C4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDisabledLookAt_Init () {
    gt_DebugDisabledLookAt = TriggerCreate("gt_DebugDisabledLookAt_Func");
    TriggerAddEventChatMessage(gt_DebugDisabledLookAt, 1, "DISABLELOOKAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Query Dialog Dismissed
//--------------------------------------------------------------------------------------------------
bool gt_QueryDialogDismissed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_queryDialogResult = EventCustomDialogResult();
    gv_queryDialogClosed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueryDialogDismissed_Init () {
    gt_QueryDialogDismissed = TriggerCreate("gt_QueryDialogDismissed_Func");
    TriggerAddEventCustomDialogDismissed(gt_QueryDialogDismissed, c_playerAny, 0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init
//--------------------------------------------------------------------------------------------------
bool gt_MapInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    GameSetTransitionMap("Campaign/TStory01.SC2Map");
    TriggerExecute(gt_Init01StoryData, true, true);
    TriggerExecute(gt_Init02World, true, false);
    TriggerExecute(gt_Init03UI, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Sounds, true, false);
    TriggerExecute(gt_Init06Intro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInit_Init () {
    gt_MapInit = TriggerCreate("gt_MapInit_Func");
    TriggerAddEventMapInit(gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Story Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01StoryData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01AData, true, true);
    if ((gv_isTransitionalLoad == false)) {
        TriggerExecute(gt_Init01BRewards, true, false);
        TriggerExecute(gt_Init01CDerivedStates, true, false);
    }
    else {
        TriggerExecute(gt_Init01CDerivedStatesTransitionalLoad, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01StoryData_Init () {
    gt_Init01StoryData = TriggerCreate("gt_Init01StoryData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01A - Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01AData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/CF302ED4"), false);
    gf_RegisterRoomStates();
    libCamp_gf_LoadCampaignData(31);
    gf_TransitionalLoad();
    TriggerDebugOutput(1, StringExternal("Param/Value/82FE4BD6"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01AData_Init () {
    gt_Init01AData = TriggerCreate("gt_Init01AData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01B - Rewards
//--------------------------------------------------------------------------------------------------
bool gt_Init01BRewards_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_credits;
    int lv_creditsPerResearchPoint;
    int[3] lv_researchPointCap;
    int lv_obj;

    // Variable Initialization
    lv_credits = 0;
    lv_creditsPerResearchPoint = 0;
    init_i = 0;
    while (init_i <= 2) {
        lv_researchPointCap[init_i] = 0;
        init_i = init_i + 1;
    }
    lv_obj = 0;

    // Conditions
    if (testConds) {
        if (!((libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == true))) {
            return false;
        }

        if (!((libCamp_gf_LastMissionConditionCheck(0) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/4C2FA3D2"), false);
    lv_credits = libCamp_gf_StoryCredits();
    if ((libCamp_gf_LastMissionConditionCheck(1) == false)) {
        lv_credits=lv_credits + libCamp_gf_MissionReward(libCamp_gf_LastMap());
    }
    else {
    }
    if ((libCamp_gf_MissionStatusCheck(libCamp_gf_LastMission(), 2) == true) && (libCamp_gf_MissionObjectiveRewardsEarnedLastMission() > 0)) {
        lv_credits=lv_credits + libCamp_gf_MissionObjectiveRewardsEarnedLastMission();
    }
    else {
    }
    libCamp_gf_SetStoryCredits(lv_credits);
    TriggerDebugOutput(1, StringExternal("Param/Value/2D24B41D"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01BRewards_Init () {
    gt_Init01BRewards = TriggerCreate("gt_Init01BRewards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artifactCount;
    int lv_indexTech;
    int lv_indexMerc;
    int lv_levelOld;
    int lv_levelNew;

    // Variable Initialization
    lv_artifactCount = 0;
    lv_indexTech = 0;
    lv_indexMerc = 0;
    lv_levelOld = 0;
    lv_levelNew = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/0BDD7A96"), false);
    gv_currentLocation = 0;
    if ((libCamp_gf_MissionStatusCheck(3, 2) == true)) {
        gv_currentLocation = 0;
    }
    else if ((true == true)) {
        gv_currentLocation = 1;
    }
    if ((libCamp_gf_MissionStatusCheck(3, 2) == false)) {
        gf_EnableRoomLocation(true, 1);
    }
    else {
        gf_EnableRoomLocation(false, 1);
    }
    lv_artifactCount = 0;
    ConversationDataStateSetValue("Hotspots|MarSaraBriefcase", 0);
    TriggerExecute(gt_Init01CDerivedStatesNews, true, false);
    TriggerDebugOutput(1, StringExternal("Param/Value/B52D277B"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStates_Init () {
    gt_Init01CDerivedStates = TriggerCreate("gt_Init01CDerivedStates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States News
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesNews_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == false) || (libCamp_gf_LastMissionConditionCheck(0) == false) || (libCamp_gf_LastMissionConditionCheck(1) == true))) {
        return true;
    }
    else {
    }
    if (((libCamp_gf_LastMission() == 1) || (libCamp_gf_LastMission() == 2))) {
        ConversationDataStateSetValue("Hotspots|MarSaraTV", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesNews_Init () {
    gt_Init01CDerivedStatesNews = TriggerCreate("gt_Init01CDerivedStatesNews_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01C - Derived States (Transitional Load)
//--------------------------------------------------------------------------------------------------
bool gt_Init01CDerivedStatesTransitionalLoad_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/40029CEE"), false);
    if ((libCamp_gf_MissionStatusCheck(3, 2) == false)) {
        gf_EnableRoomLocation(true, 1);
    }
    else {
        gf_EnableRoomLocation(false, 1);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/8C70679F"), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CDerivedStatesTransitionalLoad_Init () {
    gt_Init01CDerivedStatesTransitionalLoad = TriggerCreate("gt_Init01CDerivedStatesTransitionalLoad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 World
//--------------------------------------------------------------------------------------------------
bool gt_Init02World_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Init02AActors, true, false);
    TriggerExecute(gt_Init02BRooms, true, false);
    TriggerExecute(gt_Init02CCameras, true, false);
    TriggerExecute(gt_Init02DHotspots, true, false);
    TriggerExecute(gt_Init02EStarmap, true, false);
    TriggerExecute(gt_Init02FScenes, true, false);
    TriggerExecute(gt_Init02GBriefingABChoice, true, false);
    TriggerExecute(gt_Init02HDebriefing, true, false);
    TriggerExecute(gt_Init02ITVNews, true, false);
    if ((gv_cinematicDebugValue == 0)) {
        TriggerExecute(gt_Init02JPreloading, true, false);
    }
    else {
    }
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_ResetClickablesLockCount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02World_Init () {
    gt_Init02World = TriggerCreate("gt_Init02World_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02A - Actors
//--------------------------------------------------------------------------------------------------
bool gt_Init02AActors_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitActors();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02AActors_Init () {
    gt_Init02AActors = TriggerCreate("gt_Init02AActors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02B - Rooms
//--------------------------------------------------------------------------------------------------
bool gt_Init02BRooms_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_galaxyRoom = UnitFromId(5);
    gv_galaxyRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, 0, 0), 0);
    gf_InitMarSaraBarUnits();
    gv_voidRoom = UnitFromId(43);
    gv_voidRoomUnits = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter(0, 0, 0, 0), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02BRooms_Init () {
    gt_Init02BRooms = TriggerCreate("gt_Init02BRooms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02C - Cameras
//--------------------------------------------------------------------------------------------------
bool gt_Init02CCameras_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_marSaraTychusCameras = UnitFromId(242);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02CCameras_Init () {
    gt_Init02CCameras = TriggerCreate("gt_Init02CCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02D - Hotspots
//--------------------------------------------------------------------------------------------------
bool gt_Init02DHotspots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitMarSaraBarHotspots();
    TriggerExecute(gt_Init02DHotspotsPinboard, true, false);
    gf_TurnClickablesOnOff(gv_clickables, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02DHotspots_Init () {
    gt_Init02DHotspots = TriggerCreate("gt_Init02DHotspots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02D - Hotspots (Pinboard)
//--------------------------------------------------------------------------------------------------
bool gt_Init02DHotspotsPinboard_Func (bool testConds, bool runActions) {
    int autoC073E18B_val;
    int autoD6664925_val;

    // Variable Declarations
    soundlink lv_highlightSound;

    // Variable Initialization
    lv_highlightSound = SoundLink("EditorDefaultSound", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    autoC073E18B_val = libCamp_gf_LastSuccessfulMission();
    if (autoC073E18B_val == 0) {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundHighlight", -1);
    }
    else if (autoC073E18B_val == 1) {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundStage2Highlight", -1);
    }
    else if (autoC073E18B_val == 2) {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundStage3Highlight", -1);
    }
    else {
        lv_highlightSound = SoundLink("SMMarSaraBarCorkboardBackgroundHighlight", -1);
    }
    gf_AddPinboard(1, "MarSaraFidgetspinboardgeneric", gv_marSaraPinboard, 6, "Zoom_04", "Fly 04", 1.833, "Zoom_04_Back", "Fly 04", 1.833, lv_highlightSound);
    gf_AddPinboardItem(1, "MarSaraFidgetsArmyphoto", null, SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(2, "MarSaraFidgetswantedposter", UnitFromId(231), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(3, "MarSaraFidgetsFreedomposter", UnitFromId(328), SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(4, "MarSaraFidgetsLocalhero2", UnitFromId(21), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(5, "MarSaraFidgetsvikingphoto2", UnitFromId(234), SoundLink("SetPiece_Corkboard_Poster", c_soundIndexAny));
    gf_AddPinboardItem(6, "MarSaraFidgetsEvolutionofrevolution2", UnitFromId(235), SoundLink("SetPiece_Corkboard_NewsPrint", c_soundIndexAny));
    gf_AddPinboardItem(7, "MarSaraFidgetsHeavensDevils", UnitFromId(331), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    gf_AddPinboardItem(8, "MarSaraFidgetsHydrahunt", UnitFromId(351), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    gf_AddPinboardItem(9, "MarSaraFidgetsKerriganPhoto", UnitFromId(856), SoundLink("SetPiece_Corkboard_CardStock", c_soundIndexAny));
    autoD6664925_val = libCamp_gf_LastSuccessfulMission();
    if (autoD6664925_val == 0) {
        gf_AddPinboardItemToPinboard(1, 3);
        gf_AddPinboardItemToPinboard(1, 4);
    }
    else if (autoD6664925_val == 1) {
        gf_AddPinboardItemToPinboard(1, 4);
        gf_AddPinboardItemToPinboard(1, 5);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(5)].lv_item, 6, 3);
        gf_AddPinboardItemToPinboard(1, 9);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(9)].lv_item, 6, 3);
    }
    else if (autoD6664925_val == 2) {
        gf_AddPinboardItemToPinboard(1, 3);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(3)].lv_item, 6, 3);
        gf_AddPinboardItemToPinboard(1, 4);
        gf_AddPinboardItemToPinboard(1, 5);
        gf_AddPinboardItemToPinboard(1, 8);
        gf_AddClickable(gv_clickables, gv_pinboardItems[(8)].lv_item, 6, 3);
        gf_AddPinboardItemToPinboard(1, 9);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02DHotspotsPinboard_Init () {
    gt_Init02DHotspotsPinboard = TriggerCreate("gt_Init02DHotspotsPinboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02E - Starmap
//--------------------------------------------------------------------------------------------------
bool gt_Init02EStarmap_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02EStarmap_Init () {
    gt_Init02EStarmap = TriggerCreate("gt_Init02EStarmap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02F - Scenes
//--------------------------------------------------------------------------------------------------
bool gt_Init02FScenes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sceneIndex;

    // Variable Initialization
    lv_sceneIndex = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SceneInitData();
    if ((GameIsTestMap(true) == true)) {
        return true;
    }
    else {
    }
    libCamp_gf_RegisterSceneCallback(1, gt_Scene01RaynorIntro);
    libCamp_gf_RegisterSceneCallback(4, gt_Scene04TychusIntro);
    libCamp_gf_RegisterSceneCallback(5, gt_Scene05EscapefromMarSara);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02FScenes_Init () {
    gt_Init02FScenes = TriggerCreate("gt_Init02FScenes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02G - Briefing & ABChoice
//--------------------------------------------------------------------------------------------------
bool gt_Init02GBriefingABChoice_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_briefing_MarSaraMain = UnitFromId(6);
    gv_briefing_MarSaraCenter = UnitFromId(7);
    gv_briefing_MarSaraLeft = UnitFromId(10);
    gv_briefing_MarSaraRight = UnitFromId(14);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraMain);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraCenter);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraLeft);
    UnitGroupRemove(gv_marSaraRoomUnits, gv_briefing_MarSaraRight);
    libCamp_gf_SetMissionBriefing(1, gt_BriefingTRaynor01, gt_BriefingTRaynor01Preload, gt_BriefingTRaynor01PreloadRough);
    libCamp_gf_SetMissionBriefing(2, gt_BriefingTRaynor02, gt_BriefingTRaynor02Preload, gt_BriefingTRaynor02PreloadRough);
    libCamp_gf_SetMissionBriefing(3, gt_BriefingTRaynor03, gt_BriefingTRaynor03Preload, gt_BriefingTRaynor03PreloadRough);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02GBriefingABChoice_Init () {
    gt_Init02GBriefingABChoice = TriggerCreate("gt_Init02GBriefingABChoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02H - Debriefing
//--------------------------------------------------------------------------------------------------
bool gt_Init02HDebriefing_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02HDebriefing_Init () {
    gt_Init02HDebriefing = TriggerCreate("gt_Init02HDebriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02I - TVNews
//--------------------------------------------------------------------------------------------------
bool gt_Init02ITVNews_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitTVNewsSingle(31, "StoryNews|TStory01", gt_TVNewsRaynor00, gt_TVNewsRaynor00Preload);
    gf_InitTVNewsSingle(1, "StoryNews|TRaynor01", gt_TVNewsRaynor01, gt_TVNewsRaynor01Preload);
    gf_InitTVNewsSingle(2, "StoryNews|TRaynor02", gt_TVNewsRaynor02, gt_TVNewsRaynor02Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02ITVNews_Init () {
    gt_Init02ITVNews = TriggerCreate("gt_Init02ITVNews_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02J - Preloading
//--------------------------------------------------------------------------------------------------
bool gt_Init02JPreloading_Func (bool testConds, bool runActions) {
    unitgroup autoF1DA09B7_g;
    int autoF1DA09B7_u;

    // Variable Declarations
    int lv_roomIndex;
    int lv_sceneIndex;
    unit lv_indexUnit;

    // Variable Initialization
    lv_roomIndex = 0;
    lv_sceneIndex = 0;
    lv_indexUnit = null;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_MissionStatusCheck(3, 2) == false)) {
        gf_ReloadLocations();
        if ((libCamp_gf_LastSuccessfulMission() == 0)) {
            gf_PlanetPanelPreload();
        }
        else {
        }
    }
    else {
    }
    gf_ScenePreloadInit();
    autoF1DA09B7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF1DA09B7_u = 1;
    while (autoF1DA09B7_u <= UnitGroupCount(autoF1DA09B7_g, c_unitCountAll)) {
        lv_indexUnit = UnitGroupUnit(autoF1DA09B7_g, autoF1DA09B7_u);
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        if (lv_indexUnit == UnitGroupUnit(autoF1DA09B7_g, autoF1DA09B7_u)) {
            autoF1DA09B7_u = autoF1DA09B7_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02JPreloading_Init () {
    gt_Init02JPreloading = TriggerCreate("gt_Init02JPreloading_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 UI
//--------------------------------------------------------------------------------------------------
bool gt_Init03UI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowButtons, false);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03UI_Init () {
    gt_Init03UI = TriggerCreate("gt_Init03UI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraLockInput(1, true);
    CameraUseHeightSmoothing(1, false);
    CameraSetVerticalFieldOfView(1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Sounds
//--------------------------------------------------------------------------------------------------
bool gt_Init05Sounds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    gf_TurnMarSaraBarBackgroundSoundOnOff(false);
    if ((gf_RoomIsEnabled(6) == true)) {
        TriggerExecute(gt_MarSaraJukeboxInit, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Sounds_Init () {
    gt_Init05Sounds = TriggerCreate("gt_Init05Sounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Intro
//--------------------------------------------------------------------------------------------------
bool gt_Init06Intro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_isTransitionalLoad == true)) {
        TriggerExecute(gt_ReturnGeneric2, true, true);
        return true;
    }
    else {
    }
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_DebugAutomatedTesting, true, false);
        return true;
    }
    else {
    }
    if ((libCamp_gf_LastMap() == 0)) {
        gf_DisplayMissionDebriefing(0);
        return true;
    }
    else {
    }
    if ((libCamp_gf_MapTypeCheck(libCamp_gf_LastMap(), 1) == false)) {
        TriggerExecute(gt_ReturnGeneric, true, false);
        return true;
    }
    else {
    }
    if ((libCamp_gf_LastMissionConditionCheck(0) == false)) {
        TriggerExecute(gt_ReturnGeneric, true, false);
        return true;
    }
    else {
    }
    gf_DisplayMissionDebriefing(libCamp_gf_LastMission());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Intro_Init () {
    gt_Init06Intro = TriggerCreate("gt_Init06Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To MarSara
//--------------------------------------------------------------------------------------------------
bool gt_ReturnToMarSara_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GoToRoom(6, false);
    gf_EnterRoom(6, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnToMarSara_Init () {
    gt_ReturnToMarSara = TriggerCreate("gt_ReturnToMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return (Generic)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnGeneric_Func (bool testConds, bool runActions) {
    int auto31FF7788_val;
    int auto391AC1EA_val;

    // Variable Declarations
    int lv_room;

    // Variable Initialization
    lv_room = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libCamp_gf_LastSuccessfulMission() == 0)) {
        gf_SetAllSoundChannelVolumesStoryMode(0);
        gf_StopAllTransmissionConversation();
        gf_SetWorldMode(3);
        gf_SetIdleState(0);
        gf_PlanetPanelDisplay(20, gt_MarSaraBriefcaseLeave);
        PlanetPanelSetBackButtonEnabled(PlayerGroupAll(), true);
        return true;
    }
    else {
    }
    auto31FF7788_val = libCamp_gf_LastMission();
    if (auto31FF7788_val == 0) {
        return true;
    }
    else if (auto31FF7788_val == 1) {
        lv_room = 6;
    }
    else if (auto31FF7788_val == 2) {
        lv_room = 6;
    }
    else if (auto31FF7788_val == 3) {
        lv_room = 6;
    }
    else {
    }
    if ((gv_returned == false)) {
        gf_ReturnTimestamp();
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/DE8C56DB") + gf_RoomName(lv_room)), false);
    auto391AC1EA_val = lv_room;
    if (auto391AC1EA_val == 6) {
        TriggerExecute(gt_ReturnToMarSara, true, true);
    }
    else {
    }
    gf_ReturnFlahsing();
    Wait(0.2, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_returned == false)) {
        gf_StartTipHint();
    }
    else {
    }
    Wait(0.5, c_timeReal);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_ReturnNewItemInfo();
    if ((gv_returned == false)) {
        gv_returned = true;
    }
    else {
    }
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnGeneric_Init () {
    gt_ReturnGeneric = TriggerCreate("gt_ReturnGeneric_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return (Transitional Load)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnGeneric2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_room;

    // Variable Initialization
    lv_room = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/C710CD1E") + gf_RoomName(lv_room)), false);
    lv_room = gv_currentRoom;
    gv_currentRoom = 0;
    gf_GoToRoom(lv_room, false);
    gf_EnterRoom(lv_room, false);
    gf_ReturnFlahsing();
    Wait(0.2, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_StartTipHint();
    Wait(0.5, c_timeReal);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_ReturnNewItemInfo();
    gv_returned = true;
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnGeneric2_Init () {
    gt_ReturnGeneric2 = TriggerCreate("gt_ReturnGeneric2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Story Save
//--------------------------------------------------------------------------------------------------
bool gt_StorySave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_PrepareForStoryModeTransitionalSave();
    gf_TransitionalSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorySave_Init () {
    gt_StorySave = TriggerCreate("gt_StorySave_Func");
    TriggerAddEventSaveGame(gt_StorySave);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Story Save Done
//--------------------------------------------------------------------------------------------------
bool gt_StorySaveDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_transitionalBank == null)) {
        return true;
    }
    else {
    }
    BankRemove(gv_transitionalBank);
    gv_transitionalBank = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorySaveDone_Init () {
    gt_StorySaveDone = TriggerCreate("gt_StorySaveDone_Func");
    TriggerAddEventSaveGameDone(gt_StorySaveDone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End of Time
//--------------------------------------------------------------------------------------------------
bool gt_EndofTime_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_PrepareForStoryMode(c_gameOverVictory, PlayerDifficulty(1));
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndofTime_Init () {
    gt_EndofTime = TriggerCreate("gt_EndofTime_Func");
    TriggerAddEventTimeElapsed(gt_EndofTime, 32767.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Debug
//--------------------------------------------------------------------------------------------------
bool gt_EnableDebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isForDebug = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableDebug_Init () {
    gt_EnableDebug = TriggerCreate("gt_EnableDebug_Func");
    TriggerAddEventChatMessage(gt_EnableDebug, 1, "enabledebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Debug
//--------------------------------------------------------------------------------------------------
bool gt_DisableDebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isForDebug = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableDebug_Init () {
    gt_DisableDebug = TriggerCreate("gt_DisableDebug_Func");
    TriggerAddEventChatMessage(gt_DisableDebug, 1, "disabledebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Automated Testing
//--------------------------------------------------------------------------------------------------
bool gt_DebugAutomatedTesting_Func (bool testConds, bool runActions) {
    int auto4777B56B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == false)) {
        return true;
    }
    else {
    }
    BankLoad("DebugCinematic", 1);
    BankValueSetFromInt(BankLastCreated(), "DebugCinematicShow", "Value", 0);
    BankSave(BankLastCreated());
    if ((gv_cinematicDebugValue == 0)) {
        Wait(0.2, c_timeGame);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(1, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(2, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(3, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(5, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(4, false);
        Wait(1.0, c_timeGame);
        gf_ChangeRoom(6, false);
        Wait(1.0, c_timeGame);
        gf_GoToRoom(11, false);
        Wait(1.0, c_timeGame);
        gf_GoToRoom(2, false);
        Wait(1.0, c_timeGame);
        ConsoleCommand("exit", true, true);
    }
    else {
        if ((gv_cinematicDebugValue <= 17)) {
            TriggerExecute(gv_cinematicDebugPlaylist[gv_cinematicDebugValue], true, true);
            ConsoleCommand("resourcesnapshot", true, true);
            Wait(0.2, c_timeGame);
            ConsoleCommand("exit", true, true);
            return true;
        }
        else {
            CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
            auto4777B56B_val = gv_cinematicDebugValue;
            if (auto4777B56B_val == 20) {
                gf_ChangeRoom(6, false);
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[3].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(3));
                gf_PreloadUnitStoryMap(gf_ActorUnit(1));
                gf_PreloadUnitStoryMap(gf_ActorUnit(2));
                PerfTestStart(StringExternal("Param/Value/C52B9B2D"));
            }
            else if (auto4777B56B_val == 21) {
                gf_ChangeRoom(2, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(2));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[3].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(3));
                PerfTestStart(StringExternal("Param/Value/657DE8C0"));
            }
            else if (auto4777B56B_val == 22) {
                gf_ChangeRoom(1, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(2));
                PerfTestStart(StringExternal("Param/Value/BF15A5E2"));
            }
            else if (auto4777B56B_val == 23) {
                gf_ChangeRoom(3, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(2));
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[3].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(3));
                PerfTestStart(StringExternal("Param/Value/60DB1198"));
            }
            else if (auto4777B56B_val == 24) {
                gf_ChangeRoom(4, false);
                gf_PreloadUnitStoryMap(gf_ActorUnit(2));
                PerfTestStart(StringExternal("Param/Value/F2D8EFC3"));
            }
            else if (auto4777B56B_val == 25) {
                gf_ChangeRoom(5, false);
                libNtve_gf_ShowHideUnit(gf_ActorUnit(gv_actors[3].lv_actorID), true);
                gf_PreloadUnitStoryMap(gf_ActorUnit(3));
                PerfTestStart(StringExternal("Param/Value/883DC614"));
            }
            else {
            }
            Wait(20.0, c_timeGame);
            PerfTestStop();
            ConsoleCommand("resourcesnapshot", true, true);
            Wait(0.2, c_timeGame);
            ConsoleCommand("exit", true, true);
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugAutomatedTesting_Init () {
    gt_DebugAutomatedTesting = TriggerCreate("gt_DebugAutomatedTesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Up the Night
//--------------------------------------------------------------------------------------------------
bool gt_TerranUptheNight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranUpTheNightPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_terranUpTheNightPlaying = true;
    if ((gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music != null)) {
        gf_FadeJukeboxVolumeOverTime(gv_marSaraJukeboxID);
    }
    else {
    }
    if (true) {
    }
    else {
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "EasterEggMusic_TerranUpTheNight", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("EasterEggMusic_TerranUpTheNight");
    gv_terranUpTheNightPlaying = false;
    if ((gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_muted == false) && (gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music != null)) {
        SoundSetVolume(gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_music, 100.0);
    }
    else {
    }
    if (true) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranUptheNight_Init () {
    gt_TerranUptheNight = TriggerCreate("gt_TerranUptheNight_Func");
    TriggerAddEventChatMessage(gt_TerranUptheNight, c_playerAny, "OverEngineeredCodPiece", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneCreateDialog
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneCreateDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(700, 1100, c_anchorCenter, -390, -550, true);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 0);
    gv_debugSceneDialog = DialogLastCreated();
    gf_DebugSceneAddButton(250, 50, 225, 1020, StringExternal("Param/Value/0653CCF1"), gt_DebugSceneExit, StringExternal("Param/Value/EF33F1A0"));
    gv_debugSceneExitButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DebugScenePanelCloseButton", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneCreateDialog_Init () {
    gt_DebugSceneCreateDialog = TriggerCreate("gt_DebugSceneCreateDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneClicked
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneClicked_Func (bool testConds, bool runActions) {
    int auto507E261E_as;
    int auto507E261E_ae;
    int auto507E261E_ai;

    // Variable Declarations
    int lv_index;
    int lv_roomSaved;

    // Variable Initialization
    lv_index = 0;
    lv_roomSaved = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_debugSceneExitButton)) {
        TriggerExecute(gt_DebugSceneExit, true, false);
        return true;
    }
    else {
    }
    auto507E261E_as = 1;
    auto507E261E_ae = gv_debugSceneCount;
    auto507E261E_ai = 1;
    lv_index = auto507E261E_as;
    if (auto507E261E_ai > 0 || (auto507E261E_ai == 0 && auto507E261E_as < auto507E261E_ae)) {
        while (lv_index <= auto507E261E_ae) {
            if ((EventDialogControl() == gv_debugSceneButtons[lv_index])) {
                lv_roomSaved = gv_currentRoom;
                DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), false);
                CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                TriggerEnable(gt_DebugScenePerformanceTestGetFPS, true);
                PerfTestStart(gv_debugSceneLabels[lv_index]);
                TriggerExecute(gv_debugSceneCallbacks[lv_index], true, true);
                PerfTestStop();
                TriggerEnable(gt_DebugScenePerformanceTestGetFPS, false);
                CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), true);
                gf_ChangeRoom(lv_roomSaved, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto507E261E_ai;
        }
    }
    else if (auto507E261E_ai < 0 || (auto507E261E_ai == 0 && auto507E261E_ae < auto507E261E_as)) {
        while (lv_index >= auto507E261E_ae) {
            if ((EventDialogControl() == gv_debugSceneButtons[lv_index])) {
                lv_roomSaved = gv_currentRoom;
                DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), false);
                CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                TriggerEnable(gt_DebugScenePerformanceTestGetFPS, true);
                PerfTestStart(gv_debugSceneLabels[lv_index]);
                TriggerExecute(gv_debugSceneCallbacks[lv_index], true, true);
                PerfTestStop();
                TriggerEnable(gt_DebugScenePerformanceTestGetFPS, false);
                CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), true);
                gf_ChangeRoom(lv_roomSaved, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto507E261E_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneClicked_Init () {
    gt_DebugSceneClicked = TriggerCreate("gt_DebugSceneClicked_Func");
    TriggerAddEventDialogControl(gt_DebugSceneClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugSceneExit
//--------------------------------------------------------------------------------------------------
bool gt_DebugSceneExit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSceneExit_Init () {
    gt_DebugSceneExit = TriggerCreate("gt_DebugSceneExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug SCENE
//--------------------------------------------------------------------------------------------------
bool gt_DebugSCENE_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetWorldMode(3);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    TriggerExecute(gt_DebugSceneCreateDialog, true, false);
    DialogSetVisible(gv_debugSceneDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSCENE_Init () {
    gt_DebugSCENE = TriggerCreate("gt_DebugSCENE_Func");
    TriggerAddEventCheatUsed(gt_DebugSCENE, c_playerAny, c_gameCheatScene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Scene Performance Test Get FPS
//--------------------------------------------------------------------------------------------------
bool gt_DebugScenePerformanceTestGetFPS_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestGetFPS();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugScenePerformanceTestGetFPS_Init () {
    gt_DebugScenePerformanceTestGetFPS = TriggerCreate("gt_DebugScenePerformanceTestGetFPS_Func");
    TriggerEnable(gt_DebugScenePerformanceTestGetFPS, false);
    TriggerAddEventTimePeriodic(gt_DebugScenePerformanceTestGetFPS, 0.06, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomCheat Button Response
//--------------------------------------------------------------------------------------------------
bool gt_RoomCheatButtonResponse_Func (bool testConds, bool runActions) {
    int auto8421548E_val;

    // Variable Declarations
    int lv_room;

    // Variable Initialization
    lv_room = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = 0;
    auto8421548E_val = EventDialogControl();
    if (auto8421548E_val == gv_roomCheatButtonMarSara) {
        lv_room = 6;
    }
    else if (auto8421548E_val == gv_roomCheatButtonBridge) {
        lv_room = 2;
    }
    else if (auto8421548E_val == gv_roomCheatButtonArmory) {
        lv_room = 1;
    }
    else if (auto8421548E_val == gv_roomCheatButtonCantina) {
        lv_room = 3;
    }
    else if (auto8421548E_val == gv_roomCheatButtonLab) {
        lv_room = 4;
    }
    else if (auto8421548E_val == gv_roomCheatButtonChar) {
        lv_room = 5;
    }
    else if (auto8421548E_val == gv_roomCheatButtonObservatory) {
        lv_room = 9;
    }
    else {
    }
    DialogSetVisible(gv_roomCheatDialog, PlayerGroupAll(), false);
    if ((lv_room == 0)) {
        return true;
    }
    else {
    }
    gf_ChangeRoom(lv_room, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomCheatButtonResponse_Init () {
    gt_RoomCheatButtonResponse = TriggerCreate("gt_RoomCheatButtonResponse_Func");
    TriggerAddEventDialogControl(gt_RoomCheatButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOM_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCheatDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOM_Init () {
    gt_DebugROOM = TriggerCreate("gt_DebugROOM_Func");
    TriggerAddEventChatMessage(gt_DebugROOM, 1, "ROOM", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM CHEAT
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOMCHEAT_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCheatDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOMCHEAT_Init () {
    gt_DebugROOMCHEAT = TriggerCreate("gt_DebugROOMCHEAT_Func");
    TriggerAddEventChatMessage(gt_DebugROOMCHEAT, 1, "ROOMCHEAT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug TESTCAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugTESTCAMERA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_cameraName;

    // Variable Initialization
    lv_player = 0;
    lv_cameraName = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_marSaraTychusCameras), c_animNameDefault, "Stand", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    CameraUseModel(1, gv_marSaraTychusCameras, "Pan to Character Medium", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTESTCAMERA_Init () {
    gt_DebugTESTCAMERA = TriggerCreate("gt_DebugTESTCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugTESTCAMERA, 1, "TESTCAM", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug GAMECAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugGAMECAMERA_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(1, false);
    CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10, false);
    gv_debugStoryModeEnabled = false;
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugGAMECAMERA_Init () {
    gt_DebugGAMECAMERA = TriggerCreate("gt_DebugGAMECAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugGAMECAMERA, 1, "GAMECAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug GLOBALVIEW
//--------------------------------------------------------------------------------------------------
bool gt_DebugGLOBALVIEW_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(65), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugGLOBALVIEW_Init () {
    gt_DebugGLOBALVIEW = TriggerCreate("gt_DebugGLOBALVIEW_Func");
    TriggerAddEventChatMessage(gt_DebugGLOBALVIEW, 1, "GLOBALVIEW", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug UNLOCKCAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugUNLOCKCAMERA_Func (bool testConds, bool runActions) {
    playergroup autoB89CC9F3_g;
    int autoB89CC9F3_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("debugcamera 1", true, true);
    autoB89CC9F3_g = PlayerGroupAll();
    autoB89CC9F3_p = 1;
    while (autoB89CC9F3_p <= PlayerGroupCount(autoB89CC9F3_g)) {
        lv_p = PlayerGroupPlayer(autoB89CC9F3_g, autoB89CC9F3_p);
        libNtve_gf_StoryMode(PlayerGroupSingle(lv_p), false);
        CameraLockInput(lv_p, false);
        CameraApplyInfo(lv_p, CameraInfoFromId(65), 0.0, -1, 10, true);
        if (lv_p == PlayerGroupPlayer(autoB89CC9F3_g, autoB89CC9F3_p)) {
            autoB89CC9F3_p = autoB89CC9F3_p + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUNLOCKCAMERA_Init () {
    gt_DebugUNLOCKCAMERA = TriggerCreate("gt_DebugUNLOCKCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugUNLOCKCAMERA, 1, "UNLOCKCAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoomCamera Button Response
//--------------------------------------------------------------------------------------------------
bool gt_RoomCameraButtonResponse_Func (bool testConds, bool runActions) {
    int auto8F455333_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F455333_val = EventDialogControl();
    if (auto8F455333_val == gv_roomCameraButtonMarSara) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(6, true);
        gf_ViewRoomCamera(6, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonBridge) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(2, true);
        gf_ViewRoomCamera(2, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonArmory) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(1, true);
        gf_ViewRoomCamera(1, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonCantina) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(3, true);
        gf_ViewRoomCamera(3, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonLab) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(4, true);
        gf_ViewRoomCamera(4, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonChar) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
        gf_PreloadRoomIfCondition(5, true);
        gf_ViewRoomCamera(5, PlayerGroupAll(), 0.0);
    }
    else if (auto8F455333_val == gv_roomCameraButtonCancel) {
        DialogSetVisible(gv_roomCameraDialog, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomCameraButtonResponse_Init () {
    gt_RoomCameraButtonResponse = TriggerCreate("gt_RoomCameraButtonResponse_Func");
    TriggerAddEventDialogControl(gt_RoomCameraButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ROOM CAMERA
//--------------------------------------------------------------------------------------------------
bool gt_DebugROOMCAMERA_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayRoomCameraDialog(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugROOMCAMERA_Init () {
    gt_DebugROOMCAMERA = TriggerCreate("gt_DebugROOMCAMERA_Func");
    TriggerAddEventChatMessage(gt_DebugROOMCAMERA, 1, "ROOMCAMERA", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Briefing
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Briefing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gf_Debug_CreateBriefingDialog();
    gv_debug_BriefingCheating = true;
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), true);
    gf_BriefingPreload(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Briefing_Init () {
    gt_Debug_Briefing = TriggerCreate("gt_Debug_Briefing_Func");
    TriggerAddEventChatMessage(gt_Debug_Briefing, 1, "BRIEFING", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_BriefingDialogMissionButtonResponse
//--------------------------------------------------------------------------------------------------
bool gt_Debug_BriefingDialogMissionButtonResponse_Func (bool testConds, bool runActions) {
    int auto948A4385_as;
    int auto948A4385_ae;
    int auto948A4385_ai;

    // Variable Declarations
    int lv_mapIndex;
    int lv_map;
    int lv_room;

    // Variable Initialization
    lv_mapIndex = 0;
    lv_map = 0;
    lv_room = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = gv_currentRoom;
    lv_map = 0;
    auto948A4385_as = libCamp_gv_TSC_MAP_FIRST;
    auto948A4385_ae = libCamp_gv_TSC_MAP_LAST;
    auto948A4385_ai = 1;
    lv_mapIndex = auto948A4385_as;
    if (auto948A4385_ai > 0 || (auto948A4385_ai == 0 && auto948A4385_as < auto948A4385_ae)) {
        while (lv_mapIndex <= auto948A4385_ae) {
            if ((gv_debug_BriefingMissioniButton[lv_mapIndex] == EventDialogControl())) {
                lv_map = libCamp_gv_tS_MapID[lv_mapIndex];
                break;
            }
            else {
            }
            lv_mapIndex = lv_mapIndex + auto948A4385_ai;
        }
    }
    else if (auto948A4385_ai < 0 || (auto948A4385_ai == 0 && auto948A4385_ae < auto948A4385_as)) {
        while (lv_mapIndex >= auto948A4385_ae) {
            if ((gv_debug_BriefingMissioniButton[lv_mapIndex] == EventDialogControl())) {
                lv_map = libCamp_gv_tS_MapID[lv_mapIndex];
                break;
            }
            else {
            }
            lv_mapIndex = lv_mapIndex + auto948A4385_ai;
        }
    }
    if ((lv_map == 0)) {
        return true;
    }
    else {
    }
    if ((libCamp_gf_MissionBriefing(lv_map) == null)) {
        return true;
    }
    else {
    }
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    TriggerExecute(libCamp_gf_MissionBriefingPreload(lv_map), true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(libCamp_gf_MissionBriefing(lv_map), true, true);
    gf_GoToRoom(lv_room, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    gf_SetWorldMode(0);
    gf_SetIdleState(1);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_BriefingDialogMissionButtonResponse_Init () {
    gt_Debug_BriefingDialogMissionButtonResponse = TriggerCreate("gt_Debug_BriefingDialogMissionButtonResponse_Func");
    TriggerAddEventDialogControl(gt_Debug_BriefingDialogMissionButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_BriefingDialogClose
//--------------------------------------------------------------------------------------------------
bool gt_Debug_BriefingDialogClose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debug_BriefingButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug_BriefingDialog == c_invalidDialogId)) {
        return true;
    }
    else {
    }
    DialogSetVisible(gv_debug_BriefingDialog, PlayerGroupAll(), false);
    gv_debug_BriefingCheating = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_BriefingDialogClose_Init () {
    gt_Debug_BriefingDialogClose = TriggerCreate("gt_Debug_BriefingDialogClose_Func");
    TriggerAddEventDialogControl(gt_Debug_BriefingDialogClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNews
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNews_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_MissionStatusCheck(1, 2) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C4957911"));
        return true;
    }
    else {
    }
    gf_SetWorldMode(3);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_TurnClickablesOnOff(gv_clickables, false);
    gv_debug_TVNewsOn = true;
    gf_Debug_CreateTVNewsDialog();
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNews_Init () {
    gt_Debug_TVNews = TriggerCreate("gt_Debug_TVNews_Func");
    TriggerAddEventCheatUsed(gt_Debug_TVNews, c_playerAny, c_gameCheatTV);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNewsDialogMissionButtonResponse
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNewsDialogMissionButtonResponse_Func (bool testConds, bool runActions) {
    int auto092D8583_as;
    int auto092D8583_ae;
    int auto092D8583_ai;

    // Variable Declarations
    int lv_mapIndex;
    int lv_map;
    int lv_room;

    // Variable Initialization
    lv_mapIndex = 0;
    lv_map = 0;
    lv_room = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_room = gv_currentRoom;
    lv_map = 0;
    auto092D8583_as = libCamp_gv_TSC_MAP_FIRST;
    auto092D8583_ae = libCamp_gv_TSC_MAP_LAST;
    auto092D8583_ai = 1;
    lv_mapIndex = auto092D8583_as;
    if (auto092D8583_ai > 0 || (auto092D8583_ai == 0 && auto092D8583_as < auto092D8583_ae)) {
        while (lv_mapIndex <= auto092D8583_ae) {
            if ((gv_debug_TVNewsMissioniButton[lv_mapIndex] == EventDialogControl())) {
                lv_map = libCamp_gv_tS_MapID[lv_mapIndex];
                break;
            }
            else {
            }
            lv_mapIndex = lv_mapIndex + auto092D8583_ai;
        }
    }
    else if (auto092D8583_ai < 0 || (auto092D8583_ai == 0 && auto092D8583_ae < auto092D8583_as)) {
        while (lv_mapIndex >= auto092D8583_ae) {
            if ((gv_debug_TVNewsMissioniButton[lv_mapIndex] == EventDialogControl())) {
                lv_map = libCamp_gv_tS_MapID[lv_mapIndex];
                break;
            }
            else {
            }
            lv_mapIndex = lv_mapIndex + auto092D8583_ai;
        }
    }
    if ((lv_map == 0)) {
        return true;
    }
    else {
    }
    if ((gf_TVNewsTrigger(lv_map) == null)) {
        return true;
    }
    else {
    }
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), false);
    TriggerExecute(gf_TVNewsTrigger(lv_map), true, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ChangeRoom(lv_room, false);
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNewsDialogMissionButtonResponse_Init () {
    gt_Debug_TVNewsDialogMissionButtonResponse = TriggerCreate("gt_Debug_TVNewsDialogMissionButtonResponse_Func");
    TriggerAddEventDialogControl(gt_Debug_TVNewsDialogMissionButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_TVNewsDialogClose
//--------------------------------------------------------------------------------------------------
bool gt_Debug_TVNewsDialogClose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debug_TVNewsButtonClose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug_TVNewsDialog == c_invalidDialogId)) {
        return true;
    }
    else {
    }
    DialogSetVisible(gv_debug_TVNewsDialog, PlayerGroupAll(), false);
    gv_debug_TVNewsOn = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    gf_SetWorldMode(0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_TVNewsDialogClose_Init () {
    gt_Debug_TVNewsDialogClose = TriggerCreate("gt_Debug_TVNewsDialogClose_Func");
    TriggerAddEventDialogControl(gt_Debug_TVNewsDialogClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Mission Debriefing
//--------------------------------------------------------------------------------------------------
bool gt_DebugMissionDebriefing_Func (bool testConds, bool runActions) {
    int auto7BB641B7_val;

    // Variable Declarations
    int lv_mission;

    // Variable Initialization
    lv_mission = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = libCamp_gf_LastSuccessfulMission();
    auto7BB641B7_val = lv_mission;
    if (auto7BB641B7_val == 2) {
    }
    else if (auto7BB641B7_val == 3) {
    }
    else if (auto7BB641B7_val == 4) {
    }
    else if (auto7BB641B7_val == 5) {
    }
    else if (auto7BB641B7_val == 8) {
    }
    else if (auto7BB641B7_val == 9) {
    }
    else if (auto7BB641B7_val == 11) {
    }
    else if (auto7BB641B7_val == 12) {
    }
    else if (auto7BB641B7_val == 13) {
    }
    else if (auto7BB641B7_val == 14) {
    }
    else if (auto7BB641B7_val == 16) {
    }
    else if (auto7BB641B7_val == 17) {
    }
    else if (auto7BB641B7_val == 18) {
    }
    else if (auto7BB641B7_val == 20) {
    }
    else if (auto7BB641B7_val == 21) {
    }
    else if (auto7BB641B7_val == 25) {
    }
    else if (auto7BB641B7_val == 26) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugMissionDebriefing_Init () {
    gt_DebugMissionDebriefing = TriggerCreate("gt_DebugMissionDebriefing_Func");
    TriggerAddEventChatMessage(gt_DebugMissionDebriefing, 1, "deb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug ABChoice
//--------------------------------------------------------------------------------------------------
bool gt_DebugABChoice_Func (bool testConds, bool runActions) {
    string auto4314B998_val;
    string auto4089DBAB_val;

    // Variable Declarations
    int lv_oldRoom;

    // Variable Initialization
    lv_oldRoom = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldRoom = gv_currentRoom;
    gf_PauseFlashing(true);
    gf_PauseNewItemInfo(true);
    libCamp_gf_HideStoryUI(false, true);
    auto4314B998_val = StringWord(EventChatMessage(false), 2);
    if (auto4314B998_val == "hanson") {
        gf_GoToRoom(2, false);
    }
    else if (auto4314B998_val == "tosh") {
        gf_GoToRoom(2, false);
    }
    else if (auto4314B998_val == "valerian") {
        gf_GoToRoom(5, false);
    }
    else {
    }
    auto4089DBAB_val = StringWord(EventChatMessage(false), 2);
    if (auto4089DBAB_val == "hanson") {
    }
    else if (auto4089DBAB_val == "tosh") {
    }
    else if (auto4089DBAB_val == "valerian") {
    }
    else {
    }
    gf_ChangeRoom(lv_oldRoom, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    libCamp_gf_HideStoryUI(true, true);
    gf_PauseFlashing(false);
    gf_PauseNewItemInfo(false);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugABChoice_Init () {
    gt_DebugABChoice = TriggerCreate("gt_DebugABChoice_Func");
    TriggerAddEventChatMessage(gt_DebugABChoice, 1, "-ab", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Merc Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugMercIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugMercIntro_Init () {
    gt_DebugMercIntro = TriggerCreate("gt_DebugMercIntro_Func");
    TriggerAddEventChatMessage(gt_DebugMercIntro, 1, "merc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Lab Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugLabIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugLabIntro_Init () {
    gt_DebugLabIntro = TriggerCreate("gt_DebugLabIntro_Func");
    TriggerAddEventChatMessage(gt_DebugLabIntro, 1, "lab", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Armory Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugArmoryIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_HideStoryUI(false, true);
    libCamp_gf_HideStoryUI(true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugArmoryIntro_Init () {
    gt_DebugArmoryIntro = TriggerCreate("gt_DebugArmoryIntro_Func");
    TriggerAddEventChatMessage(gt_DebugArmoryIntro, 1, "armory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blizzcon Screen Wait
//--------------------------------------------------------------------------------------------------
bool gt_BlizzconScreenWait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    while (true) {
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlizzconScreenWait_Init () {
    gt_BlizzconScreenWait = TriggerCreate("gt_BlizzconScreenWait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Output Sets
//--------------------------------------------------------------------------------------------------
bool gt_DebugOutputSets_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(2, "StorySets.txt");
    gf_DebugOutputSetUnitsSingle(1);
    gf_DebugOutputSetUnitsSingle(2);
    gf_DebugOutputSetUnitsSingle(3);
    gf_DebugOutputSetUnitsSingle(5);
    gf_DebugOutputSetUnitsSingle(7);
    gf_DebugOutputSetUnitsSingle(8);
    gf_DebugOutputSetUnitsSingle(4);
    gf_DebugOutputSetUnitsSingle(6);
    gf_DebugOutputSetUnitsSingle(9);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugOutputSets_Init () {
    gt_DebugOutputSets = TriggerCreate("gt_DebugOutputSets_Func");
    TriggerAddEventChatMessage(gt_DebugOutputSets, 1, "autosets", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug CINEMATICMODE
//--------------------------------------------------------------------------------------------------
bool gt_DebugCINEMATICMODE_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugCinematicModeEnabled == true)) {
        gv_debugCinematicModeEnabled = false;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.2);
    }
    else {
        gv_debugCinematicModeEnabled = true;
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCINEMATICMODE_Init () {
    gt_DebugCINEMATICMODE = TriggerCreate("gt_DebugCINEMATICMODE_Func");
    TriggerAddEventChatMessage(gt_DebugCINEMATICMODE, 1, "CINEMATICMODE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug SHOWALL
//--------------------------------------------------------------------------------------------------
bool gt_DebugSHOWALL_Func (bool testConds, bool runActions) {
    unitgroup autoAA1C258C_g;
    int autoAA1C258C_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = null;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA1C258C_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAA1C258C_u = 1;
    while (autoAA1C258C_u <= UnitGroupCount(autoAA1C258C_g, c_unitCountAll)) {
        lv_u = UnitGroupUnit(autoAA1C258C_g, autoAA1C258C_u);
        libNtve_gf_ShowHideUnit(lv_u, true);
        if (lv_u == UnitGroupUnit(autoAA1C258C_g, autoAA1C258C_u)) {
            autoAA1C258C_u = autoAA1C258C_u + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSHOWALL_Init () {
    gt_DebugSHOWALL = TriggerCreate("gt_DebugSHOWALL_Func");
    TriggerAddEventChatMessage(gt_DebugSHOWALL, 1, "SHOWALL", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug DOOR
//--------------------------------------------------------------------------------------------------
bool gt_DebugDOOR_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDOOR_Init () {
    gt_DebugDOOR = TriggerCreate("gt_DebugDOOR_Func");
    TriggerAddEventChatMessage(gt_DebugDOOR, 1, "DOOR", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug IDLETIMES
//--------------------------------------------------------------------------------------------------
bool gt_DebugIDLETIMES_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_idleFidgetStartTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    gv_idleFidgetRepeatTime = StringToFixed(StringWord(EventChatMessage(false), 3));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/A1191FC4") + FixedToText(gv_idleFidgetStartTime, 1) + StringExternal("Param/Value/48AD46C5") + FixedToText(gv_idleFidgetRepeatTime, 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIDLETIMES_Init () {
    gt_DebugIDLETIMES = TriggerCreate("gt_DebugIDLETIMES_Func");
    TriggerAddEventChatMessage(gt_DebugIDLETIMES, 1, "IDLETIMES", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Credits
//--------------------------------------------------------------------------------------------------
bool gt_DebugCredits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/B60C206F") + IntToText(libCamp_gf_StoryCredits())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCredits_Init () {
    gt_DebugCredits = TriggerCreate("gt_DebugCredits_Func");
    TriggerAddEventChatMessage(gt_DebugCredits, 1, "MYCREDITS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Door Animation
//--------------------------------------------------------------------------------------------------
bool gt_DebugDoorAnimation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDoorAnimation_Init () {
    gt_DebugDoorAnimation = TriggerCreate("gt_DebugDoorAnimation_Func");
    TriggerAddEventChatMessage(gt_DebugDoorAnimation, 1, "-dooropen", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Pause Music
//--------------------------------------------------------------------------------------------------
bool gt_DebugPauseMusic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugPauseMusic_Init () {
    gt_DebugPauseMusic = TriggerCreate("gt_DebugPauseMusic_Func");
    TriggerAddEventChatMessage(gt_DebugPauseMusic, 1, "-pm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Attachment Location
//--------------------------------------------------------------------------------------------------
bool gt_DebugAttachmentLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_loc;
    string lv_roomname;
    int lv_room;
    string lv_name;

    // Variable Initialization
    lv_loc = null;
    lv_roomname = "";
    lv_room = 6;
    lv_name = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_roomname = StringWord(EventChatMessage(false), 2);
    lv_name = StringWord(EventChatMessage(false), 3);
    if ((StringContains(lv_roomname, "Armory", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 1;
    }
    else if ((StringContains(lv_roomname, "Bridge", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 2;
    }
    else if ((StringContains(lv_roomname, "Cantina", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 3;
    }
    else if ((StringContains(lv_roomname, "Char", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 5;
    }
    else if ((StringContains(lv_roomname, "Lab", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 4;
    }
    else if ((StringContains(lv_roomname, "MarSara", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_room = 6;
    }
    else if ((true == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F9F016D2"));
        return true;
    }
    lv_loc = UnitGetAttachmentPoint(gf_RoomUnit(lv_room), lv_name);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/ADF09654") + FixedToText(PointGetX(lv_loc), c_fixedPrecisionAny) + StringExternal("Param/Value/4BAB04B3") + FixedToText(PointGetY(lv_loc), c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DADFB189") + FixedToText(PointGetFacing(lv_loc), c_fixedPrecisionAny)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugAttachmentLocation_Init () {
    gt_DebugAttachmentLocation = TriggerCreate("gt_DebugAttachmentLocation_Func");
    TriggerAddEventChatMessage(gt_DebugAttachmentLocation, 1, "attachinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Hide Unclickables
//--------------------------------------------------------------------------------------------------
bool gt_DebugHideUnclickables_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_visibleUnits);
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupHasUnit(gv_clickables, UnitGroupLoopCurrent()) == false)) {
            gf_RemoveVisibleUnit(false, UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHideUnclickables_Init () {
    gt_DebugHideUnclickables = TriggerCreate("gt_DebugHideUnclickables_Func");
    TriggerAddEventChatMessage(gt_DebugHideUnclickables, 1, "hideunclick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Story State
//--------------------------------------------------------------------------------------------------
bool gt_DebugStoryState_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStoryState_Init () {
    gt_DebugStoryState = TriggerCreate("gt_DebugStoryState_Func");
    TriggerAddEventChatMessage(gt_DebugStoryState, 1, "-fly", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Click Turn On
//--------------------------------------------------------------------------------------------------
bool gt_DebugClickTurnOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DebugClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugClickTurnOn_Init () {
    gt_DebugClickTurnOn = TriggerCreate("gt_DebugClickTurnOn_Func");
    TriggerAddEventChatMessage(gt_DebugClickTurnOn, 1, "debugclick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Click
//--------------------------------------------------------------------------------------------------
bool gt_DebugClick_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/13B728CD") + UnitTypeGetName(UnitGetType(EventUnit()))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugClick_Init () {
    gt_DebugClick = TriggerCreate("gt_DebugClick_Func");
    TriggerEnable(gt_DebugClick, false);
    TriggerAddEventUnitClick(gt_DebugClick, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Starmap
//--------------------------------------------------------------------------------------------------
bool gt_DebugStarmap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStarmap_Init () {
    gt_DebugStarmap = TriggerCreate("gt_DebugStarmap_Func");
    TriggerAddEventChatMessage(gt_DebugStarmap, 1, "starmap", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Close Starmap
//--------------------------------------------------------------------------------------------------
bool gt_DebugCloseStarmap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_MissionStatusCheck(3, 2) == false)) {
        gv_planetPanel_LeaveCallback = gt_MarSaraBriefcaseLeave;
    }
    else {
    }
    TriggerExecute(gt_PlanetPanelLeave, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCloseStarmap_Init () {
    gt_DebugCloseStarmap = TriggerCreate("gt_DebugCloseStarmap_Func");
    TriggerAddEventChatMessage(gt_DebugCloseStarmap, 1, "closestarmap", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Mission Archieves
//--------------------------------------------------------------------------------------------------
bool gt_DebugMissionArchieves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugMissionArchieves_Init () {
    gt_DebugMissionArchieves = TriggerCreate("gt_DebugMissionArchieves_Func");
    TriggerAddEventChatMessage(gt_DebugMissionArchieves, 1, "battle", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Show Actor
//--------------------------------------------------------------------------------------------------
bool gt_DebugShowActor_Func (bool testConds, bool runActions) {
    int autoD1085B2B_as;
    int autoD1085B2B_ae;
    int autoD1085B2B_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD1085B2B_as = gv_c_ACTOR_FIRST;
    autoD1085B2B_ae = gv_c_ACTOR_LAST;
    autoD1085B2B_ai = 1;
    lv_index = autoD1085B2B_as;
    if (autoD1085B2B_ai > 0 || (autoD1085B2B_ai == 0 && autoD1085B2B_as < autoD1085B2B_ae)) {
        while (lv_index <= autoD1085B2B_ae) {
            if ((gf_ActorIsEnabledInRoom(gv_actors[lv_index].lv_actorID, gv_currentRoom) == true)) {
                gf_RemoveVisibleUnit(true, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
            }
            else {
            }
            lv_index = lv_index + autoD1085B2B_ai;
        }
    }
    else if (autoD1085B2B_ai < 0 || (autoD1085B2B_ai == 0 && autoD1085B2B_ae < autoD1085B2B_as)) {
        while (lv_index >= autoD1085B2B_ae) {
            if ((gf_ActorIsEnabledInRoom(gv_actors[lv_index].lv_actorID, gv_currentRoom) == true)) {
                gf_RemoveVisibleUnit(true, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
            }
            else {
            }
            lv_index = lv_index + autoD1085B2B_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugShowActor_Init () {
    gt_DebugShowActor = TriggerCreate("gt_DebugShowActor_Func");
    TriggerAddEventChatMessage(gt_DebugShowActor, 1, "showactor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Hide Actor
//--------------------------------------------------------------------------------------------------
bool gt_DebugHideActor_Func (bool testConds, bool runActions) {
    int autoE56D2B54_as;
    int autoE56D2B54_ae;
    int autoE56D2B54_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE56D2B54_as = gv_c_ACTOR_FIRST;
    autoE56D2B54_ae = gv_c_ACTOR_LAST;
    autoE56D2B54_ai = 1;
    lv_index = autoE56D2B54_as;
    if (autoE56D2B54_ai > 0 || (autoE56D2B54_ai == 0 && autoE56D2B54_as < autoE56D2B54_ae)) {
        while (lv_index <= autoE56D2B54_ae) {
            gf_RemoveVisibleUnit(false, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
            lv_index = lv_index + autoE56D2B54_ai;
        }
    }
    else if (autoE56D2B54_ai < 0 || (autoE56D2B54_ai == 0 && autoE56D2B54_ae < autoE56D2B54_as)) {
        while (lv_index >= autoE56D2B54_ae) {
            gf_RemoveVisibleUnit(false, gf_ActorUnit(gv_actors[lv_index].lv_actorID));
            lv_index = lv_index + autoE56D2B54_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHideActor_Init () {
    gt_DebugHideActor = TriggerCreate("gt_DebugHideActor_Func");
    TriggerAddEventChatMessage(gt_DebugHideActor, 1, "hideactor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Room Preload States
//--------------------------------------------------------------------------------------------------
bool gt_DebugRoomPreloadStates_Func (bool testConds, bool runActions) {
    int autoA7B11003_as;
    int autoA7B11003_ae;
    int autoA7B11003_ai;

    // Variable Declarations
    int lv_index;
    int lv_room;
    text lv_output;

    // Variable Initialization
    lv_index = 0;
    lv_room = 0;
    lv_output = StringExternal("Param/Value/464B2A46");

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7B11003_as = gv_c_ROOM_FIRST;
    autoA7B11003_ae = gv_c_ROOM_LAST;
    autoA7B11003_ai = 1;
    lv_index = autoA7B11003_as;
    if (autoA7B11003_ai > 0 || (autoA7B11003_ai == 0 && autoA7B11003_as < autoA7B11003_ae)) {
        while (lv_index <= autoA7B11003_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            lv_output = (gf_RoomName(lv_room) + StringExternal("Param/Value/7C9331BF"));
            if ((gv_roomPreloaded[lv_index] == true)) {
                lv_output = (lv_output + StringExternal("Param/Value/246AD0CA"));
            }
            else {
                lv_output = (lv_output + StringExternal("Param/Value/20202EDF"));
            }
            if ((gf_RoomIsEnabled(lv_room) == true)) {
                lv_output = (lv_output + StringExternal("Param/Value/8BD1EF7F"));
            }
            else {
                lv_output = (lv_output + StringExternal("Param/Value/0FD9E264"));
            }
            TriggerDebugOutput(1, lv_output, true);
            Wait(0.5, c_timeGame);
            lv_index = lv_index + autoA7B11003_ai;
        }
    }
    else if (autoA7B11003_ai < 0 || (autoA7B11003_ai == 0 && autoA7B11003_ae < autoA7B11003_as)) {
        while (lv_index >= autoA7B11003_ae) {
            lv_room = gf_RoomFromIndex(lv_index);
            lv_output = (gf_RoomName(lv_room) + StringExternal("Param/Value/7C9331BF"));
            if ((gv_roomPreloaded[lv_index] == true)) {
                lv_output = (lv_output + StringExternal("Param/Value/246AD0CA"));
            }
            else {
                lv_output = (lv_output + StringExternal("Param/Value/20202EDF"));
            }
            if ((gf_RoomIsEnabled(lv_room) == true)) {
                lv_output = (lv_output + StringExternal("Param/Value/8BD1EF7F"));
            }
            else {
                lv_output = (lv_output + StringExternal("Param/Value/0FD9E264"));
            }
            TriggerDebugOutput(1, lv_output, true);
            Wait(0.5, c_timeGame);
            lv_index = lv_index + autoA7B11003_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRoomPreloadStates_Init () {
    gt_DebugRoomPreloadStates = TriggerCreate("gt_DebugRoomPreloadStates_Func");
    TriggerAddEventChatMessage(gt_DebugRoomPreloadStates, 1, "roompreload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Size
//--------------------------------------------------------------------------------------------------
bool gt_DebugSize_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugDialogForSizePos == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
        gv_debugDialogForSizePos = DialogLastCreated();
        DialogSetImage(gv_debugDialogForSizePos, "Assets\\Textures\\yellow.dds");
        DialogSetTransparency(DialogLastCreated(), (100.0 - (IntToFixed(100) / (255.0 * 100.0))));
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }
    else {
    }
    DialogSetSize(gv_debugDialogForSizePos, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSize_Init () {
    gt_DebugSize = TriggerCreate("gt_DebugSize_Func");
    TriggerAddEventChatMessage(gt_DebugSize, 1, "-size", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Pos
//--------------------------------------------------------------------------------------------------
bool gt_DebugPos_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == EventChatMessage(true)))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debugDialogForSizePos == c_invalidDialogId)) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
        gv_debugDialogForSizePos = DialogLastCreated();
        DialogSetImage(gv_debugDialogForSizePos, "Assets\\Textures\\yellow.dds");
        DialogSetTransparency(DialogLastCreated(), (100.0 - (IntToFixed(100) / (255.0 * 100.0))));
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }
    else {
    }
    DialogSetPosition(gv_debugDialogForSizePos, c_anchorTopLeft, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugPos_Init () {
    gt_DebugPos = TriggerCreate("gt_DebugPos_Func");
    TriggerAddEventChatMessage(gt_DebugPos, 1, "-pos", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug BG Unit Picked
//--------------------------------------------------------------------------------------------------
bool gt_DebugBGUnitPicked_Func (bool testConds, bool runActions) {
    int auto645E7BED_as;
    int auto645E7BED_ae;
    int auto645E7BED_ai;

    // Variable Declarations
    int lv_index;
    text lv_msg;

    // Variable Initialization
    lv_index = 0;
    lv_msg = StringExternal("Param/Value/C017AF60");

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto645E7BED_as = 0;
    auto645E7BED_ae = 3;
    auto645E7BED_ai = 1;
    lv_index = auto645E7BED_as;
    if (auto645E7BED_ai > 0 || (auto645E7BED_ai == 0 && auto645E7BED_as < auto645E7BED_ae)) {
        while (lv_index <= auto645E7BED_ae) {
            lv_msg = (StringExternal("Param/Value/FDDC74F7") + IntToText(lv_index) + StringExternal("Param/Value/602B1650"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_msg);
            lv_index = lv_index + auto645E7BED_ai;
        }
    }
    else if (auto645E7BED_ai < 0 || (auto645E7BED_ai == 0 && auto645E7BED_ae < auto645E7BED_as)) {
        while (lv_index >= auto645E7BED_ae) {
            lv_msg = (StringExternal("Param/Value/FDDC74F7") + IntToText(lv_index) + StringExternal("Param/Value/602B1650"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_msg);
            lv_index = lv_index + auto645E7BED_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugBGUnitPicked_Init () {
    gt_DebugBGUnitPicked = TriggerCreate("gt_DebugBGUnitPicked_Func");
    TriggerAddEventChatMessage(gt_DebugBGUnitPicked, 1, "ArmoryBG", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tosh Portrait
//--------------------------------------------------------------------------------------------------
bool gt_DebugToshPortrait_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitCreate(0, 0, c_anchorCenter, 450, 450, "ToshPortrait", "Dflt", "", true, true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    Wait(4.0, c_timeReal);
    PortraitDestroy(PortraitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugToshPortrait_Init () {
    gt_DebugToshPortrait = TriggerCreate("gt_DebugToshPortrait_Func");
    TriggerAddEventChatMessage(gt_DebugToshPortrait, 1, "-tosh", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tosh Portrait 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugToshPortrait2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitCreate(0, 0, c_anchorCenter, 450, 450, "HansonPortrait", "Dflt", "", true, true);
    PortraitSetVisible(PortraitLastCreated(), PlayerGroupAll(), true, false);
    Wait(4.0, c_timeReal);
    PortraitDestroy(PortraitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugToshPortrait2_Init () {
    gt_DebugToshPortrait2 = TriggerCreate("gt_DebugToshPortrait2_Func");
    TriggerAddEventChatMessage(gt_DebugToshPortrait2, 1, "-hanson", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Stop Transmission
//--------------------------------------------------------------------------------------------------
bool gt_DebugStopTransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StopAllTransmissionConversation();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStopTransmission_Init () {
    gt_DebugStopTransmission = TriggerCreate("gt_DebugStopTransmission_Func");
    TriggerAddEventChatMessage(gt_DebugStopTransmission, 1, "-sc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Zeratul Planet Panel
//--------------------------------------------------------------------------------------------------
bool gt_DebugZeratulPlanetPanel_Func (bool testConds, bool runActions) {
    string autoF1D4A81C_val;

    // Variable Declarations
    int lv_mission;

    // Variable Initialization
    lv_mission = 0;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1D4A81C_val = StringWord(EventChatMessage(false), 2);
    if (autoF1D4A81C_val == "1") {
        lv_mission = 22;
    }
    else if (autoF1D4A81C_val == "2") {
        lv_mission = 23;
    }
    else if (autoF1D4A81C_val == "3") {
        lv_mission = 24;
    }
    else if (autoF1D4A81C_val == "4") {
        lv_mission = 25;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText(EventChatMessage(true)) + StringExternal("Param/Value/74D228A1")));
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugZeratulPlanetPanel_Init () {
    gt_DebugZeratulPlanetPanel = TriggerCreate("gt_DebugZeratulPlanetPanel_Func");
    TriggerAddEventChatMessage(gt_DebugZeratulPlanetPanel, 1, "ZPLANETPANEL", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Temp
//--------------------------------------------------------------------------------------------------
bool gt_DebugTemp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTemp_Init () {
    gt_DebugTemp = TriggerCreate("gt_DebugTemp_Func");
    TriggerAddEventChatMessage(gt_DebugTemp, 1, "-s", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Actor Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ActorClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor;

    // Variable Initialization
    lv_actor = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_actor = gf_ActorID(gf_HotspotClicked());
    if ((gv_currentRoom == 6) && (lv_actor == 3) && (gf_ActorWithConversation(lv_actor) == true)) {
        TriggerExecute(gt_MarSaraTychusClicked, true, false);
    }
    else if ((lv_actor != 0)) {
        gf_PlayGossip(lv_actor);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActorClicked_Init () {
    gt_ActorClicked = TriggerCreate("gt_ActorClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Galaxy
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomGalaxy_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(11, true);
    GameSetLighting("Starmap", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    UISetWorldVisible(PlayerGroupAll(), false);
    gf_ChangeVisibleUnits(gf_RoomUnits(11));
    gf_PrepareRoomActors(11, true);
    libCamp_gf_ChangeAmbience("StarMapAmbienceLoop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomGalaxy_Init () {
    gt_PrepareRoomGalaxy = TriggerCreate("gt_PrepareRoomGalaxy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room MarSara
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomMarSara_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(6, true);
    FogSetEnabled(false);
    GameSetLighting("StoryModeMarSaraBar", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(6));
    gf_PrepareRoomActors(6, true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(2), "Cover", true);
    gf_TurnAnimationPropertiesOnOffInstantly(gf_ActorUnit(3), "Cover", true);
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(3), libNtve_gf_TextureSelectByID("Reflection_MarSaraBar"));
    gf_PreparePinboard(1);
    libCamp_gf_ChangeAmbience("Ambience_MarSaraBarV1");
    SoundSetReverb("Reverb_MarSaraBar", 0.0, true, false);
    gf_TurnMarSaraBarBackgroundSoundOnOff(true);
    gf_MuteJukebox(false, gv_marSaraJukeboxID);
    TriggerExecute(gt_TVNewsBarAsyncPreload, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomMarSara_Init () {
    gt_PrepareRoomMarSara = TriggerCreate("gt_PrepareRoomMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Room Void
//--------------------------------------------------------------------------------------------------
bool gt_PrepareRoomVoid_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreloadRoomIfCondition(15, true);
    FogSetEnabled(false);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    gf_ChangeVisibleUnits(gf_RoomUnits(15));
    gf_PrepareRoomActors(15, true);
    libCamp_gf_ChangeAmbience(null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrepareRoomVoid_Init () {
    gt_PrepareRoomVoid = TriggerCreate("gt_PrepareRoomVoid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in Room Door
//--------------------------------------------------------------------------------------------------
bool gt_WalkinRoomDoor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinRoomDoor_Init () {
    gt_WalkinRoomDoor = TriggerCreate("gt_WalkinRoomDoor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Walk in MarSara
//--------------------------------------------------------------------------------------------------
bool gt_WalkinMarSara_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetActorToLocation(2, PointFromId(89));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WalkinMarSara_Init () {
    gt_WalkinMarSara = TriggerCreate("gt_WalkinMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter MarSara
//--------------------------------------------------------------------------------------------------
bool gt_EnterMarSara_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnterCantinaStartJukebox2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMarSara_Init () {
    gt_EnterMarSara = TriggerCreate("gt_EnterMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Mar Sara Start Jukebox
//--------------------------------------------------------------------------------------------------
bool gt_EnterCantinaStartJukebox2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_JukeboxIsShutdown(gv_marSaraJukeboxID) == true)) {
        gv_jukeboxes[gv_marSaraJukeboxID].lv_playback.lv_trackCurrent = 0;
        gf_JukeboxNextTrack(gv_marSaraJukeboxID, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterCantinaStartJukebox2_Init () {
    gt_EnterCantinaStartJukebox2 = TriggerCreate("gt_EnterCantinaStartJukebox2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Room States Default Callback
//--------------------------------------------------------------------------------------------------
bool gt_RoomStatesDefaultCallback_Func (bool testConds, bool runActions) {
    int auto8B3EC383_as;
    int auto8B3EC383_ae;
    int auto8B3EC383_ai;

    // Variable Declarations
    int lv_length;
    int lv_index;
    string lv_states;

    // Variable Initialization
    lv_length = 0;
    lv_index = 0;
    lv_states = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_length = (1 * gv_c_ROOM_LAST);
    auto8B3EC383_as = 1;
    auto8B3EC383_ae = lv_length;
    auto8B3EC383_ai = 1;
    lv_index = auto8B3EC383_as;
    if (auto8B3EC383_ai > 0 || (auto8B3EC383_ai == 0 && auto8B3EC383_as < auto8B3EC383_ae)) {
        while (lv_index <= auto8B3EC383_ae) {
            lv_states = (lv_states + "0");
            lv_index = lv_index + auto8B3EC383_ai;
        }
    }
    else if (auto8B3EC383_ai < 0 || (auto8B3EC383_ai == 0 && auto8B3EC383_ae < auto8B3EC383_as)) {
        while (lv_index >= auto8B3EC383_ae) {
            lv_states = (lv_states + "0");
            lv_index = lv_index + auto8B3EC383_ai;
        }
    }
    libCamp_gf_SetStoryModeRoomStates(lv_states);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoomStatesDefaultCallback_Init () {
    gt_RoomStatesDefaultCallback = TriggerCreate("gt_RoomStatesDefaultCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Move Arrive
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeMoveArrive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorIDByActionTrigger(TriggerGetCurrent());
    if ((lv_bGActorID <= 0)) {
        return true;
    }
    else {
    }
    gf_BGActorDoNext(lv_bGActorID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeMoveArrive_Init () {
    gt_BGActorNodeMoveArrive = TriggerCreate("gt_BGActorNodeMoveArrive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Stay Expires
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeStayExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bGActorID;

    // Variable Initialization
    lv_bGActorID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gf_GetBGActorIDByActionTrigger(TriggerGetCurrent());
    if ((lv_bGActorID <= 0)) {
        return true;
    }
    else {
    }
    gf_BGActorDoNext(lv_bGActorID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeStayExpires_Init () {
    gt_BGActorNodeStayExpires = TriggerCreate("gt_BGActorNodeStayExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BG Actor Node Do
//--------------------------------------------------------------------------------------------------
bool gt_BGActorNodeDo_Func (bool testConds, bool runActions) {
    int autoF2310176_as;
    int autoF2310176_ae;
    int autoF2310176_ai;
    int auto202E6D4D_val;
    int auto465F1880_as;
    int auto465F1880_ae;
    int auto465F1880_ai;

    // Variable Declarations
    int lv_bGActorID;
    int lv_nodeID;
    int lv_currentNodeID;
    int lv_nextNodeID;
    int lv_lastNodeID;
    int lv_lastActionType;
    int lv_animID;

    // Variable Initialization
    lv_bGActorID = 0;
    lv_nodeID = 0;
    lv_currentNodeID = 0;
    lv_nextNodeID = 0;
    lv_lastNodeID = 0;
    lv_animID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bGActorID = gv_tP_BGActorID;
    lv_currentNodeID = gv_tP_BGActorCurrentNodeID;
    lv_nextNodeID = (lv_currentNodeID + 1);
    if ((lv_nextNodeID > gv_bGActors[lv_bGActorID].lv_nodeCount)) {
        lv_nextNodeID = 1;
    }
    else {
    }
    lv_lastNodeID = (lv_currentNodeID - 1);
    if ((lv_lastNodeID <= 0)) {
        lv_lastNodeID = gv_bGActors[lv_bGActorID].lv_nodeCount;
    }
    else {
    }
    lv_lastActionType = gv_bGActors[lv_bGActorID].lv_nodes[lv_lastNodeID].lv_type;
    if ((OrderGetAbilityCommand(UnitOrder(gf_GetBGActor(lv_bGActorID), 0)) != AbilityCommand("move", 1))) {
        Wait(0.125, c_timeGame);
    }
    else {
    }
    autoF2310176_as = 1;
    autoF2310176_ae = gv_bGActors[lv_bGActorID].lv_nodeCount;
    autoF2310176_ai = 1;
    lv_nodeID = autoF2310176_as;
    if (autoF2310176_ai > 0 || (autoF2310176_ai == 0 && autoF2310176_as < autoF2310176_ae)) {
        while (lv_nodeID <= autoF2310176_ae) {
            if ((lv_nodeID == lv_currentNodeID)) {
                TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, true);
            }
            else {
                TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, false);
            }
            lv_nodeID = lv_nodeID + autoF2310176_ai;
        }
    }
    else if (autoF2310176_ai < 0 || (autoF2310176_ai == 0 && autoF2310176_ae < autoF2310176_as)) {
        while (lv_nodeID >= autoF2310176_ae) {
            if ((lv_nodeID == lv_currentNodeID)) {
                TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, true);
            }
            else {
                TriggerEnable(gv_bGActors[lv_bGActorID].lv_nodes[lv_nodeID].lv_actionTrigger, false);
            }
            lv_nodeID = lv_nodeID + autoF2310176_ai;
        }
    }
    auto202E6D4D_val = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_type;
    if (auto202E6D4D_val == 1) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_nextNodeID].lv_type == 1)) {
            UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
        }
        else {
            if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
                gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gf_GetBGActor(lv_bGActorID), OrderTargetingPoint(AbilityCommand("move", 0), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), c_orderQueueReplace);
            }
        }
    }
    else if (auto202E6D4D_val == 0) {
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            gf_IssueOrderToUnitToMoveToTargetPointWithFacingDirection(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, c_orderQueueAddToEnd);
        }
        else {
        }
        TimerStart(gv_bGActors[lv_bGActorID].lv_timer, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_stayDuration, false, c_timeReal);
        auto465F1880_as = 1;
        auto465F1880_ae = gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_animCount;
        auto465F1880_ai = 1;
        lv_animID = auto465F1880_as;
        if (auto465F1880_ai > 0 || (auto465F1880_ai == 0 && auto465F1880_as < auto465F1880_ae)) {
            while (lv_animID <= auto465F1880_ae) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_GetBGActor(lv_bGActorID)), c_animNameDefault, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_anim[lv_animID], 0, c_animTimeDefault);
                Wait(gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_animDuration[lv_animID], c_timeReal);
                lv_animID = lv_animID + auto465F1880_ai;
            }
        }
        else if (auto465F1880_ai < 0 || (auto465F1880_ai == 0 && auto465F1880_ae < auto465F1880_as)) {
            while (lv_animID >= auto465F1880_ae) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_GetBGActor(lv_bGActorID)), c_animNameDefault, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_anim[lv_animID], 0, c_animTimeDefault);
                Wait(gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_animDuration[lv_animID], c_timeReal);
                lv_animID = lv_animID + auto465F1880_ai;
            }
        }
    }
    else if (auto202E6D4D_val == 2) {
        gf_RemoveVisibleUnit(false, gf_GetBGActor(lv_bGActorID));
        TimerStart(gv_bGActors[lv_bGActorID].lv_timer, gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_stayDuration, false, c_timeReal);
    }
    else if (auto202E6D4D_val == 3) {
        UnitSetPosition(gf_GetBGActor(lv_bGActorID), gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target, false);
        if ((gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_turnOrNot == true)) {
            UnitSetFacing(gf_GetBGActor(lv_bGActorID), PointGetFacing(gv_bGActors[lv_bGActorID].lv_nodes[lv_currentNodeID].lv_target), 0.0);
        }
        else {
        }
        gf_RemoveVisibleUnit(true, gf_GetBGActor(lv_bGActorID));
        gf_BGActorDoNext(lv_bGActorID);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BGActorNodeDo_Init () {
    gt_BGActorNodeDo = TriggerCreate("gt_BGActorNodeDo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Clicked
//--------------------------------------------------------------------------------------------------
bool gt_HotspotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actor;
    string lv_convoState;

    // Variable Initialization
    lv_actor = 0;
    lv_convoState = null;

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHighlightable) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hotspotClicked = EventUnit();
    if ((gf_HotspotClicked() == gf_ActorUnit(1))) {
        gv_hotspotClicked = gv_marSaraBriefcase;
    }
    gf_StopFlashingUnit(gf_HotspotClicked());
    lv_convoState = gf_HotspotConvoState(gv_hotspotClicked);
    if ((lv_convoState != null)) {
        ConversationDataStateSetValue(lv_convoState, 1);
    }
    else {
    }
    if ((gf_HotspotClicked() == gv_marSaraBadge)) {
        TriggerExecute(gt_MarSaraBadgeClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraBriefcase)) {
        TriggerExecute(gt_MarSaraBriefcaseClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraHydra)) {
        TriggerExecute(gt_MarSaraHydraClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraJukebox)) {
        TriggerExecute(gt_MarSaraJukeboxClicked, true, false);
    }
    else if ((gf_HotspotClicked() == gv_marSaraTV)) {
        TriggerExecute(gt_MarSaraTVClicked, true, false);
    }
    else if ((true == true)) {
        TriggerExecute(gt_ActorClicked, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotClicked_Init () {
    gt_HotspotClicked = TriggerCreate("gt_HotspotClicked_Func");
    TriggerAddEventUnitClick(gt_HotspotClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_HotspotHighlighted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotHighlighted(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotHighlighted_Init () {
    gt_HotspotHighlighted = TriggerCreate("gt_HotspotHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_HotspotHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hotspot Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_HotspotUnhighlighted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotHighlighted(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HotspotUnhighlighted_Init () {
    gt_HotspotUnhighlighted = TriggerCreate("gt_HotspotUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_HotspotUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedPreCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedPreCallback_Init () {
    gt_MarSaraBadgeClickedPreCallback = TriggerCreate("gt_MarSaraBadgeClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraBadgeClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedPostCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != 0) && (gv_convoCameraCurrent != 2)) {
        TriggerExecute(gt_MarSaraBadgeClickedCamera, true, false);
    }
    else {
    }
    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedPostCallback_Init () {
    gt_MarSaraBadgeClickedPostCallback = TriggerCreate("gt_MarSaraBadgeClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraBadgeClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClickedCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(6), "Zoom_07", "Fly 07", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClickedCamera_Init () {
    gt_MarSaraBadgeClickedCamera = TriggerCreate("gt_MarSaraBadgeClickedCamera_Func");
    TriggerEnable(gt_MarSaraBadgeClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBadge Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBadgeClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(1);
    gf_SetWorldMode(2);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(6), "Zoom_07", "Fly 07", 0.0);
    Wait(1.0, c_timeReal);
    gf_Convo("MarSaraFidgetsBadge", 6, 2, PointFromId(89), 3, gv_marSaraTychusCameras, PointFromId(91), 0, null, null, gt_MarSaraBadgeClickedPreCallback, gt_MarSaraBadgeClickedPostCallback, true, false, gt_MarSaraBadgeClickedCamera, null);
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(6, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(0);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBadgeClicked_Init () {
    gt_MarSaraBadgeClicked = TriggerCreate("gt_MarSaraBadgeClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedPreCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedPreCallback_Init () {
    gt_MarSaraHydraClickedPreCallback = TriggerCreate("gt_MarSaraHydraClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraHydraClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedPostCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != 0) && (gv_convoCameraCurrent != 2)) {
        TriggerExecute(gt_MarSaraHydraClickedCamera, true, false);
    }
    else {
    }
    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedPostCallback_Init () {
    gt_MarSaraHydraClickedPostCallback = TriggerCreate("gt_MarSaraHydraClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraHydraClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClickedCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(6), "Zoom_05", "Fly 05", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClickedCamera_Init () {
    gt_MarSaraHydraClickedCamera = TriggerCreate("gt_MarSaraHydraClickedCamera_Func");
    TriggerEnable(gt_MarSaraHydraClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraHydra Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraHydraClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_StopAllTransmissionConversation();
    gf_SetAllSoundChannelVolumesStoryMode(1);
    gf_SetWorldMode(2);
    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gf_RoomUnit(6), "Zoom_05", "Fly 05", 0.0);
    Wait(1.333, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gf_Convo("MarSaraFidgetsHydrahead", 6, 2, PointFromId(89), 3, gv_marSaraTychusCameras, PointFromId(91), 0, null, null, gt_MarSaraHydraClickedPreCallback, gt_MarSaraHydraClickedPostCallback, true, false, gt_MarSaraHydraClickedCamera, null);
    Wait(1.0, c_timeReal);
    gf_StopAllTransmissionConversation();
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM);
    gf_ViewRoomCamera(6, PlayerGroupAll(), 0.0);
    gf_SetWorldMode(0);
    gf_SetAllSoundChannelVolumesStoryMode(2);
    CinematicFade(true, 0.6, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_HideStoryUI(true, true);
    gf_TurnClickablesOnOff(gv_clickables, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraHydraClicked_Init () {
    gt_MarSaraHydraClicked = TriggerCreate("gt_MarSaraHydraClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Init
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxInit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libCamp_gf_LastMap() == 1) && (libCamp_gf_LastMapConditionCheck(0) == true) && (libCamp_gf_LastMapConditionCheck(1) == false)) {
        gf_CreateJukebox(gv_marSaraJukebox, false);
    }
    else {
        gf_CreateJukebox(gv_marSaraJukebox, true);
    }
    gv_marSaraJukeboxID = gf_LastCreatedJukeboxID();
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music00", -1), StringExternal("Param/Value/4F33F3FF"), StringExternal("Param/Value/6FDE3498"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music01", -1), StringExternal("Param/Value/88CDB372"), StringExternal("Param/Value/AC01C1E2"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music02", -1), StringExternal("Param/Value/7BA8DB12"), StringExternal("Param/Value/F0A894E7"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music03", -1), StringExternal("Param/Value/31070019"), StringExternal("Param/Value/0882F13E"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music04", -1), StringExternal("Param/Value/A426A857"), StringExternal("Param/Value/0E63A335"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music05", -1), StringExternal("Param/Value/2D76F827"), StringExternal("Param/Value/3D59D2B8"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music06", -1), StringExternal("Param/Value/ED6BAD2C"), StringExternal("Param/Value/0F550CE9"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music07", -1), StringExternal("Param/Value/92595DF6"), StringExternal("Param/Value/40E87BD9"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music08", -1), StringExternal("Param/Value/F89FE48B"), StringExternal("Param/Value/A5130B82"));
    gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("Jukebox_Music09", -1), StringExternal("Param/Value/7E4838FF"), StringExternal("Param/Value/C605B289"));
    if ((libCamp_gf_CampaignCompleted() == true)) {
        gf_AddTrackToJukebox(gv_marSaraJukeboxID, SoundLink("EasterEggMusic_TerranUpTheNight", -1), StringExternal("Param/Value/FCD75C25"), StringExternal("Param/Value/8D9467BC"));
    }
    else {
    }
    gf_SetJukeboxFidget(gv_marSaraJukeboxID, "MarSaraFidgetsJukebox", "MarSaraFidgetsJukeboxoff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxInit_Init () {
    gt_MarSaraJukeboxInit = TriggerCreate("gt_MarSaraJukeboxInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedPreCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MarSaraTychusClickedPreCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedPreCallback_Init () {
    gt_MarSaraJukeboxClickedPreCallback = TriggerCreate("gt_MarSaraJukeboxClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedPostCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoCameraCurrent != 0) && (gv_convoCameraCurrent != 2)) {
        TriggerExecute(gt_MarSaraJukeboxClickedCamera, true, false);
    }
    else {
    }
    TriggerExecute(gt_MarSaraTychusClickedPostCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedPostCallback_Init () {
    gt_MarSaraJukeboxClickedPostCallback = TriggerCreate("gt_MarSaraJukeboxClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked Camera
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClickedCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HotspotZoom(gf_RoomUnit(6), "Zoom_06", "Fly 06", 0.0);
    libNtve_gf_SetAnimationCompletion(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClickedCamera_Init () {
    gt_MarSaraJukeboxClickedCamera = TriggerCreate("gt_MarSaraJukeboxClickedCamera_Func");
    TriggerEnable(gt_MarSaraJukeboxClickedCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraJukebox Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraJukeboxClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_jukeboxID;

    // Variable Initialization
    lv_jukeboxID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jukeboxID = gf_GetJukeboxID(gf_HotspotClicked());
    if ((lv_jukeboxID < 0)) {
        return true;
    }
    else {
    }
    gf_JukeboxClicked(gf_HotspotClicked());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraJukeboxClicked_Init () {
    gt_MarSaraJukeboxClicked = TriggerCreate("gt_MarSaraJukeboxClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnClickablesOnOff(gv_clickables, false);
    libCamp_gf_HideStoryUI(false, true);
    gf_SetAllSoundChannelVolumesStoryMode(0);
    gf_StopAllTransmissionConversation();
    gf_SetWorldMode(3);
    gf_SetIdleState(0);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_HotspotZoom(gv_marSaraRoom, "Zoom_01", "Fly 01", 0.0);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gf_RoomUnit(6)), gv_aNIMID_ZOOM, 0.75);
    Wait(0.3, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(0.1, c_timeGame);
    PlanetPanelSetBackgroundImage(PlayerGroupAll(), "Assets\\Textures\\ui_marsarabriefcase_background.dds");
    gf_PlanetPanelDisplay(20, gt_MarSaraBriefcaseLeave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseClicked_Init () {
    gt_MarSaraBriefcaseClicked = TriggerCreate("gt_MarSaraBriefcaseClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Leave
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_MissionStatusCheck(1, 2) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/2D6BB27A"), false);
        gf_HotspotLeave(6, gt_PrepareRoomMarSara, 0.0, 0.6);
        gf_SetAllSoundChannelVolumesStoryMode(2);
        gf_TurnMarSaraBarBackgroundSoundOnOff(true);
        gf_SetWorldMode(0);
        gf_SetIdleState(1);
        libCamp_gf_HideStoryUI(true, true);
    }
    else {
        if ((gv_marSaraBriefcaseLeaveYesNoOn == false)) {
            gv_marSaraBriefcaseLeaveYesNoOn = true;
            TriggerEnable(gt_MarSaraBriefcaseLeaveUIYesNo, true);
            UIShowCustomDialog(PlayerGroupAll(), 1, StringExternal("Param/Value/0A7FFDFF"), StringExternal("Param/Value/68E83AA6"), true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseLeave_Init () {
    gt_MarSaraBriefcaseLeave = TriggerCreate("gt_MarSaraBriefcaseLeave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Leave UI Yes/No
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseLeaveUIYesNo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventCustomDialogResult() == 1)) {
        GameSetNextMap("");
        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        gv_marSaraBriefcaseLeaveYesNoOn = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseLeaveUIYesNo_Init () {
    gt_MarSaraBriefcaseLeaveUIYesNo = TriggerCreate("gt_MarSaraBriefcaseLeaveUIYesNo_Func");
    TriggerEnable(gt_MarSaraBriefcaseLeaveUIYesNo, false);
    TriggerAddEventCustomDialogDismissed(gt_MarSaraBriefcaseLeaveUIYesNo, c_playerAny, 0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraBriefcase))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(1), "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHighlighted_Init () {
    gt_MarSaraBriefcaseHighlighted = TriggerCreate("gt_MarSaraBriefcaseHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Hologram Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHologramHighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gf_ActorUnit(1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(1), "AnimBracketStart Highlight Highlight,Start Highlight Highlight,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHologramHighlighted_Init () {
    gt_MarSaraBriefcaseHologramHighlighted = TriggerCreate("gt_MarSaraBriefcaseHologramHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHologramHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseUnhighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraBriefcase))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStop Highlight");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(1), "AnimBracketStop Highlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseUnhighlighted_Init () {
    gt_MarSaraBriefcaseUnhighlighted = TriggerCreate("gt_MarSaraBriefcaseUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraBriefcase Hologram Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraBriefcaseHologramUnhighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gf_ActorUnit(1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_marSaraBriefcase, "AnimBracketStop Highlight");
    libNtve_gf_SendActorMessageToUnit(gf_ActorUnit(1), "AnimBracketStop Highlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraBriefcaseHologramUnhighlighted_Init () {
    gt_MarSaraBriefcaseHologramUnhighlighted = TriggerCreate("gt_MarSaraBriefcaseHologramUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraBriefcaseHologramUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gf_CurrentTVNews(), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVClicked_Init () {
    gt_MarSaraTVClicked = TriggerCreate("gt_MarSaraTVClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Highlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVHighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraTV))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVHighlighted_Init () {
    gt_MarSaraTVHighlighted = TriggerCreate("gt_MarSaraTVHighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraTVHighlighted, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTV Unhighlighted
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTVUnhighlighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_marSaraTV))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTVUnhighlighted_Init () {
    gt_MarSaraTVUnhighlighted = TriggerCreate("gt_MarSaraTVUnhighlighted_Func");
    TriggerAddEventUnitHighlight(gt_MarSaraTVUnhighlighted, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNewsBarAsyncPreload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsBarAsyncPreload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_LastSuccessfulMission() != 0) && (libCamp_gf_LastSuccessfulMission() != 1) && (libCamp_gf_LastSuccessfulMission() != 2)) {
        return true;
    }
    else {
    }
    gf_TVNewsPreload(libCamp_gf_LastSuccessfulMission());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsBarAsyncPreload_Init () {
    gt_TVNewsBarAsyncPreload = TriggerCreate("gt_TVNewsBarAsyncPreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Planet Selected
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelPlanetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_mission;

    // Variable Initialization
    lv_index = 0;
    lv_mission = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlanetGetSelected(1) == c_invalidPlanetId)) {
        return true;
    }
    else {
    }
    gf_StopAllTransmissionConversation();
    lv_index = gf_PlanetPanelPlanetIndexFromPlanet(PlanetGetSelected(1));
    gv_planetPanel_CurrentSelection = gv_planetPanel_Planets[lv_index].lv_planetID;
    lv_mission = libCamp_gf_PlanetMission(gv_planetPanel_CurrentSelection);
    if ((lv_mission == 4)) {
        PortraitSetModel(PortraitGetPlanetPanel(), "HansonDistressPortrait", true);
    }
    else {
        PortraitSetModel(PortraitGetPlanetPanel(), libCamp_gf_ContactPortraitModel(libCamp_gf_MissionContact(libCamp_gf_PlanetMission(gv_planetPanel_CurrentSelection))), true);
    }
    if ((gf_PlanetPanelPlanetPitched(gf_PlanetPanelPlanetFromPlanetID(gv_planetPanel_CurrentSelection)) == true)) {
        PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePlay);
        return true;
    }
    else {
    }
    PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStateBlinking);
    TriggerExecute(gt_PlanetPanelPlay, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelPlanetSelected_Init () {
    gt_PlanetPanelPlanetSelected = TriggerCreate("gt_PlanetPanelPlanetSelected_Func");
    TriggerAddEventPlanetMissionSelected(gt_PlanetPanelPlanetSelected, c_playerAny, c_invalidPlanetId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Launch
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_planet;
    int lv_planetID;
    int lv_missionID;

    // Variable Initialization
    lv_planetID = 0;
    lv_missionID = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_planetID = gf_PlanetPanelPlanetIDFromPlanet(PlanetGetSelected(1));
    if ((lv_planetID == 0)) {
        return true;
    }
    else {
    }
    lv_missionID = libCamp_gf_PlanetMission(lv_planetID);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
    gf_StopAllTransmissionConversation();
    libCamp_gf_LaunchMission(lv_missionID, false, EventPlanetPanelDifficultySelected());
    GameSetLighting("Starmap", 0.0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelLaunch_Init () {
    gt_PlanetPanelLaunch = TriggerCreate("gt_PlanetPanelLaunch_Func");
    TriggerAddEventPlanetMissionLaunched(gt_PlanetPanelLaunch, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Play
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelPlay_Func (bool testConds, bool runActions) {
    int autoB8B1E60E_i;

    // Variable Declarations
    int lv_index;
    int lv_planet;
    int lv_planetID;
    int lv_missionID;
    int lv_indexMission;

    // Variable Initialization
    lv_index = 0;
    lv_planetID = 0;
    lv_missionID = 0;
    lv_indexMission = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_PlanetPanelPlanetIndexFromPlanet(PlanetGetSelected(1));
    lv_planetID = gf_PlanetPanelPlanetIDFromPlanet(PlanetGetSelected(1));
    if ((lv_planetID == 0)) {
        return true;
    }
    else {
    }
    if ((PlanetPanelGetContactButtonState(1) == c_planetPanelContactButtonStatePause)) {
        PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePlay);
        gf_StopAllTransmissionConversation();
        return true;
    }
    else {
    }
    lv_missionID = libCamp_gf_PlanetMission(lv_planetID);
    gv_planetPanel_ReplayCount=gv_planetPanel_ReplayCount + 1;
    gf_StopAllTransmissionConversation();
    autoB8B1E60E_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoB8B1E60E_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoB8B1E60E_i];
        ConversationDataStateSetValue(libCamp_gf_MissionPitches(lv_indexMission), 0);
        autoB8B1E60E_i = autoB8B1E60E_i + 1;
    }
    ConversationDataStateSetValue(libCamp_gf_MissionPitches(lv_missionID), 1);
    ConversationDataRegisterPortrait(gf_ConvoCharacter(1), PortraitGetPlanetPanel());
    PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePause);
    gf_PlanetPanelGrayoutPortrait(false);
    gv_planetPanel_PlanetPitched[(lv_planetID)] = true;
    ConversationDataRun("Missionpitches", PlayerGroupAll(), c_conversationSkipNone, true);
    gv_planetPanel_ReplayCount=gv_planetPanel_ReplayCount - 1;
    if ((gv_planetPanel_ReplayCount > 0)) {
        return true;
    }
    else {
    }
    if ((lv_planetID == gf_PlanetPanelPlanetIDFromPlanet(PlanetGetSelected(1)))) {
        PlanetPanelSetContactButtonState(PlayerGroupAll(), c_planetPanelContactButtonStatePlay);
        gf_PlanetPanelGrayoutPortrait(true);
    }
    else {
    }
    ConversationDataRegisterPortrait(gf_ConvoCharacter(1), c_invalidPortraitId);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelPlay_Init () {
    gt_PlanetPanelPlay = TriggerCreate("gt_PlanetPanelPlay_Func");
    TriggerAddEventPlanetPanelReplayPressed(gt_PlanetPanelPlay, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Leave
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCamp_gf_MissionStatusCheck(1, 2) == true)) {
        gf_StopAllTransmissionConversation();
        gf_PlanetPanelClose();
    }
    else {
    }
    if ((gv_planetPanel_LeaveCallback != null)) {
        TriggerExecute(gv_planetPanel_LeaveCallback, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelLeave_Init () {
    gt_PlanetPanelLeave = TriggerCreate("gt_PlanetPanelLeave_Func");
    TriggerAddEventPlanetPanelCanceled(gt_PlanetPanelLeave, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Ready
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_planet;
    int lv_planetID;
    int lv_missionID;
    int lv_indexMission;

    // Variable Initialization
    lv_index = 0;
    lv_planetID = 0;
    lv_missionID = 0;
    lv_indexMission = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_PlanetPanelPlanetIndexFromPlanet(PlanetGetSelected(1));
    lv_planetID = gf_PlanetPanelPlanetIDFromPlanet(PlanetGetSelected(1));
    if ((lv_planetID == 0)) {
        return true;
    }
    else {
    }
    lv_missionID = libCamp_gf_PlanetMission(lv_planetID);
    if (((lv_missionID == 1) || (lv_missionID == 2) || (lv_missionID == 3))) {
        if ((gf_PlanetPanelPlanetPitched(PlanetGetSelected(1)) == false)) {
            TriggerExecute(gt_PlanetPanelPlay, true, false);
        }
        else {
        }
        return true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelReady_Init () {
    gt_PlanetPanelReady = TriggerCreate("gt_PlanetPanelReady_Func");
    TriggerAddEventPlanetPanelBirthComplete(gt_PlanetPanelReady, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Horner Pitch Highlight Planet
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelHornerPitchHighlightPlanet_Func (bool testConds, bool runActions) {
    int autoB6215CF2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB6215CF2_val = ConversationDataStateGetValue("WritingCustomStates|PlanetPanel_PlanetHighlights");
    if (autoB6215CF2_val == 0) {
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(4)), c_planetStateActive);
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(17)), c_planetStateActive);
    }
    else if (autoB6215CF2_val == 1) {
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(4)), c_planetStateEmphasized);
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(17)), c_planetStateActive);
    }
    else if (autoB6215CF2_val == 2) {
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(4)), c_planetStateActive);
        PlanetSetState(gf_PlanetPanelPlanetFromPlanetID(libCamp_gf_MissionPlanet(17)), c_planetStateEmphasized);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelHornerPitchHighlightPlanet_Init () {
    gt_PlanetPanelHornerPitchHighlightPlanet = TriggerCreate("gt_PlanetPanelHornerPitchHighlightPlanet_Func");
    TriggerEnable(gt_PlanetPanelHornerPitchHighlightPlanet, false);
    TriggerAddEventConversationStateChanged(gt_PlanetPanelHornerPitchHighlightPlanet, "WritingCustomStates|PlanetPanel_PlanetHighlights");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Birth Complete
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelBirthComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelBirthComplete_Init () {
    gt_PlanetPanelBirthComplete = TriggerCreate("gt_PlanetPanelBirthComplete_Func");
    TriggerAddEventPlanetPanelBirthComplete(gt_PlanetPanelBirthComplete, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Panel - Custom Dialog Dismissed
//--------------------------------------------------------------------------------------------------
bool gt_PlanetPanelCustomDialogDismissed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_planetPanel_CharInvasionQueryDone = true;
    gv_planetPanel_CharInvasionQueryResult = EventCustomDialogResult();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetPanelCustomDialogDismissed_Init () {
    gt_PlanetPanelCustomDialogDismissed = TriggerCreate("gt_PlanetPanelCustomDialogDismissed_Func");
    TriggerEnable(gt_PlanetPanelCustomDialogDismissed, false);
    TriggerAddEventCustomDialogDismissed(gt_PlanetPanelCustomDialogDismissed, c_playerAny, 0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Master
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerMaster_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 1, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerMaster_Init () {
    gt_ConvoCameraTriggerMaster = TriggerCreate("gt_ConvoCameraTriggerMaster_Func");
    TriggerEnable(gt_ConvoCameraTriggerMaster, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Custom
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCustom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 2, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCustom_Init () {
    gt_ConvoCameraTriggerCustom = TriggerCreate("gt_ConvoCameraTriggerCustom_Func");
    TriggerEnable(gt_ConvoCameraTriggerCustom, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Closeup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 3, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Closeup_Init () {
    gt_ConvoCameraTriggerCharacter1Closeup = TriggerCreate("gt_ConvoCameraTriggerCharacter1Closeup_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Closeup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Medium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 4, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Medium_Init () {
    gt_ConvoCameraTriggerCharacter1Medium = TriggerCreate("gt_ConvoCameraTriggerCharacter1Medium_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Medium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Shoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 5, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Shoulder_Init () {
    gt_ConvoCameraTriggerCharacter1Shoulder = TriggerCreate("gt_ConvoCameraTriggerCharacter1Shoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Shoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pushin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 6, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pushin_Init () {
    gt_ConvoCameraTriggerCharacter1Pushin = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pushout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 7, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pushout_Init () {
    gt_ConvoCameraTriggerCharacter1Pushout = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 1 Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter1Pan_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 8, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter1Pan_Init () {
    gt_ConvoCameraTriggerCharacter1Pan = TriggerCreate("gt_ConvoCameraTriggerCharacter1Pan_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter1Pan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Closeup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 9, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Closeup_Init () {
    gt_ConvoCameraTriggerCharacter2Closeup = TriggerCreate("gt_ConvoCameraTriggerCharacter2Closeup_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Closeup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Medium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 10, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Medium_Init () {
    gt_ConvoCameraTriggerCharacter2Medium = TriggerCreate("gt_ConvoCameraTriggerCharacter2Medium_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Medium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Shoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 11, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Shoulder_Init () {
    gt_ConvoCameraTriggerCharacter2Shoulder = TriggerCreate("gt_ConvoCameraTriggerCharacter2Shoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Shoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pushin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 12, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pushin_Init () {
    gt_ConvoCameraTriggerCharacter2Pushin = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pushout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 13, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pushout_Init () {
    gt_ConvoCameraTriggerCharacter2Pushout = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Character 2 Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerCharacter2Pan_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor2, 14, gv_convoCameraObjectCurrent2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerCharacter2Pan_Init () {
    gt_ConvoCameraTriggerCharacter2Pan = TriggerCreate("gt_ConvoCameraTriggerCharacter2Pan_Func");
    TriggerEnable(gt_ConvoCameraTriggerCharacter2Pan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Closeup
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorCloseup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 15, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorCloseup_Init () {
    gt_ConvoCameraTriggerRaynorCloseup = TriggerCreate("gt_ConvoCameraTriggerRaynorCloseup_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorCloseup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Medium
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorMedium_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 16, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorMedium_Init () {
    gt_ConvoCameraTriggerRaynorMedium = TriggerCreate("gt_ConvoCameraTriggerRaynorMedium_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorMedium, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Shoulder
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorShoulder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 17, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorShoulder_Init () {
    gt_ConvoCameraTriggerRaynorShoulder = TriggerCreate("gt_ConvoCameraTriggerRaynorShoulder_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorShoulder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pushin
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPushin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 18, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPushin_Init () {
    gt_ConvoCameraTriggerRaynorPushin = TriggerCreate("gt_ConvoCameraTriggerRaynorPushin_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPushin, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pushout
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPushout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 19, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPushout_Init () {
    gt_ConvoCameraTriggerRaynorPushout = TriggerCreate("gt_ConvoCameraTriggerRaynorPushout_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPushout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConvoCameraTrigger - Raynor Pan
//--------------------------------------------------------------------------------------------------
bool gt_ConvoCameraTriggerRaynorPan_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UseConversationCamera(gv_convoCameraRoom, gv_convoCameraActor1, 20, gv_convoCameraObjectCurrent1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoCameraTriggerRaynorPan_Init () {
    gt_ConvoCameraTriggerRaynorPan = TriggerCreate("gt_ConvoCameraTriggerRaynorPan_Func");
    TriggerEnable(gt_ConvoCameraTriggerRaynorPan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked Pre Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClickedPreCallback_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClickedPreCallback_Init () {
    gt_MarSaraTychusClickedPreCallback = TriggerCreate("gt_MarSaraTychusClickedPreCallback_Func");
    TriggerEnable(gt_MarSaraTychusClickedPreCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked Post Callback
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClickedPostCallback_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClickedPostCallback_Init () {
    gt_MarSaraTychusClickedPostCallback = TriggerCreate("gt_MarSaraTychusClickedPostCallback_Func");
    TriggerEnable(gt_MarSaraTychusClickedPostCallback, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MarSaraTychus Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MarSaraTychusClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Convo(gf_ActorConversation(3), 6, 2, PointFromId(89), 3, gv_marSaraTychusCameras, PointFromId(91), 0, null, null, gt_MarSaraTychusClickedPreCallback, gt_MarSaraTychusClickedPostCallback, true, true, null, null);
    gf_ActorTalked(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarSaraTychusClicked_Init () {
    gt_MarSaraTychusClicked = TriggerCreate("gt_MarSaraTychusClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Timestamp From Data Convo Skippable
//--------------------------------------------------------------------------------------------------
bool gt_DisplayTimestampFromDataConvoSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Variable Initialization
    lv_timestamp = null;
    lv_title = null;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_timestamp = ConversationDataStateText(gv_convoIDGlobal, "Description");
    lv_title = ConversationDataStateText(gv_convoIDGlobal, "Title");
    Wait(1.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, 6.0, SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayTimestampFromDataConvoSkippable_Init () {
    gt_DisplayTimestampFromDataConvoSkippable = TriggerCreate("gt_DisplayTimestampFromDataConvoSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene Skippable
//--------------------------------------------------------------------------------------------------
bool gt_SceneSkippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_sceneSkipped = true;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundWait(gv_sceneSound, 0.0, c_soundOffsetEnd);
    gv_sceneSkipped = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SceneSkippable_Init () {
    gt_SceneSkippable = TriggerCreate("gt_SceneSkippable_Func");
    TriggerEnable(gt_SceneSkippable, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene01 - Raynor Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene01RaynorIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene(1, 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene01RaynorIntro_Init () {
    gt_Scene01RaynorIntro = TriggerCreate("gt_Scene01RaynorIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene04 - Tychus Intro
//--------------------------------------------------------------------------------------------------
bool gt_Scene04TychusIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene(4, 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene04TychusIntro_Init () {
    gt_Scene04TychusIntro = TriggerCreate("gt_Scene04TychusIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scene05 - Escape from Mar Sara
//--------------------------------------------------------------------------------------------------
bool gt_Scene05EscapefromMarSara_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Scene(5, 1, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scene05EscapefromMarSara_Init () {
    gt_Scene05EscapefromMarSara = TriggerCreate("gt_Scene05EscapefromMarSara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing(4, 2, gt_BriefingTemplateSkippable, gt_BriefingTemplatePreload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplate_Init () {
    gt_BriefingTemplate = TriggerCreate("gt_BriefingTemplate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplateSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Variable Initialization
    lv__Room = 0;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = 2;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gf_BriefingPlayVideo("BriefingTTychus01_00", lv__Room, 2, false);
    gf_BriefingApplyCamera(lv__Room, 3, 6.0);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplateSkippable_Init () {
    gt_BriefingTemplateSkippable = TriggerCreate("gt_BriefingTemplateSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Template Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTemplatePreload_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTemplatePreload_Init () {
    gt_BriefingTemplatePreload = TriggerCreate("gt_BriefingTemplatePreload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Play Video Targeting Cursor Sound
//--------------------------------------------------------------------------------------------------
bool gt_BriefingPlayVideoTargetingCursorSound_Func (bool testConds, bool runActions) {
    string autoE2DD8119_val;

    // Variable Declarations
    string lv_moviePlaying;
    soundlink lv_targetCursorSound;

    // Variable Initialization
    lv_moviePlaying = null;
    lv_targetCursorSound = SoundLink("UI_BriefingUnitSelect", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_moviePlaying = gv_briefingMovieTexturePlaying;
    autoE2DD8119_val = lv_moviePlaying;
    if (autoE2DD8119_val == "BriefingTRaynor01_02") {
        Wait(1.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTRaynor03_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03a_02") {
        Wait(6.4, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(0.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03a_04") {
        Wait(1.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTHanson03b_03") {
        Wait(0.68, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03a_03") {
        Wait(2.52, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_01") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_02") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTosh03b_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus03_02") {
        Wait(2.18, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus04_03") {
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTTychus05_00") {
        Wait(1.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(3.0, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTValerian02a_00") {
        Wait(0.6, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.5, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoE2DD8119_val == "BriefingTValerian02b_03") {
        Wait(1.98, c_timeReal);
        SoundPlay(lv_targetCursorSound, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingPlayVideoTargetingCursorSound_Init () {
    gt_BriefingPlayVideoTargetingCursorSound = TriggerCreate("gt_BriefingPlayVideoTargetingCursorSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing(1, 6, gt_BriefingTRaynor01Skippable, gt_BriefingTRaynor01Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01_Init () {
    gt_BriefingTRaynor01 = TriggerCreate("gt_BriefingTRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Variable Initialization
    lv__Room = 0;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = 6;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, 4, 2, 0, 0, true, true, false, true);
    lv_portaitRight = gf_BriefingCreatePortrait("AdjutantPortrait", "CameraPortrait02", 4, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_00", lv__Room, 2, false);
    CameraApplyInfo(1, CameraInfoFromId(578), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor01BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(622), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(670), (SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00010", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingAdjutant00011", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00012", 0)) + SoundLengthSync(SoundLink("TRaynor01BriefingRaynor00014", 0))), -1, 20, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00010", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00011", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), lv_portaitLeft, SoundLink("TRaynor01BriefingRaynor00012", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_01", lv__Room, 2, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lv_portaitRight, SoundLink("TRaynor01BriefingAdjutant00013", 0), 0.0, c_transmissionDurationAdd, true);
    gf_BriefingPlayVideo("BriefingTRaynor01_02", lv__Room, 2, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), lv_portaitLeft, SoundLink("TRaynor01BriefingRaynor00014", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(1057), 0.0, -1, 10, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(2)), c_animNameDefault, "Talk 04", c_animFlagFullMatch, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, ""), c_invalidPortraitId, SoundLink("TRaynor01BriefingRaynor00015", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(2)), c_animNameDefault);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01Skippable_Init () {
    gt_BriefingTRaynor01Skippable = TriggerCreate("gt_BriefingTRaynor01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01PreloadRough_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(6, true);
    gf_BriefingPreloadScreens(6);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(2));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_00.ogv", false);
    ConversationDataPreloadLines("TRaynor01Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01PreloadRough_Init () {
    gt_BriefingTRaynor01PreloadRough = TriggerCreate("gt_BriefingTRaynor01PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor01Preload_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTRaynor01PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor01_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor01Preload_Init () {
    gt_BriefingTRaynor01Preload = TriggerCreate("gt_BriefingTRaynor01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing(2, 6, gt_BriefingTRaynor02Skippable, gt_BriefingTRaynor02Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02_Init () {
    gt_BriefingTRaynor02 = TriggerCreate("gt_BriefingTRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Variable Initialization
    lv__Room = 0;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = 6;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, 3, 2, 3, 0, true, true, false, false);
    gf_BriefingPlayVideo("BriefingTRaynor02_00", lv__Room, 2, false);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    CameraApplyInfo(1, CameraInfoFromId(706), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(671), (SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00001", 0)) + 10.0), -1, 20, true);
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(672), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "SlowStandingSubtle", gf_ActorUnit(2), "Head");
    Wait(1.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(3), "VerySlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(673), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(684), (SoundLengthSync(SoundLink("TRaynor02BriefingTychus00003", 0)) + SoundLengthSync(SoundLink("TRaynor02BriefingRaynor00004", 0)) + 1.0), -1, 20, true);
    gf_BriefingPlayVideo("BriefingTRaynor02_01", lv__Room, 2, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00003", 0), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(702), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingTychus00005", 0), 0.0, c_transmissionDurationAdd, false);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "SlowStandingSubtle", gf_ActorUnit(2), "Head");
    Wait(2.0, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(3), "VerySlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(689), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor02_02", lv__Room, 2, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor02BriefingRaynor00006", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02Skippable_Init () {
    gt_BriefingTRaynor02Skippable = TriggerCreate("gt_BriefingTRaynor02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02PreloadRough_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(6, true);
    gf_BriefingPreloadScreens(6);
    gf_PreloadUnitStoryMap(gf_ActorUnit(2));
    gf_PreloadUnitStoryMap(gf_ActorUnit(3));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_00.ogv", false);
    ConversationDataPreloadLines("TRaynor02Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02PreloadRough_Init () {
    gt_BriefingTRaynor02PreloadRough = TriggerCreate("gt_BriefingTRaynor02PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor02Preload_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BriefingTRaynor02PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor02_02.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor02Preload_Init () {
    gt_BriefingTRaynor02Preload = TriggerCreate("gt_BriefingTRaynor02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Briefing(3, 6, gt_BriefingTRaynor03Skippable, gt_BriefingTRaynor03Preload);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03_Init () {
    gt_BriefingTRaynor03 = TriggerCreate("gt_BriefingTRaynor03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03Skippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__Room;
    int lv_portaitLeft;
    int lv_portaitMiddle;
    int lv_portaitRight;

    // Variable Initialization
    lv__Room = 0;
    lv_portaitLeft = c_invalidPortraitId;
    lv_portaitMiddle = c_invalidPortraitId;
    lv_portaitRight = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__Room = 6;
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BriefingPrepare(lv__Room, 11, 2, 3, 0, true, true, false, false);
    lv_portaitRight = gf_BriefingCreatePortrait("AdjutantPortrait", "Default", 4, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_00", lv__Room, 2, false);
    CameraApplyInfo(1, CameraInfoFromId(1033), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "InstantStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "InstantStandingSubtle", gf_ActorUnit(2), "Head");
    Wait(0.5, c_timeReal);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00001", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(2), "SlowHeadOnlySubtle", gf_ActorUnit(3), "Head");
    TransmissionWait(TransmissionLastSent(), 1.0);
    CameraApplyInfo(1, CameraInfoFromId(993), (SoundLengthSync(SoundLink("TRaynor03BriefingTychus00002", 0)) - 3.0), -1, 20, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00002", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, 4)), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gf_RemoveVisibleUnit(true, gf_BriefingScreen(lv__Room, 4));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), lv_portaitRight, SoundLink("TRaynor03BriefingAdjutant00003", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointWithDebugControl(gf_ActorUnit(2), "SlowStanding", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.3, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(3), "SlowStandingSubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    Wait(0.5, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(797), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_01", lv__Room, 2, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(1034), 0.0, -1, 10, true);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "SlowHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(2)), 0.4, (UnitGetFacing(gf_ActorUnit(2)) + 5.0)), 0.75));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00004", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_ActorUnit(2)), "Fidget", "Talk 05", c_animFlagFullMatch, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00004", 0)) / 3.0));
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "SlowStandingSubtle", gf_ActorUnit(2), "Head");
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00005", 0), 0.0, c_transmissionDurationAdd, false);
    Wait(0.5, c_timeReal);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "InstantHeadOnly", libNtve_gf_PointWithZOffset(PointWithOffsetPolar(UnitGetPosition(gf_ActorUnit(2)), 0.4, (UnitGetFacing(gf_ActorUnit(2)) + 30.0)), 0.75));
    CameraApplyInfo(1, CameraInfoFromId(802), 0.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 1.0);
    gf_MakeUnitLookAtPointAndBlinkWithDebugControl(gf_ActorUnit(2), "SlowHeadOnlySubtle", libNtve_gf_PointWithZOffset(PointFromId(676), 0.8));
    TransmissionWait(TransmissionLastSent(), 0.25);
    CameraApplyInfo(1, CameraInfoFromId(925), 0.0, -1, 10, true);
    gf_BriefingPlayVideo("BriefingTRaynor03_02", lv__Room, 2, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), lv_portaitRight, SoundLink("TRaynor03BriefingAdjutant00006", 0), 0.0, c_transmissionDurationAdd, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "VerySlowStandingSubtle", gf_BriefingScreen(lv__Room, 2), "Head");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gf_BriefingScreen(lv__Room, 4)), c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00007", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeReal);
    gf_BriefingPlayVideo("BriefingTRaynor03_03", lv__Room, 2, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00008", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00009", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeGame);
    gf_MakeUnitLookAtUnitAndBlinkWithDebugControl(gf_ActorUnit(3), "InstantHeadOnlySubtle", gf_ActorUnit(2), "Head");
    gf_BriefingPlayVideo("BriefingTRaynor03_04", lv__Room, 2, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(3), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingTychus00010", 0), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 1.5);
    libNtve_gf_SimpleLookAtStop(gf_ActorUnit(3), "SlowHeadOnlySubtle");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(1, CameraInfoFromId(936), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gf_ActorUnit(2), false, false, "Talk"), c_invalidPortraitId, SoundLink("TRaynor03BriefingRaynor00011", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(1.0, c_timeGame);
    gv_briefingCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03Skippable_Init () {
    gt_BriefingTRaynor03Skippable = TriggerCreate("gt_BriefingTRaynor03Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Preload Rough
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03PreloadRough_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_PreloadRoomIfCondition(6, true);
    gf_BriefingPreloadScreens(6);
    PreloadObject(c_gameCatalogModel, ("AdjutantPortrait"), false);
    gf_PreloadUnitStoryMap(gf_ActorUnit(2));
    gf_PreloadUnitStoryMap(gf_ActorUnit(3));
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_00.ogv", false);
    ConversationDataPreloadLines("TRaynor03Briefing");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03PreloadRough_Init () {
    gt_BriefingTRaynor03PreloadRough = TriggerCreate("gt_BriefingTRaynor03PreloadRough_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - TRaynor03 Preload
//--------------------------------------------------------------------------------------------------
bool gt_BriefingTRaynor03Preload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingTRaynor03PreloadRough, true, false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_01.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_02.ogv", false);
    PreloadMovie("Assets\\Textures\\briefing_video_traynor03_03.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingTRaynor03Preload_Init () {
    gt_BriefingTRaynor03Preload = TriggerCreate("gt_BriefingTRaynor03Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Back
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsBack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gv_tVNewsCurrentThread);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsBack_Init () {
    gt_TVNewsBack = TriggerCreate("gt_TVNewsBack_Func");
    TriggerEnable(gt_TVNewsBack, false);
    TriggerAddEventMouseClicked(gt_TVNewsBack, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara(31, gt_TVNewsRaynor00Skippable);
    gf_TVNewsWatched(31);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00_Init () {
    gt_TVNewsRaynor00 = TriggerCreate("gt_TVNewsRaynor00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00Skippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(477), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(416), 30.0, -1, 10, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor00_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 24, c_textureVideoPlayFlagSynced, 0, ""));
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00001", -1), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Arcturus00005", -1), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00002", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(481), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(427), 0.0, -1, 10, true);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionZ, 0.01, 0.009, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionY, 0.01, 0.0062, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionEye, c_cameraDirectionX, 0.01, 0.005, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 0.009, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionY, 0.02, 0.0062, 0.0, 100.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionX, 0.02, 0.005, 0.0, 100.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00003", -1), 0.0, c_transmissionDurationSub, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00008", -1), 0.0, c_transmissionDurationSub, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_marSaraTV, false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Lockwell00004", -1), 0.0, c_transmissionDurationSub, true);
    CameraApplyInfo(1, CameraInfoFromId(472), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor00Raynor00007", -1), 0.0, c_transmissionDurationSub, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00Skippable_Init () {
    gt_TVNewsRaynor00Skippable = TriggerCreate("gt_TVNewsRaynor00Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor00 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor00Preload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor01_00.ogv", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor00Preload_Init () {
    gt_TVNewsRaynor00Preload = TriggerCreate("gt_TVNewsRaynor00Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara(1, gt_TVNewsRaynor01Skippable);
    gf_TVNewsWatched(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01_Init () {
    gt_TVNewsRaynor01 = TriggerCreate("gt_TVNewsRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Skippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(gf_ActorUnit(3)), "C");
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gf_ActorUnit(3)), "Cover");
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor01_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Skippable_Init () {
    gt_TVNewsRaynor01Skippable = TriggerCreate("gt_TVNewsRaynor01Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Preload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor01_00.ogv", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor01Raynor00005", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Preload_Init () {
    gt_TVNewsRaynor01Preload = TriggerCreate("gt_TVNewsRaynor01Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Event02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Event02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(247), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(470), 15.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Event02_Init () {
    gt_TVNewsRaynor01Event02 = TriggerCreate("gt_TVNewsRaynor01Event02_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor01Event02, c_playerAny, "NewsRa1_02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor01 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor01Event05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(482), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk Cover"), c_invalidPortraitId, SoundLink("TVTRaynor01Raynor00005", -1), 0.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor01Event05_Init () {
    gt_TVNewsRaynor01Event05 = TriggerCreate("gt_TVNewsRaynor01Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor01Event05, c_playerAny, "NewsRa1_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TVNewsMarSara(2, gt_TVNewsRaynor02Skippable);
    gf_TVNewsWatched(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02_Init () {
    gt_TVNewsRaynor02 = TriggerCreate("gt_TVNewsRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Skippable
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Skippable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_static");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagLooping, 1, "Transmission"));
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayMovieTextureOnUnitActor(gv_marSaraTV, "video_newsreport_traynor02_00");
    libNtve_gf_SendActorMessageToUnit(gv_marSaraTV, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TriggerWaitForTrigger(gt_TVNewsEventEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Skippable_Init () {
    gt_TVNewsRaynor02Skippable = TriggerCreate("gt_TVNewsRaynor02Skippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Preload
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Preload_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PreloadMovie("Assets\\Textures\\video_newsreport_traynor02_00.ogv", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor02Raynor00003", false);
    libNtve_gf_PreloadSoundObject("TVTRaynor02Tychus00002", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Preload_Init () {
    gt_TVNewsRaynor02Preload = TriggerCreate("gt_TVNewsRaynor02Preload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Event03
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Event03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(247), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(470), 5.0, -1, 10, true);
    Wait(4.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Event03_Init () {
    gt_TVNewsRaynor02Event03 = TriggerCreate("gt_TVNewsRaynor02Event03_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor02Event03, c_playerAny, "NewsRa2_03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Raynor02 Event05
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsRaynor02Event05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tVNewsCurrentThread != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(1, CameraInfoFromId(482), 0.0, -1, 10, true);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(421), false, false, ""), c_invalidPortraitId, SoundLink("TVTRaynor02Tychus00002", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.2);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitFromId(424), false, false, "Talk"), c_invalidPortraitId, SoundLink("TVTRaynor02Raynor00003", -1), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(1, CameraInfoFromId(429), 0.0, -1, 10, true);
    CameraApplyInfo(1, CameraInfoFromId(468), 20.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsRaynor02Event05_Init () {
    gt_TVNewsRaynor02Event05 = TriggerCreate("gt_TVNewsRaynor02Event05_Func");
    TriggerAddEventMovieFunction(gt_TVNewsRaynor02Event05, c_playerAny, "NewsRa2_05");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Event End
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsEventEnd_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsEventEnd_Init () {
    gt_TVNewsEventEnd = TriggerCreate("gt_TVNewsEventEnd_Func");
    TriggerAddEventMovieFunction(gt_TVNewsEventEnd, c_playerAny, "NewsEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TVNews - Event End 2
//--------------------------------------------------------------------------------------------------
bool gt_TVNewsEventAdStart_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TVNewsEventAdStart_Init () {
    gt_TVNewsEventAdStart = TriggerCreate("gt_TVNewsEventAdStart_Func");
    TriggerAddEventMovieFunction(gt_TVNewsEventAdStart, c_playerAny, "AdStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TRaynor01
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTRaynor01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Objects");
    gf_AddTip("StoryTips|MissionCase");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTRaynor01_Init () {
    gt_TipAfterTRaynor01 = TriggerCreate("gt_TipAfterTRaynor01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip - After TRaynor02
//--------------------------------------------------------------------------------------------------
bool gt_TipAfterTRaynor02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AddTip("StoryTips|Credits");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipAfterTRaynor02_Init () {
    gt_TipAfterTRaynor02 = TriggerCreate("gt_TipAfterTRaynor02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_WaitForSkipTrig_Init();
    gt_BackButtonClicked_Init();
    gt_BackButtonEscape_Init();
    gt_BackButtonEscapeSkippable_Init();
    gt_TBDWindowCloseClicked_Init();
    gt_JukeboxClicked_Init();
    gt_JukeboxTrackLoop_Init();
    gt_JukeboxTrackAnimation_Init();
    gt_JukeboxTrackComments_Init();
    gt_StopSoundtrackMultiple_Init();
    gt_PinboardClicked_Init();
    gt_PinboardZoom_Init();
    gt_PinboardLeave_Init();
    gt_PinboardItemClicked_Init();
    gt_PinboardItemClickedPreCallback_Init();
    gt_PinboardItemClickedPostCallback_Init();
    gt_PinboardItemClickedCamera_Init();
    gt_PinboardItemClickedCameraChanged_Init();
    gt_PinboardItemSkippable_Init();
    gt_PinboardItemBack_Init();
    gt_DisplayNewItems_Init();
    gt_NewItemAvailable_Init();
    gt_CreateNewItem_Init();
    gt_MoveNewItem_Init();
    gt_RemoveNewItem_Init();
    gt_DebugEnabledLookAt_Init();
    gt_DebugDisabledLookAt_Init();
    gt_QueryDialogDismissed_Init();
    gt_MapInit_Init();
    gt_Init01StoryData_Init();
    gt_Init01AData_Init();
    gt_Init01BRewards_Init();
    gt_Init01CDerivedStates_Init();
    gt_Init01CDerivedStatesNews_Init();
    gt_Init01CDerivedStatesTransitionalLoad_Init();
    gt_Init02World_Init();
    gt_Init02AActors_Init();
    gt_Init02BRooms_Init();
    gt_Init02CCameras_Init();
    gt_Init02DHotspots_Init();
    gt_Init02DHotspotsPinboard_Init();
    gt_Init02EStarmap_Init();
    gt_Init02FScenes_Init();
    gt_Init02GBriefingABChoice_Init();
    gt_Init02HDebriefing_Init();
    gt_Init02ITVNews_Init();
    gt_Init02JPreloading_Init();
    gt_Init03UI_Init();
    gt_Init04Environment_Init();
    gt_Init05Sounds_Init();
    gt_Init06Intro_Init();
    gt_ReturnToMarSara_Init();
    gt_ReturnGeneric_Init();
    gt_ReturnGeneric2_Init();
    gt_StorySave_Init();
    gt_StorySaveDone_Init();
    gt_EndofTime_Init();
    gt_EnableDebug_Init();
    gt_DisableDebug_Init();
    gt_DebugAutomatedTesting_Init();
    gt_TerranUptheNight_Init();
    gt_DebugSceneCreateDialog_Init();
    gt_DebugSceneClicked_Init();
    gt_DebugSceneExit_Init();
    gt_DebugSCENE_Init();
    gt_DebugScenePerformanceTestGetFPS_Init();
    gt_RoomCheatButtonResponse_Init();
    gt_DebugROOM_Init();
    gt_DebugROOMCHEAT_Init();
    gt_DebugTESTCAMERA_Init();
    gt_DebugGAMECAMERA_Init();
    gt_DebugGLOBALVIEW_Init();
    gt_DebugUNLOCKCAMERA_Init();
    gt_RoomCameraButtonResponse_Init();
    gt_DebugROOMCAMERA_Init();
    gt_Debug_Briefing_Init();
    gt_Debug_BriefingDialogMissionButtonResponse_Init();
    gt_Debug_BriefingDialogClose_Init();
    gt_Debug_TVNews_Init();
    gt_Debug_TVNewsDialogMissionButtonResponse_Init();
    gt_Debug_TVNewsDialogClose_Init();
    gt_DebugMissionDebriefing_Init();
    gt_DebugABChoice_Init();
    gt_DebugMercIntro_Init();
    gt_DebugLabIntro_Init();
    gt_DebugArmoryIntro_Init();
    gt_BlizzconScreenWait_Init();
    gt_DebugOutputSets_Init();
    gt_DebugCINEMATICMODE_Init();
    gt_DebugSHOWALL_Init();
    gt_DebugDOOR_Init();
    gt_DebugIDLETIMES_Init();
    gt_DebugCredits_Init();
    gt_DebugDoorAnimation_Init();
    gt_DebugPauseMusic_Init();
    gt_DebugAttachmentLocation_Init();
    gt_DebugHideUnclickables_Init();
    gt_DebugStoryState_Init();
    gt_DebugClickTurnOn_Init();
    gt_DebugClick_Init();
    gt_DebugStarmap_Init();
    gt_DebugCloseStarmap_Init();
    gt_DebugMissionArchieves_Init();
    gt_DebugShowActor_Init();
    gt_DebugHideActor_Init();
    gt_DebugRoomPreloadStates_Init();
    gt_DebugSize_Init();
    gt_DebugPos_Init();
    gt_DebugBGUnitPicked_Init();
    gt_DebugToshPortrait_Init();
    gt_DebugToshPortrait2_Init();
    gt_DebugStopTransmission_Init();
    gt_DebugZeratulPlanetPanel_Init();
    gt_DebugTemp_Init();
    gt_ActorClicked_Init();
    gt_PrepareRoomGalaxy_Init();
    gt_PrepareRoomMarSara_Init();
    gt_PrepareRoomVoid_Init();
    gt_WalkinRoomDoor_Init();
    gt_WalkinMarSara_Init();
    gt_EnterMarSara_Init();
    gt_EnterCantinaStartJukebox2_Init();
    gt_RoomStatesDefaultCallback_Init();
    gt_BGActorNodeMoveArrive_Init();
    gt_BGActorNodeStayExpires_Init();
    gt_BGActorNodeDo_Init();
    gt_HotspotClicked_Init();
    gt_HotspotHighlighted_Init();
    gt_HotspotUnhighlighted_Init();
    gt_MarSaraBadgeClickedPreCallback_Init();
    gt_MarSaraBadgeClickedPostCallback_Init();
    gt_MarSaraBadgeClickedCamera_Init();
    gt_MarSaraBadgeClicked_Init();
    gt_MarSaraHydraClickedPreCallback_Init();
    gt_MarSaraHydraClickedPostCallback_Init();
    gt_MarSaraHydraClickedCamera_Init();
    gt_MarSaraHydraClicked_Init();
    gt_MarSaraJukeboxInit_Init();
    gt_MarSaraJukeboxClickedPreCallback_Init();
    gt_MarSaraJukeboxClickedPostCallback_Init();
    gt_MarSaraJukeboxClickedCamera_Init();
    gt_MarSaraJukeboxClicked_Init();
    gt_MarSaraBriefcaseClicked_Init();
    gt_MarSaraBriefcaseLeave_Init();
    gt_MarSaraBriefcaseLeaveUIYesNo_Init();
    gt_MarSaraBriefcaseHighlighted_Init();
    gt_MarSaraBriefcaseHologramHighlighted_Init();
    gt_MarSaraBriefcaseUnhighlighted_Init();
    gt_MarSaraBriefcaseHologramUnhighlighted_Init();
    gt_MarSaraTVClicked_Init();
    gt_MarSaraTVHighlighted_Init();
    gt_MarSaraTVUnhighlighted_Init();
    gt_TVNewsBarAsyncPreload_Init();
    gt_PlanetPanelPlanetSelected_Init();
    gt_PlanetPanelLaunch_Init();
    gt_PlanetPanelPlay_Init();
    gt_PlanetPanelLeave_Init();
    gt_PlanetPanelReady_Init();
    gt_PlanetPanelHornerPitchHighlightPlanet_Init();
    gt_PlanetPanelBirthComplete_Init();
    gt_PlanetPanelCustomDialogDismissed_Init();
    gt_ConvoCameraTriggerMaster_Init();
    gt_ConvoCameraTriggerCustom_Init();
    gt_ConvoCameraTriggerCharacter1Closeup_Init();
    gt_ConvoCameraTriggerCharacter1Medium_Init();
    gt_ConvoCameraTriggerCharacter1Shoulder_Init();
    gt_ConvoCameraTriggerCharacter1Pushin_Init();
    gt_ConvoCameraTriggerCharacter1Pushout_Init();
    gt_ConvoCameraTriggerCharacter1Pan_Init();
    gt_ConvoCameraTriggerCharacter2Closeup_Init();
    gt_ConvoCameraTriggerCharacter2Medium_Init();
    gt_ConvoCameraTriggerCharacter2Shoulder_Init();
    gt_ConvoCameraTriggerCharacter2Pushin_Init();
    gt_ConvoCameraTriggerCharacter2Pushout_Init();
    gt_ConvoCameraTriggerCharacter2Pan_Init();
    gt_ConvoCameraTriggerRaynorCloseup_Init();
    gt_ConvoCameraTriggerRaynorMedium_Init();
    gt_ConvoCameraTriggerRaynorShoulder_Init();
    gt_ConvoCameraTriggerRaynorPushin_Init();
    gt_ConvoCameraTriggerRaynorPushout_Init();
    gt_ConvoCameraTriggerRaynorPan_Init();
    gt_MarSaraTychusClickedPreCallback_Init();
    gt_MarSaraTychusClickedPostCallback_Init();
    gt_MarSaraTychusClicked_Init();
    gt_DisplayTimestampFromDataConvoSkippable_Init();
    gt_SceneSkippable_Init();
    gt_Scene01RaynorIntro_Init();
    gt_Scene04TychusIntro_Init();
    gt_Scene05EscapefromMarSara_Init();
    gt_BriefingTemplate_Init();
    gt_BriefingTemplateSkippable_Init();
    gt_BriefingTemplatePreload_Init();
    gt_BriefingPlayVideoTargetingCursorSound_Init();
    gt_BriefingTRaynor01_Init();
    gt_BriefingTRaynor01Skippable_Init();
    gt_BriefingTRaynor01PreloadRough_Init();
    gt_BriefingTRaynor01Preload_Init();
    gt_BriefingTRaynor02_Init();
    gt_BriefingTRaynor02Skippable_Init();
    gt_BriefingTRaynor02PreloadRough_Init();
    gt_BriefingTRaynor02Preload_Init();
    gt_BriefingTRaynor03_Init();
    gt_BriefingTRaynor03Skippable_Init();
    gt_BriefingTRaynor03PreloadRough_Init();
    gt_BriefingTRaynor03Preload_Init();
    gt_TVNewsBack_Init();
    gt_TVNewsRaynor00_Init();
    gt_TVNewsRaynor00Skippable_Init();
    gt_TVNewsRaynor00Preload_Init();
    gt_TVNewsRaynor01_Init();
    gt_TVNewsRaynor01Skippable_Init();
    gt_TVNewsRaynor01Preload_Init();
    gt_TVNewsRaynor01Event02_Init();
    gt_TVNewsRaynor01Event05_Init();
    gt_TVNewsRaynor02_Init();
    gt_TVNewsRaynor02Skippable_Init();
    gt_TVNewsRaynor02Preload_Init();
    gt_TVNewsRaynor02Event03_Init();
    gt_TVNewsRaynor02Event05_Init();
    gt_TVNewsEventEnd_Init();
    gt_TVNewsEventAdStart_Init();
    gt_TipAfterTRaynor01_Init();
    gt_TipAfterTRaynor02_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
