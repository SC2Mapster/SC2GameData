//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zero Hour
// Author: Blizzard Entertainment
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library: Helper Functions
//--------------------------------------------------------------------------------------------------
// Function Declarations
point lib1_gf_RandomPointInCircle (region lp_circle);

// Functions
point lib1_gf_RandomPointInCircle (region lp_circle) {
    // Variable Declarations
    fixed lv_radius;

    // Variable Initialization
    lv_radius = 0.0;

    // Implementation
    lv_radius = (AbsF((PointGetX(RegionGetBoundsMax(lp_circle)) - PointGetX(RegionGetBoundsMin(lp_circle)))) / 2.0);
    return PointWithOffsetPolar(RegionGetCenter(lp_circle), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle());
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER01_USER;
int gv_pLAYER02_ZERG;
int gv_pLAYER03_ZERG;
int gv_pLAYER04_ZERG;
int gv_pLAYER05_ZERG_NOAI;
int gv_pLAYER06_REBELS;
int gv_pLAYER07_HYPERION;
int gv_pLAYER08_TAUREN;
int gv_pLAYER09_COLONISTS;
playergroup gv_zergPlayers;
bool gv_gameOver;
bool gv_inCinematic;
unit gv_nydusWormP02;
unit gv_nydusWormP03;
unit gv_nydusWormP04;
timer gv_dropPodExpansion1;
timer gv_dropPodExpansion2;
timer gv_dropPodExpansion3;
timer gv_dropPodExpansion4;
unitgroup gv_bullhornLightsGroup;
actor gv_bunkerBridgeWestPing;
actor gv_bunkerBridgeEastPing;
actor gv_bunkerBaseWestPing;
actor gv_bunkerBaseEastPing;
unit gv_bunkerBridgeWest;
unit gv_bunkerBridgeEast;
unit gv_bunkerBaseWest;
unit gv_bunkerBaseEast;
int gv_bunkerBaseWestTextTag;
int gv_bunkerBaseEastTextTag;
int gv_bunkerBridgeEastTextTag;
int gv_bunkerBridgeWestTextTag;
bool gv_bunkerBridgeEastACTIVE;
bool gv_bunkerBridgeWestACTIVE;
bool gv_bunkerBaseEastACTIVE;
bool gv_bunkerBaseWestACTIVE;
unitgroup gv_rebelMarines01;
unitgroup gv_rebelMarines02;
unitgroup gv_rebelMarines03;
int gv_rebelMarinesPing1;
int gv_rebelMarinesPing2;
int gv_rebelMarinesPing3;
bool gv_rebelMarinesFound01;
bool gv_rebelMarinesFound02;
bool gv_rebelMarinesFound03;
unit gv_rebelMarinesBeacon01;
unit gv_rebelMarinesBeacon02;
unit gv_rebelMarinesBeacon03;
const fixed gv_sURVIVETIME = 20.0;
timer gv_zergFirstAttackWaveTimer;
timer gv_tenMinuteWarning;
timer gv_fiveMinuteWarning;
timer gv_twoMinuteWarning;
timer gv_oneMinuteWarning;
timer gv_evacuationTimer;
int gv_evacuationTimerWindow;
int gv_inCombatIndicator;
int gv_hatcheriesDestroyed;
int gv_rebelFightersRescued;
int gv_structuresLostAndSalvaged;
bool gv_hatcheryAchievementUnlocked;
int gv_objectiveHoldOut;
int gv_objectiveRescue;
actor gv_pingActorBunkerEast;
actor gv_pingActorBunkerWest;
unit gv_victoryHyperion;
bool gv_victoryCinematicCompleted;
unitgroup gv_victoryRemovedUnitGroup;

void InitGlobals () {
    gv_pLAYER01_USER = 1;
    gv_pLAYER02_ZERG = 2;
    gv_pLAYER03_ZERG = 3;
    gv_pLAYER04_ZERG = 4;
    gv_pLAYER05_ZERG_NOAI = 5;
    gv_pLAYER06_REBELS = 6;
    gv_pLAYER07_HYPERION = 7;
    gv_pLAYER08_TAUREN = 8;
    gv_pLAYER09_COLONISTS = 9;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_gameOver = false;
    gv_inCinematic = false;
    gv_nydusWormP02 = null;
    gv_nydusWormP03 = null;
    gv_nydusWormP04 = null;
    gv_dropPodExpansion1 = TimerCreate();
    gv_dropPodExpansion2 = TimerCreate();
    gv_dropPodExpansion3 = TimerCreate();
    gv_dropPodExpansion4 = TimerCreate();
    gv_bullhornLightsGroup = UnitGroupEmpty();
    gv_bunkerBridgeWestPing = null;
    gv_bunkerBridgeEastPing = null;
    gv_bunkerBaseWestPing = null;
    gv_bunkerBaseEastPing = null;
    gv_bunkerBridgeWest = null;
    gv_bunkerBridgeEast = null;
    gv_bunkerBaseWest = null;
    gv_bunkerBaseEast = null;
    gv_bunkerBaseWestTextTag = c_textTagNone;
    gv_bunkerBaseEastTextTag = c_textTagNone;
    gv_bunkerBridgeEastTextTag = c_textTagNone;
    gv_bunkerBridgeWestTextTag = c_textTagNone;
    gv_bunkerBridgeEastACTIVE = false;
    gv_bunkerBridgeWestACTIVE = false;
    gv_bunkerBaseEastACTIVE = false;
    gv_bunkerBaseWestACTIVE = false;
    gv_rebelMarines01 = UnitGroupEmpty();
    gv_rebelMarines02 = UnitGroupEmpty();
    gv_rebelMarines03 = UnitGroupEmpty();
    gv_rebelMarinesPing1 = c_invalidPingId;
    gv_rebelMarinesPing2 = c_invalidPingId;
    gv_rebelMarinesPing3 = c_invalidPingId;
    gv_rebelMarinesFound01 = false;
    gv_rebelMarinesFound02 = false;
    gv_rebelMarinesFound03 = false;
    gv_rebelMarinesBeacon01 = UnitFromId(1160);
    gv_rebelMarinesBeacon02 = UnitFromId(1113);
    gv_rebelMarinesBeacon03 = UnitFromId(856);
    gv_zergFirstAttackWaveTimer = TimerCreate();
    gv_tenMinuteWarning = TimerCreate();
    gv_fiveMinuteWarning = TimerCreate();
    gv_twoMinuteWarning = TimerCreate();
    gv_oneMinuteWarning = TimerCreate();
    gv_evacuationTimer = TimerCreate();
    gv_evacuationTimerWindow = c_timerWindowNone;
    gv_inCombatIndicator = 0;
    gv_hatcheriesDestroyed = 0;
    gv_rebelFightersRescued = 0;
    gv_structuresLostAndSalvaged = 0;
    gv_hatcheryAchievementUnlocked = false;
    gv_objectiveHoldOut = c_invalidObjectiveId;
    gv_objectiveRescue = c_invalidObjectiveId;
    gv_victoryHyperion = null;
    gv_victoryCinematicCompleted = false;
    gv_victoryRemovedUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_DropPodExpansionZergling (int lp_quantity, point lp_zergSpawnPoint, point lp_dropPodLandingPoint, point lp_waveTarget);
void gf_DropPodExpansionTumorOnly (point lp_dropPodLandingPoint);
void gf_FirstZergWaveAttackP03 (int lp_quantity, fixed lp_waitTime, string lp_unitType);
void gf_SpawnNydusUnitsP02West (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);
void gf_SpawnNydusUnitsP04East (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);
bool gf_PlayerIsInCombat (int lp_player);
void gf_BriefingZerg1Behavior (int lp_quantity, string lp_unitType, fixed lp_waitTime);
void gf_BriefingZerg2Behavior (int lp_quantity, string lp_unitType, fixed lp_waitTime);
void gf_VictoryCineSpawnNydusUnits (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04Music;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_IntroSequence;
trigger gt_StartGame;
trigger gt_BurrowAmbushGlobalTrigger;
trigger gt_AlertFirstZergWave;
trigger gt_AlertZergAttackingBullhornLights;
trigger gt_StartDropPodTimers;
trigger gt_ZergDropPodExpansion1;
trigger gt_ZergDropPodExpansion2;
trigger gt_ZergDropPodExpansion3;
trigger gt_ZergDropPodExpansion4;
trigger gt_SpineCrawlerIncursion1;
trigger gt_SpineCrawlerIncursion2;
trigger gt_SpineCrawlerIncursion3;
trigger gt_SalvageBunkersDisableRetreatTransmission;
trigger gt_TransitiontoDawn;
trigger gt_TaurenMarineSighted;
trigger gt_TaurenOuthouseLaunch;
trigger gt_CreateBunkerPingsandTooltips;
trigger gt_ShowBunkerTextTags;
trigger gt_RemoveBunkerTextTags;
trigger gt_RemoveBunkerTextTagSalvagedorDead;
trigger gt_CreateUnitTooltips;
trigger gt_NewStructureBuilt;
trigger gt_StrandedRebelMarinesTiming;
trigger gt_RebelMarines01Intro;
trigger gt_RebelMarines02Intro;
trigger gt_RebelMarines03Intro;
trigger gt_RebelMarines01Rescued;
trigger gt_RebelMarines02Rescued;
trigger gt_RebelMarines03Rescued;
trigger gt_RebelMarines01Dead;
trigger gt_RebelMarines02Dead;
trigger gt_RebelMarines03Dead;
trigger gt_StartTimers;
trigger gt_StartAI;
trigger gt_StartFirstZergWaveSpecial;
trigger gt_AttackWavesRedZergP02;
trigger gt_AttackWavesTealZergP03;
trigger gt_AttackWavesPurpleZergP04;
trigger gt_AIResearchHard;
trigger gt_AIResearchInsane;
trigger gt_ZergP02EarlyNydusWave;
trigger gt_ZergP04EarlyNydusWave;
trigger gt_ZergP02LateNydusWave;
trigger gt_ZergP04LateNydusWave;
trigger gt_ZergP02EndGameNydusWorms;
trigger gt_ZergP03EndGameNydusWorms;
trigger gt_ZergP04EndGameNydusWorms;
trigger gt_ReviveP02NydusWorm;
trigger gt_ReviveP04NydusWorm;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_PlayerIsInCombat;
trigger gt_PlayerIsInCombatIndicatorDiminish;
trigger gt_TransmissionCallForRetreatQ;
trigger gt_TransmissionFirstZergWaveIncomingQ;
trigger gt_TransmissionTychusIncomingAirUnitsQ;
trigger gt_TransmissionRebelMarines01MaydayQ;
trigger gt_TransmissionRebelMarines02MaydayQ;
trigger gt_TransmissionRebelMarines03MaydayQ;
trigger gt_TransmissionRebelMarines01RescuedQ;
trigger gt_TransmissionRebelMarines02RescuedQ;
trigger gt_TransmissionRebelMarines03RescuedQ;
trigger gt_Transmission10MinuteWarningQ;
trigger gt_Transmission5MinuteWarningQ;
trigger gt_TransmissionLastMinuteQ;
trigger gt_TipStoryModeQ;
trigger gt_TipBunkerQ;
trigger gt_TipReactorQ;
trigger gt_TipEngineeringBayQ;
trigger gt_TipMissileTurretQ;
trigger gt_TipRepairQ;
trigger gt_Achievement4HatcheriesDestroyed;
trigger gt_VictoryHoldOutCompleted;
trigger gt_Victory;
trigger gt_DefeatBaseDead;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveHoldOutCreateQ;
trigger gt_ObjectiveHoldOutComplete;
trigger gt_ObjectiveRescueCreateQ;
trigger gt_ObjectiveRescueComplete;
trigger gt_ObjectiveRescueFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingZergSpawn;
trigger gt_BriefingDropPodsDrones;
trigger gt_BriefingDropPodsZerglings;
trigger gt_BriefingCleanUpZerg;
trigger gt_BriefingPingScene;
trigger gt_BriefingPingCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryDropPods;
trigger gt_VictoryBridgeZerg;
trigger gt_VictoryMutas;
trigger gt_VictoryNydusSpawn01;
trigger gt_VictoryNydusSpawn02;
trigger gt_VictoryNydusSpawn03;
trigger gt_VictoryNydusSpawn04;
trigger gt_VictoryNydusSpawn05;
trigger gt_VictoryNydusSpawn06;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_DropPodExpansionZergling (int lp_quantity, point lp_zergSpawnPoint, point lp_dropPodLandingPoint, point lp_waveTarget) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_quantity, "Zergling", 0, gv_pLAYER05_ZERG_NOAI, lp_zergSpawnPoint);
    lv_lastGroup = UnitLastCreatedGroup();
    libCamp_gf_CreateDropPod(1, lp_dropPodLandingPoint, UnitLastCreatedGroup(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_pLAYER04_ZERG, lp_dropPodLandingPoint);
    Wait(1.0, c_timeGame);
    AISetGroupSuicide(lv_lastGroup, true);
}

void gf_DropPodExpansionTumorOnly (point lp_dropPodLandingPoint) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        if ((libNtve_gf_RandomPercent() >= 75.0)) {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 2, 4), "Zergling", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(257));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 1, 1), "Hydralisk", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(257));
            libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 0, 2), "Zergling", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(257));
        }
        lv_lastGroup = UnitLastCreatedGroup();
    }
    else {
    }
    libCamp_gf_CreateDropPod(1, lp_dropPodLandingPoint, lv_lastGroup, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_pLAYER04_ZERG, lp_dropPodLandingPoint);
    Wait(1.0, c_timeGame);
    AISetGroupSuicide(lv_lastGroup, true);
}

void gf_FirstZergWaveAttackP03 (int lp_quantity, fixed lp_waitTime, string lp_unitType) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP03), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(lp_quantity, lp_unitType, 0, gv_pLAYER03_ZERG, UnitGetPosition(gv_nydusWormP03));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    Wait(lp_waitTime, c_timeGame);
}

void gf_SpawnNydusUnitsP02West (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Implementation
    if ((gv_gameOver == false) && (UnitIsAlive(lp_nydus) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }
    else {
    }
}

void gf_SpawnNydusUnitsP04East (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Implementation
    if ((gv_gameOver == false) && (UnitIsAlive(lp_nydus) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }
    else {
    }
}

bool gf_PlayerIsInCombat (int lp_player) {
    // Implementation
    if ((gv_inCombatIndicator > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_BriefingZerg1Behavior (int lp_quantity, string lp_unitType, fixed lp_waitTime) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_quantity, lp_unitType, 0, gv_pLAYER05_ZERG_NOAI, PointFromId(67));
    lv_lastGroup = UnitLastCreatedGroup();
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(81)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(114)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(162)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(209)), c_orderQueueAddToEnd);
    UnitGroupClear(lv_lastGroup);
    Wait(lp_waitTime, c_timeGame);
}

void gf_BriefingZerg2Behavior (int lp_quantity, string lp_unitType, fixed lp_waitTime) {
    // Variable Declarations
    unitgroup lv_lastGroup;

    // Variable Initialization
    lv_lastGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(lp_quantity, lp_unitType, 0, gv_pLAYER05_ZERG_NOAI, PointFromId(76));
    lv_lastGroup = UnitLastCreatedGroup();
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(243)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(242)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_lastGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(240)), c_orderQueueAddToEnd);
    UnitGroupClear(lv_lastGroup);
    Wait(lp_waitTime, c_timeGame);
}

void gf_VictoryCineSpawnNydusUnits (int lp_qty, string lp_unitType, int lp_player, unit lp_nydus, fixed lp_delay) {
    // Implementation
    if ((UnitIsAlive(lp_nydus) == true) && (gv_victoryCinematicCompleted == false)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydus), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_nydus, 0.0, 100.0, 0.0);
        UnitCreate(lp_qty, lp_unitType, 0, lp_player, UnitGetPosition(lp_nydus), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(363)), c_orderQueueReplace);
        Wait(lp_delay, c_timeGame);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_LoadCampaignData(3);
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04Music, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    libCamp_gf_RegisterFootageRecording(gt_BriefingQ);
    libCamp_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_IntroSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libCamp_gf_EnableCampaignTechUnit(true, 23, gv_pLAYER01_USER);
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("TerranBuild", 4), false);
        TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("TerranBuild", 5), false);
    }
    else {
        TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("TerranBuild", 5), true);
    }
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("TerranBuild", 6), true);
    TechTreeAbilityAllow(gv_pLAYER01_USER, AbilityCommand("BarracksReactorMorph", 0), true);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "Burrow", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER02_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER03_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER04_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER05_ZERG_NOAI, 5);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER06_REBELS, 0);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER07_HYPERION, 1);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER09_COLONISTS, 8);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER03_ZERG, 2);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER04_ZERG, 2);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER05_ZERG_NOAI, 2);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER06_REBELS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER02_ZERG, gv_pLAYER09_COLONISTS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER03_ZERG, gv_pLAYER04_ZERG, 2);
    libNtve_gf_SetAlliance(gv_pLAYER03_ZERG, gv_pLAYER05_ZERG_NOAI, 2);
    libNtve_gf_SetAlliance(gv_pLAYER03_ZERG, gv_pLAYER06_REBELS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER03_ZERG, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER03_ZERG, gv_pLAYER09_COLONISTS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER04_ZERG, gv_pLAYER05_ZERG_NOAI, 2);
    libNtve_gf_SetAlliance(gv_pLAYER04_ZERG, gv_pLAYER06_REBELS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER04_ZERG, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER04_ZERG, gv_pLAYER09_COLONISTS, 7);
    libNtve_gf_SetAlliance(gv_pLAYER05_ZERG_NOAI, gv_pLAYER06_REBELS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER05_ZERG_NOAI, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER05_ZERG_NOAI, gv_pLAYER09_COLONISTS, 5);
    libNtve_gf_SetAlliance(gv_pLAYER06_REBELS, gv_pLAYER09_COLONISTS, 8);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER02_ZERG, 7);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER03_ZERG, 7);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER04_ZERG, 7);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER05_ZERG_NOAI, 7);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER06_REBELS, 8);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER08_TAUREN, 7);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER09_COLONISTS, 8);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER02_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER03_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER04_ZERG);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER05_ZERG_NOAI);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER03_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER03_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER04_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER05_ZERG_NOAI, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER05_ZERG_NOAI, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetColorIndex(gv_pLAYER03_ZERG, 4, true);
    PlayerSetColorIndex(gv_pLAYER04_ZERG, 4, true);
    PlayerSetState(gv_pLAYER05_ZERG_NOAI, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER06_REBELS, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER07_HYPERION, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER08_TAUREN, c_playerStateDisplayInLeaderPanel, false);
    PlayerSetState(gv_pLAYER09_COLONISTS, c_playerStateDisplayInLeaderPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunkerBridgeWest = UnitFromId(298);
    gv_bunkerBridgeEast = UnitFromId(291);
    gv_bunkerBaseEast = UnitFromId(4);
    gv_bunkerBaseWest = UnitFromId(13);
    libNtve_gf_AttachModelToUnit(UnitFromId(258), "ArtifactPiece1", "Hardpoint");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(258), "Signal ArtifactLoaded");
    UnitSetState(UnitFromId(258), c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(258), true);
    UnitSetPropertyFixed(UnitFromId(795), c_unitPropLifePercent, 85.0);
    UnitSetPropertyFixed(UnitFromId(796), c_unitPropLifePercent, 89.0);
    UnitSetState(UnitFromId(795), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(796), c_unitStateTargetable, false);
    UnitIssueOrder(UnitFromId(788), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetState(UnitFromId(788), c_unitStateTargetable, false);
    UnitGroupLoopBegin(UnitGroup("DestructibleBullhornLights", gv_pLAYER09_COLONISTS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_bullhornLightsGroup, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CruiserBike", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerranBuggy", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Fidget", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitSetInfoText(gv_rebelMarinesBeacon01, StringExternal("Param/Value/D0B3E765"), StringExternal("Param/Value/424A3B35"), StringExternal("Param/Value/36A98A35"));
    UnitSetInfoText(gv_rebelMarinesBeacon02, StringExternal("Param/Value/71995348"), StringExternal("Param/Value/17C611E4"), StringExternal("Param/Value/E87246E9"));
    UnitSetInfoText(gv_rebelMarinesBeacon03, StringExternal("Param/Value/C5438079"), StringExternal("Param/Value/86605294"), StringExternal("Param/Value/C3011260"));
    TextTagCreate(StringExternal("Param/Value/DC706388"), 18, UnitGetPosition(gv_bunkerBridgeEast), 2.5, false, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_bunkerBridgeEastTextTag = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/DD630F5C"), 18, UnitGetPosition(gv_bunkerBridgeWest), 2.5, false, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_bunkerBridgeWestTextTag = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/24851E7E"), 18, UnitGetPosition(gv_bunkerBaseEast), 2.5, false, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_bunkerBaseEastTextTag = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/43FACC21"), 18, UnitGetPosition(gv_bunkerBaseWest), 2.5, false, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\ui_mission_frame_massege.dds", true);
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 1.0, 1.0);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, c_textTagTimePermanent);
    gv_bunkerBaseWestTextTag = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init04Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Music_Init () {
    gt_Init04Music = TriggerCreate("gt_Init04Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("MarSaraCampaignNight");
    GameTimeOfDaySet("18:00:00");
    GameTimeOfDayPause(true);
    GameTimeOfDaySetLength(140.0);
    VisRevealerCreate(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(258)), 6.0));
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(15));
    VisRevealerCreate(gv_pLAYER01_USER, RegionFromId(18));
    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(65), false);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(65), false);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(65), false);
    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(66), false);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(66), false);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(66), false);
    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(67), false);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(67), false);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(67), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(gv_pLAYER01_USER) == 1)) {
        PlayerModifyPropertyInt(gv_pLAYER02_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER03_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER04_ZERG, c_playerPropHandicap, c_playerPropOperSetTo, 50);
        PlayerModifyPropertyInt(gv_pLAYER05_ZERG_NOAI, c_playerPropHandicap, c_playerPropOperSetTo, 50);
    }
    else {
    }
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER01_USER);
    libCamp_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", false, gv_pLAYER01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER01_USER);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libCamp_gf_AddUnitTypeToUnitHelpPanel("ZergDropPod", false, gv_pLAYER01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER01_USER);
        libCamp_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER01_USER);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/04D269FC"), null, UnitGetPosition(UnitFromId(23)));
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER06_REBELS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.1, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(598)), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libCamp_gf_ChangeAmbience("Ambience_TRaynor03Rain");
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateUnitTooltips, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_StartDropPodTimers, true, false);
    }
    else {
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicMain2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    TriggerExecute(gt_StrandedRebelMarinesTiming, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveHoldOutCreateQ, true, false);
    Wait(3.0, c_timeReal);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TipBunkerQ, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TipReactorQ, true, false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
        Wait(10.0, c_timeGame);
        TriggerExecute(gt_TipEngineeringBayQ, true, false);
        Wait(10.0, c_timeGame);
        TriggerExecute(gt_TipMissileTurretQ, true, false);
    }
    else {
    }
    TriggerExecute(gt_TipStoryModeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burrow Ambush Global Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BurrowAmbushGlobalTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER04_ZERG, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER04_ZERG, EventUnitRegion(), UnitFilter((1 << c_targetFilterBuried), 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        AISetUnitSuicide(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BurrowAmbushGlobalTrigger_Init () {
    gt_BurrowAmbushGlobalTrigger = TriggerCreate("gt_BurrowAmbushGlobalTrigger_Func");
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(27), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_BurrowAmbushGlobalTrigger, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert - First Zerg Wave
//--------------------------------------------------------------------------------------------------
bool gt_AlertFirstZergWave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv_bullhornLightsGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(6.0, c_timeGame);
    TriggerEnable(gt_AlertZergAttackingBullhornLights, true);
    TriggerExecute(gt_TransmissionFirstZergWaveIncomingQ, true, false);
    UnitGroupLoopBegin(gv_bullhornLightsGroup);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertFirstZergWave_Init () {
    gt_AlertFirstZergWave = TriggerCreate("gt_AlertFirstZergWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert - Zerg Attacking - Bullhorn Lights
//--------------------------------------------------------------------------------------------------
bool gt_AlertZergAttackingBullhornLights_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_bullhornLightsGroup);
    while (!UnitGroupLoopDone()) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Stand Work", c_animFlagNonLooping, 0.0);
        }
        else {
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault);
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertZergAttackingBullhornLights_Init () {
    gt_AlertZergAttackingBullhornLights = TriggerCreate("gt_AlertZergAttackingBullhornLights_Func");
    TriggerEnable(gt_AlertZergAttackingBullhornLights, false);
    TriggerAddEventTimePeriodic(gt_AlertZergAttackingBullhornLights, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Drop Pod Timers
//--------------------------------------------------------------------------------------------------
bool gt_StartDropPodTimers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(230.0, c_timeGame);
    TimerStart(gv_dropPodExpansion1, 10.0, false, c_timeGame);
    Wait(10.0, c_timeGame);
    Wait(90.0, c_timeGame);
    TriggerExecute(gt_SpineCrawlerIncursion1, true, false);
    TimerStart(gv_dropPodExpansion1, 90.0, true, c_timeGame);
    Wait(140.0, c_timeGame);
    TimerStart(gv_dropPodExpansion2, 10.0, false, c_timeGame);
    Wait(10.0, c_timeGame);
    Wait(90.0, c_timeGame);
    TriggerExecute(gt_SpineCrawlerIncursion2, true, false);
    TimerStart(gv_dropPodExpansion2, 90.0, true, c_timeGame);
    Wait(140.0, c_timeGame);
    TimerStart(gv_dropPodExpansion3, 10.0, false, c_timeGame);
    Wait(10.0, c_timeGame);
    Wait(90.0, c_timeGame);
    TriggerExecute(gt_SpineCrawlerIncursion3, true, false);
    TimerStart(gv_dropPodExpansion3, 90.0, true, c_timeGame);
    Wait(150.0, c_timeGame);
    TimerStart(gv_dropPodExpansion4, 90.0, true, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartDropPodTimers_Init () {
    gt_StartDropPodTimers = TriggerCreate("gt_StartDropPodTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Drop Pod Expansion 1
//--------------------------------------------------------------------------------------------------
bool gt_ZergDropPodExpansion1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(511), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(6, PointFromId(257), PointFromId(668), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(296), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(671), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(320), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergDropPodExpansion1_Init () {
    gt_ZergDropPodExpansion1 = TriggerCreate("gt_ZergDropPodExpansion1_Func");
    TriggerAddEventTimer(gt_ZergDropPodExpansion1, gv_dropPodExpansion1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Drop Pod Expansion 2
//--------------------------------------------------------------------------------------------------
bool gt_ZergDropPodExpansion2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(50), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(684), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(673), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(680), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionZergling(4, PointFromId(257), PointFromId(701), PointFromId(363));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergDropPodExpansion2_Init () {
    gt_ZergDropPodExpansion2 = TriggerCreate("gt_ZergDropPodExpansion2_Func");
    TriggerAddEventTimer(gt_ZergDropPodExpansion2, gv_dropPodExpansion2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Drop Pod Expansion 3
//--------------------------------------------------------------------------------------------------
bool gt_ZergDropPodExpansion3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(737));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(738));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(739));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(740));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(771));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergDropPodExpansion3_Init () {
    gt_ZergDropPodExpansion3 = TriggerCreate("gt_ZergDropPodExpansion3_Func");
    TriggerAddEventTimer(gt_ZergDropPodExpansion3, gv_dropPodExpansion3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Drop Pod Expansion 4
//--------------------------------------------------------------------------------------------------
bool gt_ZergDropPodExpansion4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(774));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            gf_DropPodExpansionTumorOnly(PointFromId(776));
            Wait(1.0, c_timeGame);
        }
        else {
        }
    }
    else {
        if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            gf_DropPodExpansionTumorOnly(PointFromId(1257));
            Wait(1.0, c_timeGame);
        }
        else {
        }
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER04_ZERG, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_DropPodExpansionTumorOnly(PointFromId(775));
        Wait(1.0, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergDropPodExpansion4_Init () {
    gt_ZergDropPodExpansion4 = TriggerCreate("gt_ZergDropPodExpansion4_Func");
    TriggerAddEventTimer(gt_ZergDropPodExpansion4, gv_dropPodExpansion4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Incursion 1
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerIncursion1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(65), true);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(65), true);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(65), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerIncursion1_Init () {
    gt_SpineCrawlerIncursion1 = TriggerCreate("gt_SpineCrawlerIncursion1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Incursion 2
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerIncursion2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(66), true);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(66), true);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(66), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerIncursion2_Init () {
    gt_SpineCrawlerIncursion2 = TriggerCreate("gt_SpineCrawlerIncursion2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spine Crawler Incursion 3
//--------------------------------------------------------------------------------------------------
bool gt_SpineCrawlerIncursion3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER02_ZERG, RegionFromId(67), true);
    AIToggleBulliesInRegion(gv_pLAYER03_ZERG, RegionFromId(67), true);
    AIToggleBulliesInRegion(gv_pLAYER04_ZERG, RegionFromId(67), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpineCrawlerIncursion3_Init () {
    gt_SpineCrawlerIncursion3 = TriggerCreate("gt_SpineCrawlerIncursion3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage Bunkers - Disable Retreat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_SalvageBunkersDisableRetreatTransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(56)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionCallForRetreatQ, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageBunkersDisableRetreatTransmission_Init () {
    gt_SalvageBunkersDisableRetreatTransmission = TriggerCreate("gt_SalvageBunkersDisableRetreatTransmission_Func");
    TriggerAddEventUnitAbility(gt_SalvageBunkersDisableRetreatTransmission, null, AbilityCommand("SalvageBunkerRefund", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Dawn
//--------------------------------------------------------------------------------------------------
bool gt_TransitiontoDawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetLighting("MarSaraCampaignDay", 60.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicMain3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(30.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libCamp_gf_ChangeAmbience("Ambience_MarSara");
    Wait(30.0, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransitiontoDawn_Init () {
    gt_TransitiontoDawn = TriggerCreate("gt_TransitiontoDawn_Func");
    TriggerAddEventTimer(gt_TransitiontoDawn, gv_twoMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tauren Marine Sighted
//--------------------------------------------------------------------------------------------------
bool gt_TaurenMarineSighted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(788), OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(1167)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    SoundPlayOnUnit(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitFromId(1167), 0.0, 100.0, 0.0);
    UnitRemove(UnitFromId(788));
    TriggerEnable(gt_TaurenOuthouseLaunch, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaurenMarineSighted_Init () {
    gt_TaurenMarineSighted = TriggerCreate("gt_TaurenMarineSighted_Func");
    TriggerAddEventUnitRegion(gt_TaurenMarineSighted, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tauren Outhouse Launch
//--------------------------------------------------------------------------------------------------
bool gt_TaurenOuthouseLaunch_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetEvalCount(TriggerGetCurrent()) == 0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate(StringExternal("Param/Value/15C552A2"), 24, UnitGetPosition(UnitFromId(1167)), 1.0, true, false, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    }
    else {
    }
    if ((TriggerGetEvalCount(TriggerGetCurrent()) == 1)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate(StringExternal("Param/Value/E7BF84D7"), 24, UnitGetPosition(UnitFromId(1167)), 1.0, true, false, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    }
    else {
    }
    if ((TriggerGetEvalCount(TriggerGetCurrent()) == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        VisRevealArea(gv_pLAYER01_USER, RegionCircle(UnitGetPosition(UnitFromId(1167)), 5.0), 6.0, false);
        UnitSetState(UnitFromId(1167), c_unitStateSelectable, false);
        UnitSelect(UnitFromId(1167), gv_pLAYER01_USER, false);
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate(StringExternal("Param/Value/44A00372"), 24, UnitGetPosition(UnitFromId(1167)), 1.0, true, false, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        Wait(2.5, c_timeGame);
        libCamp_gf_SetStoryState(38, 1);
        SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate(StringExternal("Param/Value/F6B6EFD6"), 24, UnitGetPosition(UnitFromId(1167)), 1.0, true, false, PlayerGroupAll());
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        UnitIssueOrder(UnitFromId(1167), Order(AbilityCommand("TaurenOuthouseLiftoff", 0)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaurenOuthouseLaunch_Init () {
    gt_TaurenOuthouseLaunch = TriggerCreate("gt_TaurenOuthouseLaunch_Func");
    TriggerEnable(gt_TaurenOuthouseLaunch, false);
    TriggerAddEventUnitClick(gt_TaurenOuthouseLaunch, UnitRefFromUnit(UnitFromId(1167)), c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Bunker Pings and Tooltips
//--------------------------------------------------------------------------------------------------
bool gt_CreateBunkerPingsandTooltips_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_bunkerBridgeEast) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeEast), c_unitCountAlive) == 0) && (libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TextTagShow(gv_bunkerBridgeEastTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBridgeEast));
        gv_bunkerBridgeEastPing = libNtve_gf_ActorLastCreated();
        gv_bunkerBridgeEastACTIVE = true;
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBridgeWest) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeWest), c_unitCountAlive) == 0) && (libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TextTagShow(gv_bunkerBridgeWestTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBridgeWest));
        gv_bunkerBridgeWestPing = libNtve_gf_ActorLastCreated();
        gv_bunkerBridgeWestACTIVE = true;
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBaseEast) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBaseEast), c_unitCountAlive) == 0) && (libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TextTagShow(gv_bunkerBaseEastTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBaseEast));
        gv_bunkerBaseEastPing = libNtve_gf_ActorLastCreated();
        gv_bunkerBaseEastACTIVE = true;
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBaseWest) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBaseWest), c_unitCountAlive) == 0) && (libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TextTagShow(gv_bunkerBaseWestTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBaseWest));
        gv_bunkerBaseWestPing = libNtve_gf_ActorLastCreated();
        gv_bunkerBaseWestACTIVE = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBunkerPingsandTooltips_Init () {
    gt_CreateBunkerPingsandTooltips = TriggerCreate("gt_CreateBunkerPingsandTooltips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Bunker Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_ShowBunkerTextTags_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_bunkerBridgeEast) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeEast), c_unitCountAlive) == 0) && (gv_bunkerBridgeEastACTIVE == false)) {
        gv_bunkerBridgeEastACTIVE = true;
        TextTagShow(gv_bunkerBridgeEastTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBridgeEast));
        gv_bunkerBridgeEastPing = libNtve_gf_ActorLastCreated();
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBridgeWest) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeWest), c_unitCountAlive) == 0) && (gv_bunkerBridgeWestACTIVE == false)) {
        gv_bunkerBridgeWestACTIVE = true;
        TextTagShow(gv_bunkerBridgeWestTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBridgeWest));
        gv_bunkerBridgeWestPing = libNtve_gf_ActorLastCreated();
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBaseEast) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBaseEast), c_unitCountAlive) == 0) && (gv_bunkerBaseEastACTIVE == false)) {
        gv_bunkerBaseEastACTIVE = true;
        TextTagShow(gv_bunkerBaseEastTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBaseEast));
        gv_bunkerBaseEastPing = libNtve_gf_ActorLastCreated();
    }
    else {
    }
    if ((UnitIsAlive(gv_bunkerBaseWest) == true) && (UnitGroupCount(UnitCargoGroup(gv_bunkerBaseWest), c_unitCountAlive) == 0) && (gv_bunkerBaseWestACTIVE == false)) {
        gv_bunkerBaseWestACTIVE = true;
        TextTagShow(gv_bunkerBaseWestTextTag, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", UnitGetPosition(gv_bunkerBaseWest));
        gv_bunkerBaseWestPing = libNtve_gf_ActorLastCreated();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowBunkerTextTags_Init () {
    gt_ShowBunkerTextTags = TriggerCreate("gt_ShowBunkerTextTags_Func");
    TriggerEnable(gt_ShowBunkerTextTags, false);
    TriggerAddEventTimePeriodic(gt_ShowBunkerTextTags, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Bunker Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBunkerTextTags_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeEast), c_unitCountAlive) != 0) && (gv_bunkerBridgeEastACTIVE == true)) {
        gv_bunkerBridgeEastACTIVE = false;
        TextTagShow(gv_bunkerBridgeEastTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBridgeEastPing);
    }
    else {
    }
    if ((UnitGroupCount(UnitCargoGroup(gv_bunkerBridgeWest), c_unitCountAlive) != 0) && (gv_bunkerBridgeWestACTIVE == true)) {
        gv_bunkerBridgeWestACTIVE = false;
        TextTagShow(gv_bunkerBridgeWestTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBridgeWestPing);
    }
    else {
    }
    if ((UnitGroupCount(UnitCargoGroup(gv_bunkerBaseEast), c_unitCountAlive) != 0) && (gv_bunkerBaseEastACTIVE == true)) {
        gv_bunkerBaseEastACTIVE = false;
        TextTagShow(gv_bunkerBaseEastTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBaseEastPing);
    }
    else {
    }
    if ((UnitGroupCount(UnitCargoGroup(gv_bunkerBaseWest), c_unitCountAlive) != 0) && (gv_bunkerBaseWestACTIVE == true)) {
        gv_bunkerBaseWestACTIVE = false;
        TextTagShow(gv_bunkerBaseWestTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBaseWestPing);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBunkerTextTags_Init () {
    gt_RemoveBunkerTextTags = TriggerCreate("gt_RemoveBunkerTextTags_Func");
    TriggerAddEventUnitCargo(gt_RemoveBunkerTextTags, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Bunker Text Tag - Salvaged or Dead
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBunkerTextTagSalvagedorDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_bunkerBridgeEast)) {
        TextTagShow(gv_bunkerBridgeEastTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBridgeEastPing);
    }
    else {
    }
    if ((EventUnit() == gv_bunkerBridgeWest)) {
        TextTagShow(gv_bunkerBridgeWestTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBridgeWestPing);
    }
    else {
    }
    if ((EventUnit() == gv_bunkerBaseEast)) {
        TextTagShow(gv_bunkerBaseEastTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBaseEastPing);
    }
    else {
    }
    if ((EventUnit() == gv_bunkerBaseWest)) {
        TextTagShow(gv_bunkerBaseWestTextTag, PlayerGroupAll(), false);
        libNtve_gf_KillModel(gv_bunkerBaseWestPing);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBunkerTextTagSalvagedorDead_Init () {
    gt_RemoveBunkerTextTagSalvagedorDead = TriggerCreate("gt_RemoveBunkerTextTagSalvagedorDead_Func");
    TriggerAddEventUnitDied(gt_RemoveBunkerTextTagSalvagedorDead, null);
    TriggerAddEventUnitAbility(gt_RemoveBunkerTextTagSalvagedorDead, null, AbilityCommand("SalvageBunker", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Unit Tooltips
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnitTooltips_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetInfoText(UnitFromId(258), StringExternal("Param/Value/6341641B"), StringExternal("Param/Value/DEE92A7D"), StringExternal("Param/Value/8B1D16B7"));
    if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
        UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/F820EA3E"), StringExternal("Param/Value/B8ACA28F"), StringExternal("Param/Value/46206E52"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("EngineeringBay", gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/92EF22E3"), StringExternal("Param/Value/1EDE9CD3"), StringExternal("Param/Value/53895D62"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitSetInfoText(UnitGroupLoopCurrent(), StringExternal("Param/Value/219771E3"), StringExternal("Param/Value/9C5A9C47"), StringExternal("Param/Value/4ACA922A"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnitTooltips_Init () {
    gt_CreateUnitTooltips = TriggerCreate("gt_CreateUnitTooltips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Structure Built
//--------------------------------------------------------------------------------------------------
bool gt_NewStructureBuilt_Func (bool testConds, bool runActions) {
    string auto66902994_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto66902994_val = UnitGetType(EventUnitProgressUnit());
    if (auto66902994_val == "MissileTurret") {
        if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
            UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/62DF0124"), StringExternal("Param/Value/85796E57"), StringExternal("Param/Value/73E2F5FA"));
            UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
        }
        else {
        }
    }
    else if (auto66902994_val == "EngineeringBay") {
        if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
            UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/375DF249"), StringExternal("Param/Value/D4649464"), StringExternal("Param/Value/1E2D895D"));
            UnitSetState(EventUnitProgressUnit(), c_unitStateTooltipable, true);
        }
        else {
        }
    }
    else if (auto66902994_val == "Bunker") {
        if ((libNtve_gf_DifficultyValueInt(1, 0, 0, 0) == 1)) {
            UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/1BEEEE4F"), StringExternal("Param/Value/44FEB281"), StringExternal("Param/Value/A6ED12DE"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewStructureBuilt_Init () {
    gt_NewStructureBuilt = TriggerCreate("gt_NewStructureBuilt_Func");
    TriggerAddEventUnitConstructProgress(gt_NewStructureBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stranded Rebel Marines Timing
//--------------------------------------------------------------------------------------------------
bool gt_StrandedRebelMarinesTiming_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(210.0, 130.0, 130.0, 130.0), c_timeGame);
    TriggerExecute(gt_RebelMarines01Intro, true, false);
    Wait(libNtve_gf_DifficultyValueFixed(230.0, 220.0, 220.0, 220.0), c_timeGame);
    TriggerExecute(gt_RebelMarines02Intro, true, false);
    Wait(305.0, c_timeGame);
    TriggerExecute(gt_RebelMarines03Intro, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrandedRebelMarinesTiming_Init () {
    gt_StrandedRebelMarinesTiming = TriggerCreate("gt_StrandedRebelMarinesTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 01 Intro
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines01Intro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Variable Initialization
    lv_dropship = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(gv_rebelMarinesBeacon01, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(499));
    UnitGroupAdd(gv_rebelMarines01, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(392)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(499));
    UnitGroupAdd(gv_rebelMarines01, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(395)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(499));
    UnitGroupAdd(gv_rebelMarines01, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(409)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(499));
    UnitGroupAdd(gv_rebelMarines01, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(410)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(499));
    UnitGroupAdd(gv_rebelMarines01, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(498)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_rebelMarines01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER01_USER);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), RegionGetCenter(RegionFromId(72)), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_RebelMarines01Rescued, true);
    TriggerEnable(gt_RebelMarines01Dead, true);
    TriggerExecute(gt_TransmissionRebelMarines01MaydayQ, true, true);
    if ((gv_rebelMarinesFound01 == false) && (libNtve_gf_UnitGroupIsDead(gv_rebelMarines01) == false)) {
        MinimapPing(PlayerGroupSingle(gv_pLAYER01_USER), RegionGetCenter(RegionFromId(72)), 6.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/DC769176"), null, RegionGetCenter(RegionFromId(72)));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", RegionGetCenter(RegionFromId(72)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_rebelMarinesPing1 = PingLastCreated();
        PingSetScale(gv_rebelMarinesPing1, 0.85);
        PingSetTooltip(gv_rebelMarinesPing1, StringExternal("Param/Value/51615F10"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines01Intro_Init () {
    gt_RebelMarines01Intro = TriggerCreate("gt_RebelMarines01Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 02 Intro
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines02Intro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(gv_rebelMarinesBeacon02, true);
    UnitSetState(UnitFromId(795), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(796), c_unitStateTargetable, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_pLAYER06_REBELS, PointFromId(903));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitGroupAdd(gv_rebelMarines02, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1149)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(904));
    UnitGroupAdd(gv_rebelMarines02, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(709)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(903));
    UnitGroupAdd(gv_rebelMarines02, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(901)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(904));
    UnitGroupAdd(gv_rebelMarines02, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(902)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_rebelMarines02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER01_USER);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_RebelMarines02Rescued, true);
    TriggerEnable(gt_RebelMarines02Dead, true);
    TriggerExecute(gt_TransmissionRebelMarines02MaydayQ, true, true);
    if ((gv_rebelMarinesFound02 == false) && (libNtve_gf_UnitGroupIsDead(gv_rebelMarines02) == false)) {
        MinimapPing(PlayerGroupSingle(gv_pLAYER01_USER), RegionGetCenter(RegionFromId(3)), 6.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/14F8338E"), null, RegionGetCenter(RegionFromId(3)));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", RegionGetCenter(RegionFromId(3)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_rebelMarinesPing2 = PingLastCreated();
        PingSetScale(gv_rebelMarinesPing2, 0.85);
        PingSetTooltip(gv_rebelMarinesPing2, StringExternal("Param/Value/4FB8BA12"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines02Intro_Init () {
    gt_RebelMarines02Intro = TriggerCreate("gt_RebelMarines02Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 03 Intro
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines03Intro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Variable Initialization
    lv_dropship = null;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(gv_rebelMarinesBeacon03, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(246)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(307)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(322)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(347)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(343)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", 0, gv_pLAYER06_REBELS, PointFromId(215));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitGroupAdd(gv_rebelMarines03, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(348)), c_orderQueueReplace);
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(gv_rebelMarines03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER01_USER);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), RegionGetCenter(RegionFromId(71)), 0.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_RebelMarines03Rescued, true);
    TriggerEnable(gt_RebelMarines03Dead, true);
    TriggerExecute(gt_TransmissionRebelMarines03MaydayQ, true, true);
    if ((gv_rebelMarinesFound03 == false) && (libNtve_gf_UnitGroupIsDead(gv_rebelMarines03) == false)) {
        MinimapPing(PlayerGroupSingle(gv_pLAYER01_USER), RegionGetCenter(RegionFromId(71)), 6.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/CAB93CB5"), null, RegionGetCenter(RegionFromId(71)));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER01_USER), "PingObjective", RegionGetCenter(RegionFromId(71)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_rebelMarinesPing3 = PingLastCreated();
        PingSetScale(gv_rebelMarinesPing3, 0.85);
        PingSetTooltip(gv_rebelMarinesPing3, StringExternal("Param/Value/474B29B5"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines03Intro_Init () {
    gt_RebelMarines03Intro = TriggerCreate("gt_RebelMarines03Intro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 01 Rescued
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines01Rescued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelMarines01Dead, false);
    gv_rebelFightersRescued=gv_rebelFightersRescued + 1;
    gv_rebelMarinesFound01 = true;
    PingDestroy(gv_rebelMarinesPing1);
    UnitKill(gv_rebelMarinesBeacon01);
    TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
    ObjectiveSetName(gv_objectiveRescue, (StringExternal("Param/Value/28341DB3") + IntToText(gv_rebelFightersRescued) + StringExternal("Param/Value/5A139B4F") + StringExternal("Param/Value/88CFB03A")));
    TriggerExecute(gt_TransmissionRebelMarines01RescuedQ, true, false);
    if ((gv_rebelFightersRescued == 3)) {
        TriggerExecute(gt_ObjectiveRescueComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines01Rescued_Init () {
    gt_RebelMarines01Rescued = TriggerCreate("gt_RebelMarines01Rescued_Func");
    TriggerEnable(gt_RebelMarines01Rescued, false);
    TriggerAddEventTimePeriodic(gt_RebelMarines01Rescued, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 02 Rescued
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines02Rescued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelMarines02Dead, false);
    gv_rebelFightersRescued=gv_rebelFightersRescued + 1;
    gv_rebelMarinesFound02 = true;
    PingDestroy(gv_rebelMarinesPing2);
    UnitKill(gv_rebelMarinesBeacon02);
    TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
    ObjectiveSetName(gv_objectiveRescue, (StringExternal("Param/Value/66738ACE") + IntToText(gv_rebelFightersRescued) + StringExternal("Param/Value/DBBC8F23") + StringExternal("Param/Value/85B6A1D8")));
    TriggerExecute(gt_TransmissionRebelMarines02RescuedQ, true, false);
    if ((gv_rebelFightersRescued == 3)) {
        TriggerExecute(gt_ObjectiveRescueComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines02Rescued_Init () {
    gt_RebelMarines02Rescued = TriggerCreate("gt_RebelMarines02Rescued_Func");
    TriggerEnable(gt_RebelMarines02Rescued, false);
    TriggerAddEventTimePeriodic(gt_RebelMarines02Rescued, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 03 Rescued
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines03Rescued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelMarines03Dead, false);
    gv_rebelFightersRescued=gv_rebelFightersRescued + 1;
    gv_rebelMarinesFound03 = true;
    PingDestroy(gv_rebelMarinesPing3);
    UnitKill(gv_rebelMarinesBeacon03);
    TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
    ObjectiveSetName(gv_objectiveRescue, (StringExternal("Param/Value/7B12E251") + IntToText(gv_rebelFightersRescued) + StringExternal("Param/Value/F88EB373") + StringExternal("Param/Value/DE63FD4D")));
    TriggerExecute(gt_TransmissionRebelMarines03RescuedQ, true, false);
    if ((gv_rebelFightersRescued == 3)) {
        TriggerExecute(gt_ObjectiveRescueComplete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines03Rescued_Init () {
    gt_RebelMarines03Rescued = TriggerCreate("gt_RebelMarines03Rescued_Func");
    TriggerEnable(gt_RebelMarines03Rescued, false);
    TriggerAddEventTimePeriodic(gt_RebelMarines03Rescued, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 01 Dead
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines01Dead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rebelMarines01, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_rebelMarinesPing1);
    UnitKill(gv_rebelMarinesBeacon01);
    TriggerEnable(gt_RebelMarines01Rescued, false);
    TriggerExecute(gt_ObjectiveRescueFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines01Dead_Init () {
    gt_RebelMarines01Dead = TriggerCreate("gt_RebelMarines01Dead_Func");
    TriggerEnable(gt_RebelMarines01Dead, false);
    TriggerAddEventUnitDied(gt_RebelMarines01Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 02 Dead
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines02Dead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rebelMarines02, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_rebelMarinesPing2);
    UnitKill(gv_rebelMarinesBeacon02);
    TriggerEnable(gt_RebelMarines02Rescued, false);
    TriggerExecute(gt_ObjectiveRescueFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines02Dead_Init () {
    gt_RebelMarines02Dead = TriggerCreate("gt_RebelMarines02Dead_Func");
    TriggerEnable(gt_RebelMarines02Dead, false);
    TriggerAddEventUnitDied(gt_RebelMarines02Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel Marines 03 Dead
//--------------------------------------------------------------------------------------------------
bool gt_RebelMarines03Dead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_rebelMarines03, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_rebelMarinesPing3);
    UnitKill(gv_rebelMarinesBeacon03);
    TriggerEnable(gt_RebelMarines03Rescued, false);
    TriggerExecute(gt_ObjectiveRescueFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelMarines03Dead_Init () {
    gt_RebelMarines03Dead = TriggerCreate("gt_RebelMarines03Dead_Func");
    TriggerEnable(gt_RebelMarines03Dead, false);
    TriggerAddEventUnitDied(gt_RebelMarines03Dead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Timers
//--------------------------------------------------------------------------------------------------
bool gt_StartTimers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_zergFirstAttackWaveTimer, libNtve_gf_DifficultyValueFixed(150.0, 70.0, 70.0, 70.0), false, c_timeGame);
    TimerStart(gv_evacuationTimer, (gv_sURVIVETIME * 60.0), false, c_timeGame);
    TimerStart(gv_tenMinuteWarning, ((gv_sURVIVETIME - 10.0) * 60.0), false, c_timeGame);
    TimerStart(gv_fiveMinuteWarning, ((gv_sURVIVETIME - 5.0) * 60.0), false, c_timeGame);
    TimerStart(gv_twoMinuteWarning, ((gv_sURVIVETIME - 2.0) * 60.0), false, c_timeGame);
    TimerStart(gv_oneMinuteWarning, ((gv_sURVIVETIME - 1.0) * 60.0), false, c_timeGame);
    TimerWindowCreate(gv_evacuationTimer, StringExternal("Param/Value/4B8241F4"), true, false);
    gv_evacuationTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_evacuationTimerWindow, StringToText("<min2/>:<sec2/>"));
    TimerWindowSetColor(gv_evacuationTimerWindow, c_timerWindowColorTime, Color(0.00, 100.00, 0.00), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTimers_Init () {
    gt_StartTimers = TriggerCreate("gt_StartTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER02_ZERG);
    AICampaignStart(gv_pLAYER03_ZERG);
    AICampaignStart(gv_pLAYER04_ZERG);
    TriggerExecute(gt_AttackWavesRedZergP02, true, false);
    TriggerExecute(gt_AttackWavesTealZergP03, true, false);
    TriggerExecute(gt_AttackWavesPurpleZergP04, true, false);
    TriggerExecute(gt_AIResearchHard, true, false);
    TriggerExecute(gt_AIResearchInsane, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start First Zerg Wave - Special
//--------------------------------------------------------------------------------------------------
bool gt_StartFirstZergWaveSpecial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    bool lv_bunkersLoaded;

    // Variable Initialization
    lv_point = null;
    lv_bunkersLoaded = false;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(28));
    gv_nydusWormP03 = UnitFromId(548);
    if ((UnitIsAlive(gv_nydusWormP03) == false)) {
        if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
            CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
        }
        else {
        }
        libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_pLAYER03_ZERG, lv_point);
        gv_nydusWormP03 = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
        SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
    }
    else {
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP03), c_animNameDefault, "Spell", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), gv_nydusWormP03, 0.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER03_ZERG, UnitGetPosition(gv_nydusWormP03));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(366)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(363)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, gv_pLAYER03_ZERG, UnitGetPosition(gv_nydusWormP03));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(855)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(363)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeAI);
    gf_FirstZergWaveAttackP03(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), 2.0, "Zergling");
    gf_FirstZergWaveAttackP03(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Zergling", "Roach"));
    gf_FirstZergWaveAttackP03(1, 0.0, "Zergling");
    gf_FirstZergWaveAttackP03(2, 1.0, "Zergling");
    TriggerExecute(gt_AlertFirstZergWave, true, false);
    MinimapPing(PlayerGroupAll(), PointFromId(509), 6.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/F29197A1"), null, PointFromId(509));
    CameraPan(gv_pLAYER01_USER, PointFromId(326), 1.5, -1, 20, false);
    gf_FirstZergWaveAttackP03(2, 2.0, "Zergling");
    Wait(2.0, c_timeAI);
    gf_FirstZergWaveAttackP03(2, 1.0, "Zergling");
    gf_FirstZergWaveAttackP03(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), 1.0, libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Zergling", "Hydralisk"));
    Wait(30.0, c_timeAI);
    TriggerExecute(gt_TipRepairQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFirstZergWaveSpecial_Init () {
    gt_StartFirstZergWaveSpecial = TriggerCreate("gt_StartFirstZergWaveSpecial_Func");
    TriggerAddEventTimer(gt_StartFirstZergWaveSpecial, gv_zergFirstAttackWaveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Red - Zerg P02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesRedZergP02_Func (bool testConds, bool runActions) {
    int auto74461568_n;
    int auto74461568_i;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER02_ZERG, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER02_ZERG, PointFromId(264));
    Wait(libNtve_gf_DifficultyValueFixed(260.0, 180.0, 180.0, 180.0), c_timeAI);
    TriggerExecute(gt_ZergP02EarlyNydusWave, true, false);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(14, 14, 13, 13, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 3, "Hydralisk");
    AIAttackWaveSend(gv_pLAYER02_ZERG, 230, true);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(14, 14, 16, 20, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 2, 3, "Roach");
    AIAttackWaveSend(gv_pLAYER02_ZERG, 240, false);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(14, 14, 20, 22, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 2, 2, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 1, "Baneling");
    AIAttackWaveSend(gv_pLAYER02_ZERG, 250, true);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(18, 18, 17, 15, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 2, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 1, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Baneling");
    AIAttackWaveSend(gv_pLAYER02_ZERG, libNtve_gf_DifficultyValueInt(150, 180, 180, 180), true);
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 0.0, 0.0, 0.0), c_timeAI);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(12, 12, 16, 20, "Zergling");
    AIAttackWaveSend(gv_pLAYER02_ZERG, 140, false);
    AIAttackWaveAddWaypoint(gv_pLAYER02_ZERG, PointFromId(378), false);
    AIAttackWaveAddUnits4(8, 8, 17, 19, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 3, 1, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 3, "Baneling");
    AIAttackWaveSend(gv_pLAYER02_ZERG, libNtve_gf_DifficultyValueInt(145, 150, 150, 150), true);
    Wait(libNtve_gf_DifficultyValueFixed(0.0, 75.0, 75.0, 75.0), c_timeAI);
    auto74461568_n = libNtve_gf_DifficultyValueInt(6, 8, 8, 8);
    auto74461568_i = 1;
    while (auto74461568_i <= auto74461568_n) {
        if ((gv_gameOver == false)) {
            TriggerExecute(gt_ZergP02LateNydusWave, true, false);
            Wait(libNtve_gf_DifficultyValueFixed(25.0, 20.0, 20.0, 20.0), c_timeAI);
        }
        else {
        }
        auto74461568_i = auto74461568_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesRedZergP02_Init () {
    gt_AttackWavesRedZergP02 = TriggerCreate("gt_AttackWavesRedZergP02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Teal - Zerg P03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesTealZergP03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER03_ZERG, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER03_ZERG, PointFromId(261));
    TriggerExecute(gt_TransmissionTychusIncomingAirUnitsQ, true, false);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(362), false);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
    AIAttackWaveAddUnits4(0, 3, 4, 6, "Mutalisk");
    AIAttackWaveSend(gv_pLAYER03_ZERG, 260, true);
    if (((PlayerDifficulty(1) <= 2) == true)) {
        AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(361), false);
        AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
        AIAttackWaveAddUnits4(0, 3, 0, 0, "Mutalisk");
        AIAttackWaveSend(gv_pLAYER03_ZERG, 330, true);
    }
    else {
        if (((PlayerDifficulty(1) == 3) == true)) {
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(594), false);
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
            AIAttackWaveAddUnits4(0, 0, 3, 0, "Mutalisk");
            AIAttackWaveSend(gv_pLAYER03_ZERG, 330, true);
        }
        else {
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(594), false);
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
            AIAttackWaveAddUnits4(0, 0, 0, 3, "Mutalisk");
            AIAttackWaveSend(gv_pLAYER03_ZERG, 330, false);
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(651), false);
            AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
            AIAttackWaveAddUnits4(0, 0, 0, 4, "Mutalisk");
            AIAttackWaveSend(gv_pLAYER03_ZERG, 330, true);
        }
    }
    if (((PlayerDifficulty(1) <= 2) == true)) {
        AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(360), false);
    }
    else {
        AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(651), false);
    }
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
    AIAttackWaveAddUnits4(0, 4, 3, 4, "Mutalisk");
    AIAttackWaveSend(gv_pLAYER03_ZERG, 200, false);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(361), false);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
    AIAttackWaveAddUnits4(0, 0, 3, 4, "Mutalisk");
    AIAttackWaveSend(gv_pLAYER03_ZERG, 200, true);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(362), false);
    AIAttackWaveAddWaypoint(gv_pLAYER03_ZERG, PointFromId(363), false);
    AIAttackWaveAddUnits4(0, 5, 6, 8, "Mutalisk");
    AIAttackWaveSend(gv_pLAYER03_ZERG, 310, true);
    Wait(libNtve_gf_DifficultyValueFixed(50.0, 50.0, 30.0, 30.0), c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 5, 0, 0), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(4)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 4, 2), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(62)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 0, 4), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(63)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    Wait(libNtve_gf_DifficultyValueFixed(15.0, 15.0, 25.0, 25.0), c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 5, 4, 7), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(4)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 0, 1), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(62)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 0, 3, 2), "Mutalisk", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(63)));
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesTealZergP03_Init () {
    gt_AttackWavesTealZergP03 = TriggerCreate("gt_AttackWavesTealZergP03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Purple - Zerg P04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesPurpleZergP04_Func (bool testConds, bool runActions) {
    int auto24B82078_n;
    int auto24B82078_i;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER04_ZERG, PlayerGroupSingle(gv_pLAYER01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER04_ZERG, PointFromId(257));
    Wait(libNtve_gf_DifficultyValueFixed(400.0, 320.0, 320.0, 320.0), c_timeAI);
    TriggerExecute(gt_ZergP04EarlyNydusWave, true, false);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(15, 15, 26, 20, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 1, 0, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 3, 5, "Roach");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 180, true);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(0, 0, 15, 25, "Zergling");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 170, false);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(5, 5, 10, 8, "Zergling");
    AIAttackWaveAddUnits4(2, 2, 2, 3, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 1, 2, "Roach");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 220, true);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(14, 14, 8, 4, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 2, 0, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 4, "Baneling");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 180, false);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(14, 14, 16, 20, "Zergling");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 190, true);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(0, 0, 9, 12, "Zergling");
    AIAttackWaveAddUnits4(0, 0, 2, 1, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 0, 3, "Baneling");
    AIAttackWaveSend(gv_pLAYER04_ZERG, 80, false);
    AIAttackWaveAddWaypoint(gv_pLAYER04_ZERG, PointFromId(379), false);
    AIAttackWaveAddUnits4(20, 20, 22, 7, "Zergling");
    AIAttackWaveAddUnits4(1, 1, 0, 2, "Hydralisk");
    AIAttackWaveAddUnits4(0, 0, 2, 2, "Roach");
    AIAttackWaveAddUnits4(0, 0, 0, 2, "Baneling");
    AIAttackWaveSend(gv_pLAYER04_ZERG, libNtve_gf_DifficultyValueInt(105, 140, 140, 140), true);
    Wait(libNtve_gf_DifficultyValueFixed(0.0, 45.0, 45.0, 45.0), c_timeAI);
    auto24B82078_n = libNtve_gf_DifficultyValueInt(6, 8, 8, 8);
    auto24B82078_i = 1;
    while (auto24B82078_i <= auto24B82078_n) {
        if ((gv_gameOver == false)) {
            TriggerExecute(gt_ZergP04LateNydusWave, true, false);
            Wait(libNtve_gf_DifficultyValueFixed(25.0, 20.0, 20.0, 20.0), c_timeAI);
        }
        else {
        }
        auto24B82078_i = auto24B82078_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesPurpleZergP04_Init () {
    gt_AttackWavesPurpleZergP04 = TriggerCreate("gt_AttackWavesPurpleZergP04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Research Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIResearchHard_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(210.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(330.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(180.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "OrganicCarapace", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResearchHard_Init () {
    gt_AIResearchHard = TriggerCreate("gt_AIResearchHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Research Insane
//--------------------------------------------------------------------------------------------------
bool gt_AIResearchInsane_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1))) {
            return false;
        }

        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(210.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(330.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CentrificalHooks", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_zergPlayers);
    while (!PlayerGroupLoopDone()) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResearchInsane_Init () {
    gt_AIResearchInsane = TriggerCreate("gt_AIResearchInsane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P02 - Early Nydus Wave
//--------------------------------------------------------------------------------------------------
bool gt_ZergP02EarlyNydusWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ReviveP02NydusWorm, true, false);
    Wait(3.7, c_timeGame);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Roach"), gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Hydralisk", "Hydralisk", "Hydralisk"), gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 2, 1), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP02EarlyNydusWave_Init () {
    gt_ZergP02EarlyNydusWave = TriggerCreate("gt_ZergP02EarlyNydusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Early Nydus Wave
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04EarlyNydusWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ReviveP04NydusWorm, true, false);
    Wait(3.7, c_timeGame);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(3, 3, 3, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), libNtve_gf_DifficultyValueUnitType("Zergling", "Hydralisk", "Hydralisk", "Roach"), gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04EarlyNydusWave_Init () {
    gt_ZergP04EarlyNydusWave = TriggerCreate("gt_ZergP04EarlyNydusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P02 - Late Nydus Wave
//--------------------------------------------------------------------------------------------------
bool gt_ZergP02LateNydusWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ReviveP02NydusWorm, true, false);
    Wait(3.7, c_timeGame);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 2, 2, 3), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(3, 3, 3, 4), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 2, 3, 3), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 2, 1), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 3, 1), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 2.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 1.0);
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Zergling", gv_pLAYER02_ZERG, gv_nydusWormP02, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP02LateNydusWave_Init () {
    gt_ZergP02LateNydusWave = TriggerCreate("gt_ZergP02LateNydusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - Late Nydus Wave
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04LateNydusWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ReviveP04NydusWorm, true, false);
    Wait(3.7, c_timeGame);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 3, 3, 4), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 3, 3, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 1, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP02West(libNtve_gf_DifficultyValueInt(2, 2, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Roach", "Baneling"), gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 3, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 1, 2), "Hydralisk", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 3, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 2.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 2, 3), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 1, 1, 1), libNtve_gf_DifficultyValueUnitType("Zergling", "Zergling", "Hydralisk", "Roach"), gv_pLAYER04_ZERG, gv_nydusWormP04, 1.0);
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(2, 2, 1, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, libNtve_gf_DifficultyValueFixed(1.5, 1.0, 1.0, 1.0));
    gf_SpawnNydusUnitsP04East(libNtve_gf_DifficultyValueInt(1, 2, 1, 2), "Zergling", gv_pLAYER04_ZERG, gv_nydusWormP04, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04LateNydusWave_Init () {
    gt_ZergP04LateNydusWave = TriggerCreate("gt_ZergP04LateNydusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P02 - End Game Nydus Worms
//--------------------------------------------------------------------------------------------------
bool gt_ZergP02EndGameNydusWorms_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(32)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, RegionGetCenter(RegionFromId(32)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(33)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, RegionGetCenter(RegionFromId(33)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(34)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, RegionGetCenter(RegionFromId(34)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP02EndGameNydusWorms_Init () {
    gt_ZergP02EndGameNydusWorms = TriggerCreate("gt_ZergP02EndGameNydusWorms_Func");
    TriggerAddEventTimer(gt_ZergP02EndGameNydusWorms, gv_oneMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P03 - End Game Nydus Worms
//--------------------------------------------------------------------------------------------------
bool gt_ZergP03EndGameNydusWorms_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(35)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(35)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(36)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(36)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(37)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(37)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(38)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER03_ZERG, RegionGetCenter(RegionFromId(38)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP03EndGameNydusWorms_Init () {
    gt_ZergP03EndGameNydusWorms = TriggerCreate("gt_ZergP03EndGameNydusWorms_Func");
    TriggerAddEventTimer(gt_ZergP03EndGameNydusWorms, gv_oneMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P04 - End Game Nydus Worms
//--------------------------------------------------------------------------------------------------
bool gt_ZergP04EndGameNydusWorms_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(39)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER04_ZERG, RegionGetCenter(RegionFromId(39)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(46)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER04_ZERG, RegionGetCenter(RegionFromId(46)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(49)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER04_ZERG, RegionGetCenter(RegionFromId(49)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(RegionFromId(53)), 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER04_ZERG, RegionGetCenter(RegionFromId(53)));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP04EndGameNydusWorms_Init () {
    gt_ZergP04EndGameNydusWorms = TriggerCreate("gt_ZergP04EndGameNydusWorms_Func");
    TriggerAddEventTimer(gt_ZergP04EndGameNydusWorms, gv_oneMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive P02 Nydus Worm
//--------------------------------------------------------------------------------------------------
bool gt_ReviveP02NydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusWormP02) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(22));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, lv_point);
    gv_nydusWormP02 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP02), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP02, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveP02NydusWorm_Init () {
    gt_ReviveP02NydusWorm = TriggerCreate("gt_ReviveP02NydusWorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive P04 Nydus Worm
//--------------------------------------------------------------------------------------------------
bool gt_ReviveP04NydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_nydusWormP04) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = RegionGetCenter(RegionFromId(29));
    if ((RegionContainsPoint(RegionCircle(lv_point, 10.0), CameraGetTarget(gv_pLAYER01_USER)) == true) && (gv_gameOver == false)) {
        CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER04_ZERG, lv_point);
    gv_nydusWormP04 = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWormP04), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), gv_nydusWormP04, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveP04NydusWorm_Init () {
    gt_ReviveP04NydusWorm = TriggerCreate("gt_ReviveP04NydusWorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER02_ZERG, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER03_ZERG, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER04_ZERG, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER02_ZERG, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER03_ZERG, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER04_ZERG, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER01_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCombatIndicator = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombat_Init () {
    gt_PlayerIsInCombat = TriggerCreate("gt_PlayerIsInCombat_Func");
    TriggerAddEventUnitStartedAttack(gt_PlayerIsInCombat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Is In Combat Indicator Diminish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsInCombatIndicatorDiminish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_inCombatIndicator > 0)) {
        gv_inCombatIndicator = (gv_inCombatIndicator - 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsInCombatIndicatorDiminish_Init () {
    gt_PlayerIsInCombatIndicatorDiminish = TriggerCreate("gt_PlayerIsInCombatIndicatorDiminish_Func");
    TriggerAddEventTimePeriodic(gt_PlayerIsInCombatIndicatorDiminish, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Call For Retreat Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCallForRetreatQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeredPoint;

    // Variable Initialization
    lv_triggeredPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER01_USER))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Bunker", gv_pLAYER01_USER, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_triggeredPoint = UnitGetPosition(EventUnit());
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/2365FCD3"), null, lv_triggeredPoint);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Tychus00009", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Tychus00009", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCallForRetreatQ_Init () {
    gt_TransmissionCallForRetreatQ = TriggerCreate("gt_TransmissionCallForRetreatQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionCallForRetreatQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Zerg Wave Incoming! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstZergWaveIncomingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Marine100008", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine100008", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstZergWaveIncomingQ_Init () {
    gt_TransmissionFirstZergWaveIncomingQ = TriggerCreate("gt_TransmissionFirstZergWaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Tychus - Incoming Air Units Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTychusIncomingAirUnitsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(220.0, c_timeGame);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_gameOver == false) && (gv_inCinematic == false)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor03Tychus00013", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Tychus00013", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicMain3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTychusIncomingAirUnitsQ_Init () {
    gt_TransmissionTychusIncomingAirUnitsQ = TriggerCreate("gt_TransmissionTychusIncomingAirUnitsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 01 Mayday! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines01MaydayQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerGetExecCount(gt_RebelMarines01Rescued) == 0)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor03Marine700003", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine700003", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines01MaydayQ_Init () {
    gt_TransmissionRebelMarines01MaydayQ = TriggerCreate("gt_TransmissionRebelMarines01MaydayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 02  Mayday! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines02MaydayQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerGetExecCount(gt_RebelMarines02Rescued) == 0)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor03Marine800001", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine800001", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines02MaydayQ_Init () {
    gt_TransmissionRebelMarines02MaydayQ = TriggerCreate("gt_TransmissionRebelMarines02MaydayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 03 Mayday! Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines03MaydayQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerGetExecCount(gt_RebelMarines03Rescued) == 0)) {
        TriggerQueueEnter();
        libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
        // Transmission - SoundLink("TRaynor03Marine500005", 0)
        libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine500005", -1), c_transmissionDurationAdd, 0.0, true);
        libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
        TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines03MaydayQ_Init () {
    gt_TransmissionRebelMarines03MaydayQ = TriggerCreate("gt_TransmissionRebelMarines03MaydayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 01 Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines01RescuedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rebelMarines01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/252F3104"), null, gv_rebelMarinesBeacon01);
    UnitGroupClear(gv_rebelMarines01);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Marine700004", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine700004", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines01RescuedQ_Init () {
    gt_TransmissionRebelMarines01RescuedQ = TriggerCreate("gt_TransmissionRebelMarines01RescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 02  Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines02RescuedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rebelMarines02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/28F3F94C"), null, gv_rebelMarinesBeacon02);
    UnitGroupClear(gv_rebelMarines02);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Marine800002", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine800002", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines02RescuedQ_Init () {
    gt_TransmissionRebelMarines02RescuedQ = TriggerCreate("gt_TransmissionRebelMarines02RescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Rebel Marines 03 Rescued Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionRebelMarines03RescuedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_rebelMarines03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    UIAlertUnit("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/6FEBAEC8"), null, gv_rebelMarinesBeacon03);
    UnitGroupClear(gv_rebelMarines03);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Marine500016", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Marine500016", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionRebelMarines03RescuedQ_Init () {
    gt_TransmissionRebelMarines03RescuedQ = TriggerCreate("gt_TransmissionRebelMarines03RescuedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - 10 Minute Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission10MinuteWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Raynor00019", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Raynor00019", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C95BAC98"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission10MinuteWarningQ_Init () {
    gt_Transmission10MinuteWarningQ = TriggerCreate("gt_Transmission10MinuteWarningQ_Func");
    TriggerAddEventTimer(gt_Transmission10MinuteWarningQ, gv_tenMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - 5 Minute Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_Transmission5MinuteWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Raynor00017", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Raynor00017", -1), c_transmissionDurationAdd, 1.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/6C654A08"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission5MinuteWarningQ_Init () {
    gt_Transmission5MinuteWarningQ = TriggerCreate("gt_Transmission5MinuteWarningQ_Func");
    TriggerAddEventTimer(gt_Transmission5MinuteWarningQ, gv_fiveMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Last Minute Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastMinuteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    // Transmission - SoundLink("TRaynor03Horner00006", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Horner00006", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TRaynor03Raynor00007", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Raynor00007", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastMinuteQ_Init () {
    gt_TransmissionLastMinuteQ = TriggerCreate("gt_TransmissionLastMinuteQ_Func");
    TriggerAddEventTimer(gt_TransmissionLastMinuteQ, gv_oneMinuteWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Story Mode Q
//--------------------------------------------------------------------------------------------------
bool gt_TipStoryModeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateStorymodeTips();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipStoryModeQ_Init () {
    gt_TipStoryModeQ = TriggerCreate("gt_TipStoryModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Bunker Q
//--------------------------------------------------------------------------------------------------
bool gt_TipBunkerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor03_Bunker", 2, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_CreateBunkerPingsandTooltips, true, false);
        TriggerEnable(gt_ShowBunkerTextTags, true);
        Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipBunkerQ_Init () {
    gt_TipBunkerQ = TriggerCreate("gt_TipBunkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Reactor Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReactorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor03_Reactor", 2, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReactorQ_Init () {
    gt_TipReactorQ = TriggerCreate("gt_TipReactorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Engineering Bay Q
//--------------------------------------------------------------------------------------------------
bool gt_TipEngineeringBayQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor03_EngineeringBay", 2, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipEngineeringBayQ_Init () {
    gt_TipEngineeringBayQ = TriggerCreate("gt_TipEngineeringBayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Missile Turret Q
//--------------------------------------------------------------------------------------------------
bool gt_TipMissileTurretQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor03_MissileTurret", 2, PlayerGroupAll());
    Wait(libCamp_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipMissileTurretQ_Init () {
    gt_TipMissileTurretQ = TriggerCreate("gt_TipMissileTurretQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Repair Q
//--------------------------------------------------------------------------------------------------
bool gt_TipRepairQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerBunkers;
    unit lv_damagedBunker;
    point lv_damagedPoint;

    // Variable Initialization
    lv_playerBunkers = UnitGroupEmpty();
    lv_damagedBunker = null;
    lv_damagedPoint = null;

    // Conditions
    if (testConds) {
        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerDifficulty(gv_pLAYER01_USER) != 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true) && (libNtve_gf_UnitIsUnderConstruction(UnitGroupLoopCurrent()) == false) && (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
                lv_damagedBunker = UnitGroupLoopCurrent();
                lv_damagedPoint = PointWithOffset(UnitGetPosition(lv_damagedBunker), 0.0, -4.0);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        if ((gf_PlayerIsInCombat(gv_pLAYER01_USER) == false) && (lv_damagedBunker != null)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_pLAYER01_USER, PointFromId(440));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_damagedPoint), c_orderQueueReplace);
            TriggerQueueEnter();
            libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
            libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
            // Transmission - SoundLink("TRaynor03Raynor00011", 0)
            libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Raynor00011", -1), c_transmissionDurationAdd, 0.0, true);
            libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
            UIAlertPoint("Trigger", gv_pLAYER01_USER, StringExternal("Param/Value/6C722AC4"), null, PointWithOffset(lv_damagedPoint, 0.0, 4.0));
            MinimapPing(PlayerGroupAll(), PointWithOffset(lv_damagedPoint, 0.0, 4.0), 6.0, Color(0.00, 100.00, 0.00));
            libCamp_gf_CreateTipFromConversationState("StoryTips|Raynor03_Repair", 3, PlayerGroupAll());
            Wait(libCamp_gv_campaignHintDelay, c_timeReal);
            TriggerQueueExit();
            break;
        }
        else {
            UnitGroupClear(lv_playerBunkers);
            lv_damagedBunker = null;
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRepairQ_Init () {
    gt_TipRepairQ = TriggerCreate("gt_TipRepairQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - 4 Hatcheries Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Achievement4HatcheriesDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hatcheriesDestroyed=gv_hatcheriesDestroyed + 1;
    if ((gv_hatcheriesDestroyed >= 4) && (libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1) && (gv_hatcheryAchievementUnlocked == false)) {
        gv_hatcheryAchievementUnlocked = true;
        AchievementAward(gv_pLAYER01_USER, "TRaynor03_3");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Achievement4HatcheriesDestroyed_Init () {
    gt_Achievement4HatcheriesDestroyed = TriggerCreate("gt_Achievement4HatcheriesDestroyed_Func");
    TriggerAddEventUnitDied(gt_Achievement4HatcheriesDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Hold Out Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryHoldOutCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_structuresLostAndSalvaged = (PlayerScoreValueGetAsInt(gv_pLAYER01_USER, "StructuresLostCount") + PlayerScoreValueGetAsInt(gv_pLAYER01_USER, "StructuresFriendlyFireCount") + PlayerScoreValueGetAsInt(gv_pLAYER01_USER, "StructuresSalvagedCount"));
    gv_gameOver = true;
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "TerranBuildingBurnDown", 1);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 0, 1);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ObjectiveHoldOutComplete, true, true);
    libCamp_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryHoldOutCompleted_Init () {
    gt_VictoryHoldOutCompleted = TriggerCreate("gt_VictoryHoldOutCompleted_Func");
    TriggerAddEventTimer(gt_VictoryHoldOutCompleted, gv_evacuationTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveHoldOut) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescue) == c_objectiveStateCompleted)) {
        AchievementAward(gv_pLAYER01_USER, "TRaynor03_1");
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_structuresLostAndSalvaged == 0)) {
        AchievementAward(gv_pLAYER01_USER, "TRaynor03_2");
    }
    else {
    }
    VictoryPanelAddAchievement("TRaynor03_1");
    VictoryPanelAddAchievement("TRaynor03_2");
    VictoryPanelAddAchievement("TRaynor03_3");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/9D72E7AD"), StringExternal("Param/Value/FF59296E"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/24D71291"), IntToText(gv_structuresLostAndSalvaged));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/7243E536"), (IntToText(gv_hatcheriesDestroyed) + StringExternal("Param/Value/CAF01B4A")));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AA88D3B3"), (IntToText(gv_rebelFightersRescued) + StringExternal("Param/Value/92440993")));
    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libCamp_gf_DisplayCampaignMessage(PlayerGroupAll(), 0, StringExternal("Param/Value/C27EDDD5"), 0);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCamp_gf_EndCampaignMission(gv_pLAYER01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    libCamp_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hold Out Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/58ACACB4"), StringExternal("Param/Value/E68CA25F"), c_objectiveStateActive, true);
    gv_objectiveHoldOut = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(5, ObjectiveLastCreated(), StringExternal("Param/Value/F4091673"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_StartTimers, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutCreateQ_Init () {
    gt_ObjectiveHoldOutCreateQ = TriggerCreate("gt_ObjectiveHoldOutCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Hold Out Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHoldOutCreateQ, true, false);
    ObjectiveSetState(gv_objectiveHoldOut, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutComplete_Init () {
    gt_ObjectiveHoldOutComplete = TriggerCreate("gt_ObjectiveHoldOutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/F805BF8E") + IntToText(gv_rebelFightersRescued) + StringExternal("Param/Value/E7E8684A") + StringExternal("Param/Value/62BDD509")), StringExternal("Param/Value/A1EE5B7F"), c_objectiveStateActive, false);
    gv_objectiveRescue = ObjectiveLastCreated();
    libCamp_gf_RegisterMissionObjective(6, ObjectiveLastCreated(), StringExternal("Param/Value/DD79C5B5"));
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueCreateQ_Init () {
    gt_ObjectiveRescueCreateQ = TriggerCreate("gt_ObjectiveRescueCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRescue, c_objectiveStateCompleted);
    Wait(libCamp_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueComplete_Init () {
    gt_ObjectiveRescueComplete = TriggerCreate("gt_ObjectiveRescueComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueCreateQ, true, false);
    ObjectiveSetState(gv_objectiveRescue, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueFailed_Init () {
    gt_ObjectiveRescueFailed = TriggerCreate("gt_ObjectiveRescueFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    gv_inCinematic = true;
    gv_gameOver = true;
    UnitRemove(UnitFromId(788));
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone1;
    unit lv_drone2;

    // Variable Initialization
    lv_drone1 = null;
    lv_drone2 = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER01_USER, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER02_ZERG, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER03_ZERG, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER04_ZERG, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER05_ZERG_NOAI, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    CreepModify(PointFromId(261), 50.0, false, false);
    GameTimeOfDaySet("18:00:00");
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_BriefingCleanUpZerg, true);
    TriggerExecute(gt_BriefingZergSpawn, true, false);
    TriggerExecute(gt_BriefingDropPodsDrones, true, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(178), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(197), SoundLengthSync(SoundLink("TRaynor03BriefingAdjutant00006", -1)), -1, 10, true);
    TriggerExecute(gt_BriefingDropPodsZerglings, true, false);
    MovieStartRecording("Briefing_Video_TRaynor03_02");
    SoundPlay(SoundLink("TRaynor03BriefingAdjutant00006", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingAdjutant00006", -1)), c_timeGame);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(197), SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00007", -1)), -1, 10, true);
    SoundPlay(SoundLink("TRaynor03BriefingRaynor00007", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00007", -1)), c_timeGame);
    Wait((0.5 * (SoundLengthSync(SoundLink("TRaynor03BriefingAdjutant00006", 0)) + SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00007", 0)))), c_timeGame);
    Wait(5.0, c_timeGame);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_bunkerBaseEastTextTag);
    TextTagDestroy(gv_bunkerBaseWestTextTag);
    TextTagDestroy(gv_bunkerBridgeEastTextTag);
    TextTagDestroy(gv_bunkerBridgeWestTextTag);
    libNtve_gf_KillModel(gv_bunkerBaseEastPing);
    libNtve_gf_KillModel(gv_bunkerBaseWestPing);
    libNtve_gf_KillModel(gv_bunkerBridgeEastPing);
    libNtve_gf_KillModel(gv_bunkerBridgeWestPing);
    UnitGroupLoopBegin(UnitGroup("MissileTurret", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(4, "Marine", 0, gv_pLAYER01_USER, RegionGetCenter(RegionFromId(30)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(470)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(472)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(4, "Marine", 0, gv_pLAYER01_USER, RegionGetCenter(RegionFromId(30)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(470)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(73)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "FlatbedTruck", 0, gv_pLAYER06_REBELS, RegionGetCenter(RegionFromId(30)));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "ArtifactPiece1", "Hardpoint");
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(470)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(268)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(142)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(4, "Marine", 0, gv_pLAYER01_USER, RegionGetCenter(RegionFromId(21)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(471)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(214)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(4, "Marine", 0, gv_pLAYER01_USER, RegionGetCenter(RegionFromId(21)));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(471)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(241)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(117), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(627), 12.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor03_03");
    TriggerExecute(gt_BriefingPingScene, true, false);
    SoundPlay(SoundLink("TRaynor03BriefingRaynor00008", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00008", 0)), c_timeGame);
    TriggerExecute(gt_BriefingPingCleanup, true, false);
    SoundPlay(SoundLink("TRaynor03BriefingRaynor00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00009", 0)), c_timeGame);
    Wait((0.5 * ((SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00009", 0)) + SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00008", 0))) + 0.0)), c_timeGame);
    Wait(5.0, c_timeGame);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("FlatbedTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER01_USER, PointFromId(507));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, UnitFromId(13)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER01_USER, PointFromId(390));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, UnitFromId(13)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER01_USER, PointFromId(514));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, UnitFromId(13)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER01_USER, PointFromId(416));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, UnitFromId(13)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(515), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(516), 5.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_TRaynor03_04");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "RainEmitterMedium", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    SoundPlay(SoundLink("TRaynor03BriefingTychus00010", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingTychus00010", 0)), c_timeGame);
    SoundPlay(SoundLink("TRaynor03BriefingRaynor00011", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00011", 0)), c_timeGame);
    Wait((0.5 * ((0.0 + SoundLengthSync(SoundLink("TRaynor03BriefingTychus00010", 0))) + SoundLengthSync(SoundLink("TRaynor03BriefingRaynor00011", 0)))), c_timeGame);
    Wait(5.0, c_timeGame);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BriefingZerg1Behavior(1, "Zergling", 1.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(2, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 0.5);
    gf_BriefingZerg2Behavior(3, "Zergling", 0.5);
    gf_BriefingZerg1Behavior(3, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(1, "Zergling", 1.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(2, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 0.5);
    gf_BriefingZerg2Behavior(3, "Zergling", 0.5);
    gf_BriefingZerg1Behavior(3, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(1, "Zergling", 1.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(2, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 0.5);
    gf_BriefingZerg2Behavior(3, "Zergling", 0.5);
    gf_BriefingZerg1Behavior(3, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(1, "Zergling", 1.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(2, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(2, "Zergling", 0.5);
    gf_BriefingZerg2Behavior(3, "Zergling", 0.5);
    gf_BriefingZerg1Behavior(3, "Zergling", 0.0);
    gf_BriefingZerg2Behavior(1, "Hydralisk", 0.5);
    gf_BriefingZerg1Behavior(2, "Zergling", 1.0);
    gf_BriefingZerg1Behavior(1, "Hydralisk", 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergSpawn_Init () {
    gt_BriefingZergSpawn = TriggerCreate("gt_BriefingZergSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Drop Pods - Drones
//--------------------------------------------------------------------------------------------------
bool gt_BriefingDropPodsDrones_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone1;
    unit lv_drone2;

    // Variable Initialization
    lv_drone1 = null;
    lv_drone2 = null;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(111));
    lv_drone1 = UnitLastCreated();
    libCamp_gf_CreateDropPod(1, PointFromId(106), UnitLastCreatedGroup(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Drone", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(111));
    lv_drone2 = UnitLastCreated();
    libCamp_gf_CreateDropPod(1, PointFromId(780), UnitLastCreatedGroup(), false);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lv_drone1, OrderTargetingPoint(AbilityCommand("ZergBuild", 0), PointFromId(784)), c_orderQueueReplace);
    UnitIssueOrder(lv_drone2, OrderTargetingPoint(AbilityCommand("ZergBuild", 0), PointFromId(782)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingDropPodsDrones_Init () {
    gt_BriefingDropPodsDrones = TriggerCreate("gt_BriefingDropPodsDrones_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Drop Pods - Zerglings
//--------------------------------------------------------------------------------------------------
bool gt_BriefingDropPodsZerglings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(111));
    libCamp_gf_CreateDropPod(1, PointFromId(785), UnitLastCreatedGroup(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(111));
    libCamp_gf_CreateDropPod(1, PointFromId(244), UnitLastCreatedGroup(), false);
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER05_ZERG_NOAI, PointFromId(111));
    libCamp_gf_CreateDropPod(1, PointFromId(253), UnitLastCreatedGroup(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingDropPodsZerglings_Init () {
    gt_BriefingDropPodsZerglings = TriggerCreate("gt_BriefingDropPodsZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Clean Up Zerg
//--------------------------------------------------------------------------------------------------
bool gt_BriefingCleanUpZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER05_ZERG_NOAI))) {
            return false;
        }

        if (!((gv_inCinematic == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingCleanUpZerg_Init () {
    gt_BriefingCleanUpZerg = TriggerCreate("gt_BriefingCleanUpZerg_Func");
    TriggerEnable(gt_BriefingCleanUpZerg, false);
    TriggerAddEventUnitRegion(gt_BriefingCleanUpZerg, null, RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Ping Scene
//--------------------------------------------------------------------------------------------------
bool gt_BriefingPingScene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pingActorBunkerEast = libNtve_gf_AttachModelToUnit(UnitFromId(291), "BriefingUnitSelect", "Center");
    Wait(0.5, c_timeGame);
    gv_pingActorBunkerWest = libNtve_gf_AttachModelToUnit(UnitFromId(298), "BriefingUnitSelect", "Center");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingPingScene_Init () {
    gt_BriefingPingScene = TriggerCreate("gt_BriefingPingScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Ping Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_BriefingPingCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_pingActorBunkerEast);
    libNtve_gf_KillModel(gv_pingActorBunkerWest);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingPingCleanup_Init () {
    gt_BriefingPingCleanup = TriggerCreate("gt_BriefingPingCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_inCinematic = true;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER01_USER);
    PlayerSetState(gv_pLAYER01_USER, c_playerStateXPGain, false);
    GameSetToDLighting("MarSaraCampaignDay");
    GameTimeOfDaySet("12:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionPlayableMap(), "RainEmitterMedium", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
    TextTagShow(gv_bunkerBridgeEastTextTag, PlayerGroupAll(), false);
    TextTagShow(gv_bunkerBridgeWestTextTag, PlayerGroupAll(), false);
    TextTagShow(gv_bunkerBaseEastTextTag, PlayerGroupAll(), false);
    TextTagShow(gv_bunkerBaseWestTextTag, PlayerGroupAll(), false);
    libNtve_gf_KillModel(gv_bunkerBridgeWestPing);
    libNtve_gf_KillModel(gv_bunkerBridgeEastPing);
    libNtve_gf_KillModel(gv_bunkerBaseWestPing);
    libNtve_gf_KillModel(gv_bunkerBaseEastPing);
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_pLAYER01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitClearInfoText(UnitGroupLoopCurrent());
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Hut", gv_pLAYER09_COLONISTS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER02_ZERG, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER03_ZERG, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER04_ZERG, RegionFromId(74), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(69), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UnitSetPosition(UnitFromId(258), PointFromId(157), false);
        UnitIssueOrder(UnitFromId(258), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(69))), c_orderQueueReplace);
    }
    else {
    }
    CreepModify(PointFromId(511), 8.0, true, true);
    CreepModify(PointFromId(668), 8.0, true, true);
    CreepModify(PointFromId(684), 8.0, true, true);
    CreepModify(PointFromId(673), 8.0, true, true);
    CreepModify(PointFromId(701), 8.0, true, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawler", 0, gv_pLAYER02_ZERG, PointFromId(772));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawler", 0, gv_pLAYER02_ZERG, PointFromId(767));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    int auto0A382049_n;
    int auto0A382049_i;
    int auto243EB627_n;
    int auto243EB627_i;
    int autoF0DF740E_n;
    int autoF0DF740E_i;
    int auto9050C9D7_n;
    int auto9050C9D7_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(1119), 0.0, -1, 10, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Hyperion", 0, gv_pLAYER07_HYPERION, PointFromId(270), PointFromId(1117));
    gv_victoryHyperion = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victoryHyperion), c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_victoryHyperion), c_animNameDefault, 1.5);
    UnitIssueOrder(gv_victoryHyperion, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(271)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_victoryHyperion, OrderTargetingPoint(AbilityCommand("HyperionYamatoSpecial", 0), PointFromId(1117)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_victoryHyperion, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(866)), c_orderQueueAddToEnd);
    auto0A382049_n = 25;
    auto0A382049_i = 1;
    while (auto0A382049_i <= auto0A382049_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
        auto0A382049_i = auto0A382049_i + 1;
    }
    auto243EB627_n = 20;
    auto243EB627_i = 1;
    while (auto243EB627_i <= auto243EB627_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(6)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
        auto243EB627_i = auto243EB627_i + 1;
    }
    autoF0DF740E_n = 22;
    autoF0DF740E_i = 1;
    while (autoF0DF740E_i <= autoF0DF740E_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(7)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
        autoF0DF740E_i = autoF0DF740E_i + 1;
    }
    auto9050C9D7_n = 20;
    auto9050C9D7_i = 1;
    while (auto9050C9D7_i <= auto9050C9D7_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(7)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
        auto9050C9D7_i = auto9050C9D7_i + 1;
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_victoryCinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TRaynor03MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER02_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER03_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER04_ZERG, 5);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER05_ZERG_NOAI, 5);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(783), 12.0, -1, 10, true);
    TriggerExecute(gt_VictoryDropPods, true, false);
    TriggerExecute(gt_VictoryNydusSpawn01, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_VictoryNydusSpawn02, true, false);
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_VictoryNydusSpawn03, true, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_VictoryNydusSpawn04, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_VictoryNydusSpawn05, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_VictoryNydusSpawn06, true, false);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(786), 9.0, -1, 10, true);
    TriggerExecute(gt_VictoryBridgeZerg, true, false);
    Wait(4.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(gv_victoryHyperion, PointFromId(16), 1.0);
    UnitSetState(gv_victoryHyperion, c_unitStateTurnSuppressed, false);
    TriggerExecute(gt_VictoryMutas, true, false);
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(787), 22.0, -1, 10, true);
    Wait(5.0, c_timeGame);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(1);
    // Transmission - SoundLink("TRaynor03Horner00012", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Horner00012", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TRaynor03Raynor00010", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Raynor00010", -1), c_transmissionDurationAdd, 0.0, true);
    // Transmission - SoundLink("TRaynor03Horner00018", 0)
    libCamp_gf_SendTransmissionCampaign(null, SoundLink("TRaynor03Horner00018", -1), c_transmissionDurationAdd, 0.0, true);
    libCamp_gf_SetAllSoundChannelVolumesCampaign(2);
    Wait(2.0, c_timeGame);
    gv_victoryCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization
    lv_fadeDuration = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER02_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER03_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER04_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER01_USER, gv_pLAYER05_ZERG_NOAI, 0);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER02_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER03_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER04_ZERG, 0);
    libNtve_gf_SetAlliance(gv_pLAYER07_HYPERION, gv_pLAYER05_ZERG_NOAI, 0);
    if ((gv_victoryCinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(lv_fadeDuration, c_timeReal);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Drop Pods
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropPods_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libCamp_gf_CreateDropPod(1, PointFromId(511), UnitGroupEmpty(), false);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateDropPod(1, PointFromId(668), UnitGroupEmpty(), false);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateDropPod(1, PointFromId(684), UnitGroupEmpty(), false);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateDropPod(1, PointFromId(701), UnitGroupEmpty(), false);
    Wait(1.0, c_timeGame);
    libCamp_gf_CreateDropPod(1, PointFromId(738), UnitGroupEmpty(), false);
    Wait(3.0, c_timeGame);
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER02_ZERG, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCamp_gf_CreateDropPod(1, PointFromId(774), UnitGroupEmpty(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_pLAYER02_ZERG, PointFromId(774));
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER02_ZERG, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCamp_gf_CreateDropPod(1, PointFromId(776), UnitGroupEmpty(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_pLAYER02_ZERG, PointFromId(776));
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER02_ZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCamp_gf_CreateDropPod(1, PointFromId(842), UnitGroupEmpty(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, "CreepTumor", c_unitCreateConstruct, gv_pLAYER02_ZERG, PointFromId(842));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropPods_Init () {
    gt_VictoryDropPods = TriggerCreate("gt_VictoryDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Bridge Zerg
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBridgeZerg_Func (bool testConds, bool runActions) {
    int autoF86FC359_n;
    int autoF86FC359_i;
    int autoFF1BB206_n;
    int autoFF1BB206_i;
    int auto5FE3FBA3_n;
    int auto5FE3FBA3_i;
    int auto1CE61B62_n;
    int auto1CE61B62_i;
    int auto847B6758_n;
    int auto847B6758_i;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(10, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(781));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(3, "Hydralisk", 0, gv_pLAYER02_ZERG, PointFromId(781));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    autoF86FC359_n = 3;
    autoF86FC359_i = 1;
    while (autoF86FC359_i <= autoF86FC359_n) {
        libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(669));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        autoF86FC359_i = autoF86FC359_i + 1;
    }
    autoFF1BB206_n = 3;
    autoFF1BB206_i = 1;
    while (autoFF1BB206_i <= autoFF1BB206_n) {
        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(781));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        autoFF1BB206_i = autoFF1BB206_i + 1;
    }
    auto5FE3FBA3_n = 3;
    auto5FE3FBA3_i = 1;
    while (auto5FE3FBA3_i <= auto5FE3FBA3_n) {
        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(781));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        auto5FE3FBA3_i = auto5FE3FBA3_i + 1;
    }
    auto1CE61B62_n = 3;
    auto1CE61B62_i = 1;
    while (auto1CE61B62_i <= auto1CE61B62_n) {
        libNtve_gf_CreateUnitsAtPoint2(3, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(669));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        auto1CE61B62_i = auto1CE61B62_i + 1;
    }
    auto847B6758_n = 3;
    auto847B6758_i = 1;
    while (auto847B6758_i <= auto847B6758_n) {
        libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER02_ZERG, PointFromId(781));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        auto847B6758_i = auto847B6758_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBridgeZerg_Init () {
    gt_VictoryBridgeZerg = TriggerCreate("gt_VictoryBridgeZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Mutas
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMutas_Func (bool testConds, bool runActions) {
    int autoD9DF8841_n;
    int autoD9DF8841_i;
    int auto3B0968D2_n;
    int auto3B0968D2_i;
    int auto57C0FD92_n;
    int auto57C0FD92_i;
    int auto4A9CFD50_n;
    int auto4A9CFD50_i;
    int auto0DF1FE2C_n;
    int auto0DF1FE2C_i;
    int auto23BBB175_n;
    int auto23BBB175_i;
    int autoBCAD60C3_n;
    int autoBCAD60C3_i;
    int autoC682342F_n;
    int autoC682342F_i;
    int autoBB0F46B3_n;
    int autoBB0F46B3_i;
    int auto40208DBE_n;
    int auto40208DBE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9DF8841_n = 3;
    autoD9DF8841_i = 1;
    while (autoD9DF8841_i <= autoD9DF8841_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(8)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryHyperion), c_orderQueueAddToEnd);
        autoD9DF8841_i = autoD9DF8841_i + 1;
    }
    auto3B0968D2_n = 3;
    auto3B0968D2_i = 1;
    while (auto3B0968D2_i <= auto3B0968D2_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(10)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
        auto3B0968D2_i = auto3B0968D2_i + 1;
    }
    CameraApplyInfo(gv_pLAYER01_USER, CameraInfoFromId(787), 20.0, -1, 10, true);
    Wait(4.0, c_timeGame);
    auto57C0FD92_n = 3;
    auto57C0FD92_i = 1;
    while (auto57C0FD92_i <= auto57C0FD92_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(9)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryHyperion), c_orderQueueAddToEnd);
        auto57C0FD92_i = auto57C0FD92_i + 1;
    }
    auto4A9CFD50_n = 2;
    auto4A9CFD50_i = 1;
    while (auto4A9CFD50_i <= auto4A9CFD50_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(11)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
        auto4A9CFD50_i = auto4A9CFD50_i + 1;
    }
    Wait(2.0, c_timeGame);
    auto0DF1FE2C_n = 6;
    auto0DF1FE2C_i = 1;
    while (auto0DF1FE2C_i <= auto0DF1FE2C_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(9)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryHyperion), c_orderQueueAddToEnd);
        auto0DF1FE2C_i = auto0DF1FE2C_i + 1;
    }
    auto23BBB175_n = 5;
    auto23BBB175_i = 1;
    while (auto23BBB175_i <= auto23BBB175_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(11)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
        auto23BBB175_i = auto23BBB175_i + 1;
    }
    Wait(3.0, c_timeGame);
    autoBCAD60C3_n = 5;
    autoBCAD60C3_i = 1;
    while (autoBCAD60C3_i <= autoBCAD60C3_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(8)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryHyperion), c_orderQueueAddToEnd);
        autoBCAD60C3_i = autoBCAD60C3_i + 1;
    }
    autoC682342F_n = 4;
    autoC682342F_i = 1;
    while (autoC682342F_i <= autoC682342F_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(10)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
        autoC682342F_i = autoC682342F_i + 1;
    }
    Wait(3.0, c_timeGame);
    autoBB0F46B3_n = 6;
    autoBB0F46B3_i = 1;
    while (autoBB0F46B3_i <= autoBB0F46B3_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(9)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_victoryHyperion), c_orderQueueAddToEnd);
        autoBB0F46B3_i = autoBB0F46B3_i + 1;
    }
    auto40208DBE_n = 6;
    auto40208DBE_i = 1;
    while (auto40208DBE_i <= auto40208DBE_n) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Mutalisk", 0, gv_pLAYER02_ZERG, RegionRandomPoint(RegionFromId(11)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(31))), c_orderQueueReplace);
        auto40208DBE_i = auto40208DBE_i + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMutas_Init () {
    gt_VictoryMutas = TriggerCreate("gt_VictoryMutas_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 01
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1114), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(1114));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_nydusWorm, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    Wait(3.7, c_timeGame);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn01_Init () {
    gt_VictoryNydusSpawn01 = TriggerCreate("gt_VictoryNydusSpawn01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 02
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1115), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(1115));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_nydusWorm, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    Wait(3.7, c_timeGame);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn02_Init () {
    gt_VictoryNydusSpawn02 = TriggerCreate("gt_VictoryNydusSpawn02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 03
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1116), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(1116));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_nydusWorm, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    Wait(3.7, c_timeGame);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn03_Init () {
    gt_VictoryNydusSpawn03 = TriggerCreate("gt_VictoryNydusSpawn03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 04
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(666), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(666));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_nydusWorm, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    Wait(3.7, c_timeGame);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Hydralisk", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn04_Init () {
    gt_VictoryNydusSpawn04 = TriggerCreate("gt_VictoryNydusSpawn04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 05
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(757), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(757));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_nydusWorm, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    Wait(3.7, c_timeGame);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Hydralisk", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(3, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(2, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    gf_VictoryCineSpawnNydusUnits(1, "Zergling", gv_pLAYER02_ZERG, lv_nydusWorm, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn05_Init () {
    gt_VictoryNydusSpawn05 = TriggerCreate("gt_VictoryNydusSpawn05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus - Spawn 06
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusSpawn06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;

    // Variable Initialization
    lv_nydusWorm = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1117), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitKill(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    Wait(0.25, c_timeGame);
    CameraShakeStart(gv_pLAYER01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 2.0, 100.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER02_ZERG, PointFromId(1117));
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("NydusWorm_Birth", -1), PlayerGroupAll(), lv_nydusWorm, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusSpawn06_Init () {
    gt_VictoryNydusSpawn06 = TriggerCreate("gt_VictoryNydusSpawn06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04Music_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_IntroSequence_Init();
    gt_StartGame_Init();
    gt_BurrowAmbushGlobalTrigger_Init();
    gt_AlertFirstZergWave_Init();
    gt_AlertZergAttackingBullhornLights_Init();
    gt_StartDropPodTimers_Init();
    gt_ZergDropPodExpansion1_Init();
    gt_ZergDropPodExpansion2_Init();
    gt_ZergDropPodExpansion3_Init();
    gt_ZergDropPodExpansion4_Init();
    gt_SpineCrawlerIncursion1_Init();
    gt_SpineCrawlerIncursion2_Init();
    gt_SpineCrawlerIncursion3_Init();
    gt_SalvageBunkersDisableRetreatTransmission_Init();
    gt_TransitiontoDawn_Init();
    gt_TaurenMarineSighted_Init();
    gt_TaurenOuthouseLaunch_Init();
    gt_CreateBunkerPingsandTooltips_Init();
    gt_ShowBunkerTextTags_Init();
    gt_RemoveBunkerTextTags_Init();
    gt_RemoveBunkerTextTagSalvagedorDead_Init();
    gt_CreateUnitTooltips_Init();
    gt_NewStructureBuilt_Init();
    gt_StrandedRebelMarinesTiming_Init();
    gt_RebelMarines01Intro_Init();
    gt_RebelMarines02Intro_Init();
    gt_RebelMarines03Intro_Init();
    gt_RebelMarines01Rescued_Init();
    gt_RebelMarines02Rescued_Init();
    gt_RebelMarines03Rescued_Init();
    gt_RebelMarines01Dead_Init();
    gt_RebelMarines02Dead_Init();
    gt_RebelMarines03Dead_Init();
    gt_StartTimers_Init();
    gt_StartAI_Init();
    gt_StartFirstZergWaveSpecial_Init();
    gt_AttackWavesRedZergP02_Init();
    gt_AttackWavesTealZergP03_Init();
    gt_AttackWavesPurpleZergP04_Init();
    gt_AIResearchHard_Init();
    gt_AIResearchInsane_Init();
    gt_ZergP02EarlyNydusWave_Init();
    gt_ZergP04EarlyNydusWave_Init();
    gt_ZergP02LateNydusWave_Init();
    gt_ZergP04LateNydusWave_Init();
    gt_ZergP02EndGameNydusWorms_Init();
    gt_ZergP03EndGameNydusWorms_Init();
    gt_ZergP04EndGameNydusWorms_Init();
    gt_ReviveP02NydusWorm_Init();
    gt_ReviveP04NydusWorm_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_PlayerIsInCombat_Init();
    gt_PlayerIsInCombatIndicatorDiminish_Init();
    gt_TransmissionCallForRetreatQ_Init();
    gt_TransmissionFirstZergWaveIncomingQ_Init();
    gt_TransmissionTychusIncomingAirUnitsQ_Init();
    gt_TransmissionRebelMarines01MaydayQ_Init();
    gt_TransmissionRebelMarines02MaydayQ_Init();
    gt_TransmissionRebelMarines03MaydayQ_Init();
    gt_TransmissionRebelMarines01RescuedQ_Init();
    gt_TransmissionRebelMarines02RescuedQ_Init();
    gt_TransmissionRebelMarines03RescuedQ_Init();
    gt_Transmission10MinuteWarningQ_Init();
    gt_Transmission5MinuteWarningQ_Init();
    gt_TransmissionLastMinuteQ_Init();
    gt_TipStoryModeQ_Init();
    gt_TipBunkerQ_Init();
    gt_TipReactorQ_Init();
    gt_TipEngineeringBayQ_Init();
    gt_TipMissileTurretQ_Init();
    gt_TipRepairQ_Init();
    gt_Achievement4HatcheriesDestroyed_Init();
    gt_VictoryHoldOutCompleted_Init();
    gt_Victory_Init();
    gt_DefeatBaseDead_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveHoldOutCreateQ_Init();
    gt_ObjectiveHoldOutComplete_Init();
    gt_ObjectiveRescueCreateQ_Init();
    gt_ObjectiveRescueComplete_Init();
    gt_ObjectiveRescueFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingZergSpawn_Init();
    gt_BriefingDropPodsDrones_Init();
    gt_BriefingDropPodsZerglings_Init();
    gt_BriefingCleanUpZerg_Init();
    gt_BriefingPingScene_Init();
    gt_BriefingPingCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryDropPods_Init();
    gt_VictoryBridgeZerg_Init();
    gt_VictoryMutas_Init();
    gt_VictoryNydusSpawn01_Init();
    gt_VictoryNydusSpawn02_Init();
    gt_VictoryNydusSpawn03_Init();
    gt_VictoryNydusSpawn04_Init();
    gt_VictoryNydusSpawn05_Init();
    gt_VictoryNydusSpawn06_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
