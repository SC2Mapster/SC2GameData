//==================================================================================================
// 
// Generated Map Script
// 
// Name:   StarCraft II Tutorial
// Author: Blizzard Entertainment
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_SIMULATOR = 2;
const int gv_p03_SIMULATOR = 3;
int gv_pickedUserInterface;
int gv_pickedCamera;
int gv_pickedMovement;
int gv_pickedCombat;
int gv_pickedCollection;
int gv_pickedConstruction;
int gv_pickedProduction;
int gv_pickedSupply;
unitgroup gv_pathingBlockerGroup01;
unitgroup gv_pathingBlockerGroup02;
unitgroup gv_pathingBlockerGroup03;
unitgroup gv_pathingBlockerGroup04;
unitgroup gv_pathingBlockerGroup05;
revealer gv_tutorial_Visibility;
int gv_mainDialog;
int gv_tutorialDialog;
int gv_mainLabel;
int gv_mainButton01_UserInterface;
int gv_mainButton02_Camera;
int gv_mainButton03_Movement;
int gv_mainButton04_Combat;
int gv_mainButton05_Construction;
int gv_mainButton06_Collection;
int gv_mainButton07_Production;
int gv_mainButton08_Supply;
int gv_mainButton09_Quit;
int gv_cinematicWindow;
int gv_portrait_Adjutant;
bool gv_noReply;
timer gv_timer_Opening;
timer gv_timer_Legs;
bool gv_startingSequenceStarted;
int gv_replay_Transmission_Dialog_Tutorial;
int gv_replay_Transmission_Dialog_Main;
int gv_replay_Transmission_Border_Main;
int gv_replay_Transmission_Border_Tutorial;
int gv_replay_Transmission_ButtonID_Main;
int gv_replay_Transmission_ButtonID_Tutorial;
trigger gv_replay_Transmission_Trigger;
bool gv_replay_Transmission_Is_Playing;
const string gv_tUTORIALBANKPATH = "Tutorial";
bool gv_tutorialComplete_UserInterface;
bool gv_tutorialComplete_Camera;
bool gv_tutorialComplete_Movement;
bool gv_tutorialComplete_Combat;
bool gv_tutorialComplete_Construction;
bool gv_tutorialComplete_Collection;
bool gv_tutorialComplete_Production;
bool gv_tutorialComplete_Supply;
unit gv_uI_CommandCenter01;
unit gv_uI_MissleTurret02;
unit gv_uI_MissleTurret03;
unit gv_uI_MissleTurret04;
int gv_objectiveUserInterface;
int gv_cam_Ping;
unit gv_cam_Beacon;
bool gv_scrolledUP;
bool gv_scrolledDOWN;
bool gv_scrolledLEFT;
bool gv_scrolledRIGHT;
point gv_priorCameraLoc;
text gv_tEXTUP;
text gv_tEXTDOWN;
text gv_tEXTLEFT;
text gv_tEXTRIGHT;
fixed gv_threshold;
int gv_objectiveCamera01;
int gv_objectiveCamera02;
unit gv_mov_Beacon01;
unit gv_mov_Beacon02;
unit gv_mov_Beacon03;
unit gv_mov_Marine01;
revealer gv_mov_VisibilityFOW;
int gv_mov_Ping;
bool gv_mov_RightClickedMulti;
int gv_objectiveMovement01;
int gv_objectiveMovement02;
int gv_objectiveMovement03;
int gv_objectiveMovement04;
int gv_objectiveMovement05;
actor gv_com_Actor;
unitgroup gv_com_RedMarines;
int gv_com_Ping;
bool gv_com_AttackStarted01;
bool gv_com_AttackStarted02;
bool gv_com_AttackStarted03;
bool gv_com02_AllowMoreLines;
bool gv_com03_AllowMoreLines;
int gv_objectiveCombat01;
int gv_objectiveCombat01Number;
int gv_objectiveCombat01Total;
int gv_objectiveCombat02;
int gv_objectiveCombat02Number;
int gv_objectiveCombat02Total;
int gv_objectiveCombat03;
int gv_objectiveCombat03Number;
int gv_objectiveCombat03Total;
actor gv_con_Actor01;
unit gv_con_SCV;
bool gv_con_CommandCenterStarted;
bool gv_con02_AllowMoreLines01;
bool gv_con02_AllowMoreLines02;
int gv_objectiveConstruction01;
int gv_objectiveConstruction02;
unit gv_col_CommandCenter;
unit gv_col_SCV;
bool gv_col_HarvestedMineral;
bool gv_col_RefineryStarted;
bool gv_col_HarvestedGas;
bool gv_col_SCVSelected;
bool gv_col01_AllowMoreLines;
bool gv_col02_AllowMoreLines;
int gv_objectiveCollection01;
int gv_objectiveCollection01Number;
int gv_objectiveCollection01Total;
unit gv_col_Geyser;
int gv_objectiveCollection02;
int gv_objectiveCollection03;
int gv_objectiveCollection03Number;
int gv_objectiveCollection03Total;
unit gv_pro_Barracks;
bool gv_pro_TrainedMarine;
bool gv_pro_TechLabConstructed;
bool gv_pro_TrainedMaruader;
bool gv_pro03_AllowMoreLines;
bool gv_pro04_AllowMoreLines;
int gv_objectiveProduction01;
int gv_objectiveProduction02;
int gv_objectiveProduction02Number;
int gv_objectiveProduction02Total;
int gv_objectiveProduction03;
int gv_objectiveProduction04;
int gv_objectiveProduction04Number;
unit gv_supply_SCV;
bool gv_supply_SupplyDepotStarted;
bool gv_supply01_AllowMoreLines01;
bool gv_supply01_AllowMoreLines02;
int gv_objectiveSupply01;

void InitGlobals () {
    gv_pickedUserInterface = 0;
    gv_pickedCamera = 0;
    gv_pickedMovement = 0;
    gv_pickedCombat = 0;
    gv_pickedCollection = 0;
    gv_pickedConstruction = 0;
    gv_pickedProduction = 0;
    gv_pickedSupply = 0;
    gv_pathingBlockerGroup01 = UnitGroupEmpty();
    gv_pathingBlockerGroup02 = UnitGroupEmpty();
    gv_pathingBlockerGroup03 = UnitGroupEmpty();
    gv_pathingBlockerGroup04 = UnitGroupEmpty();
    gv_pathingBlockerGroup05 = UnitGroupEmpty();
    gv_tutorial_Visibility = null;
    gv_mainDialog = c_invalidDialogId;
    gv_tutorialDialog = c_invalidDialogId;
    gv_mainLabel = c_invalidDialogControlId;
    gv_mainButton01_UserInterface = c_invalidDialogControlId;
    gv_mainButton02_Camera = c_invalidDialogControlId;
    gv_mainButton03_Movement = c_invalidDialogControlId;
    gv_mainButton04_Combat = c_invalidDialogControlId;
    gv_mainButton05_Construction = c_invalidDialogControlId;
    gv_mainButton06_Collection = c_invalidDialogControlId;
    gv_mainButton07_Production = c_invalidDialogControlId;
    gv_mainButton08_Supply = c_invalidDialogControlId;
    gv_mainButton09_Quit = c_invalidDialogControlId;
    gv_cinematicWindow = c_invalidPortraitId;
    gv_portrait_Adjutant = c_invalidPortraitId;
    gv_noReply = false;
    gv_timer_Opening = TimerCreate();
    gv_timer_Legs = TimerCreate();
    gv_startingSequenceStarted = false;
    gv_replay_Transmission_Dialog_Tutorial = c_invalidDialogId;
    gv_replay_Transmission_Dialog_Main = c_invalidDialogId;
    gv_replay_Transmission_Border_Main = c_invalidDialogControlId;
    gv_replay_Transmission_Border_Tutorial = c_invalidDialogControlId;
    gv_replay_Transmission_ButtonID_Main = 20;
    gv_replay_Transmission_ButtonID_Tutorial = 21;
    gv_replay_Transmission_Trigger = null;
    gv_replay_Transmission_Is_Playing = false;
    gv_tutorialComplete_UserInterface = false;
    gv_tutorialComplete_Camera = false;
    gv_tutorialComplete_Movement = false;
    gv_tutorialComplete_Combat = false;
    gv_tutorialComplete_Construction = false;
    gv_tutorialComplete_Collection = false;
    gv_tutorialComplete_Production = false;
    gv_tutorialComplete_Supply = false;
    gv_uI_CommandCenter01 = null;
    gv_uI_MissleTurret02 = null;
    gv_uI_MissleTurret03 = null;
    gv_uI_MissleTurret04 = null;
    gv_objectiveUserInterface = c_invalidObjectiveId;
    gv_cam_Ping = c_invalidPingId;
    gv_cam_Beacon = null;
    gv_scrolledUP = false;
    gv_scrolledDOWN = false;
    gv_scrolledLEFT = false;
    gv_scrolledRIGHT = false;
    gv_priorCameraLoc = null;
    gv_tEXTUP = StringExternal("Param/Value/56244DAC");
    gv_tEXTDOWN = StringExternal("Param/Value/71D6A948");
    gv_tEXTLEFT = StringExternal("Param/Value/56A788E2");
    gv_tEXTRIGHT = StringExternal("Param/Value/5C94E7BF");
    gv_threshold = 0.02;
    gv_objectiveCamera01 = c_invalidObjectiveId;
    gv_objectiveCamera02 = c_invalidObjectiveId;
    gv_mov_Beacon01 = null;
    gv_mov_Beacon02 = null;
    gv_mov_Beacon03 = null;
    gv_mov_Marine01 = null;
    gv_mov_VisibilityFOW = null;
    gv_mov_Ping = c_invalidPingId;
    gv_mov_RightClickedMulti = false;
    gv_objectiveMovement01 = c_invalidObjectiveId;
    gv_objectiveMovement02 = c_invalidObjectiveId;
    gv_objectiveMovement03 = c_invalidObjectiveId;
    gv_objectiveMovement04 = c_invalidObjectiveId;
    gv_objectiveMovement05 = c_invalidObjectiveId;
    gv_com_Actor = null;
    gv_com_RedMarines = UnitGroupEmpty();
    gv_com_Ping = c_invalidPingId;
    gv_com_AttackStarted01 = false;
    gv_com_AttackStarted02 = false;
    gv_com_AttackStarted03 = false;
    gv_com02_AllowMoreLines = false;
    gv_com03_AllowMoreLines = false;
    gv_objectiveCombat01 = c_invalidObjectiveId;
    gv_objectiveCombat01Number = 0;
    gv_objectiveCombat01Total = 2;
    gv_objectiveCombat02 = c_invalidObjectiveId;
    gv_objectiveCombat02Number = 0;
    gv_objectiveCombat02Total = 3;
    gv_objectiveCombat03 = c_invalidObjectiveId;
    gv_objectiveCombat03Number = 0;
    gv_objectiveCombat03Total = 3;
    gv_con_Actor01 = null;
    gv_con_SCV = null;
    gv_con_CommandCenterStarted = false;
    gv_con02_AllowMoreLines01 = false;
    gv_con02_AllowMoreLines02 = false;
    gv_objectiveConstruction01 = c_invalidObjectiveId;
    gv_objectiveConstruction02 = c_invalidObjectiveId;
    gv_col_CommandCenter = null;
    gv_col_SCV = null;
    gv_col_HarvestedMineral = false;
    gv_col_RefineryStarted = false;
    gv_col_HarvestedGas = false;
    gv_col_SCVSelected = false;
    gv_col01_AllowMoreLines = false;
    gv_col02_AllowMoreLines = false;
    gv_objectiveCollection01 = c_invalidObjectiveId;
    gv_objectiveCollection01Number = 0;
    gv_objectiveCollection01Total = 150;
    gv_col_Geyser = null;
    gv_objectiveCollection02 = c_invalidObjectiveId;
    gv_objectiveCollection03 = c_invalidObjectiveId;
    gv_objectiveCollection03Number = 0;
    gv_objectiveCollection03Total = 40;
    gv_pro_Barracks = null;
    gv_pro_TrainedMarine = false;
    gv_pro_TechLabConstructed = false;
    gv_pro_TrainedMaruader = false;
    gv_pro03_AllowMoreLines = false;
    gv_pro04_AllowMoreLines = false;
    gv_objectiveProduction01 = c_invalidObjectiveId;
    gv_objectiveProduction02 = c_invalidObjectiveId;
    gv_objectiveProduction02Number = 0;
    gv_objectiveProduction02Total = 2;
    gv_objectiveProduction03 = c_invalidObjectiveId;
    gv_objectiveProduction04 = c_invalidObjectiveId;
    gv_objectiveProduction04Number = 0;
    gv_supply_SCV = null;
    gv_supply_SupplyDepotStarted = false;
    gv_supply01_AllowMoreLines01 = false;
    gv_supply01_AllowMoreLines02 = false;
    gv_objectiveSupply01 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_IfConditionThenFormatButton (bool lp_condition, int lp_button, text lp_buttonText);
void gf_FormatReplayTransmissionButton (int lp_screenButtonID);
void gf_CreateMainMenuButton (int lp_width, int lp_height, int lp_x, int lp_y, text lp_buttonText);
void gf_CreateInfoText (unit lp_chosenUnit);
void gf_ResetMap ();
void gf_ResetMapTech ();
void gf_ResetMapResources ();
void gf_SilenceQ ();
void gf_SetInfantryArmorUpgrades (int lp_player, int lp_level);
void gf_ResetMineralField (region lp_mineralFieldArea);
void gf_CreateMainReplayTransmissionButton (trigger lp_repeatedintrotrigger);
void gf_CreateTutorialReplayTransmissionButton (trigger lp_repeatedtrigger);
void gf_HideReplayTransmissionButtons ();
bool gf_TutorialCompleted (int lp_type);
void gf_SetTutorialCompleted (int lp_type, bool lp_completed, bool lp_save);
void gf_LoadTutorialData ();
void gf_SaveTutorialData ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init02Units;
trigger gt_Init03Technology;
trigger gt_Init04UserInterface;
trigger gt_ReCreateDialog;
trigger gt_CreateAndDisplayMainMenu;
trigger gt_CreateDialogs;
trigger gt_ResetObjectives;
trigger gt_QuitTutorial;
trigger gt_OpeningAdjutantQ;
trigger gt_OpeningAdjutantQ2;
trigger gt_OpeningAdjutantQ22;
trigger gt_TutorialCompleteQ;
trigger gt_ClickReplayTransmissionButton;
trigger gt_StartFootageRecording;
trigger gt_StopFootageRecording;
trigger gt_UserInterface01;
trigger gt_UserInterface01Q;
trigger gt_UserInterfaceCompleteQ;
trigger gt_ObjectiveUserInterfaceCreateQ;
trigger gt_ObjectiveUserInterfaceComplete;
trigger gt_Camera01;
trigger gt_Camera01Q;
trigger gt_Camera01CompleteQ;
trigger gt__0407Camera01LoopArrows;
trigger gt__0407Camera01StopArrows;
trigger gt_ObjectiveCamera01CreateQ;
trigger gt_ObjectiveCamera01Update;
trigger gt_ObjectiveCamera01Complete;
trigger gt_Camera02;
trigger gt_Camera02Q;
trigger gt_Camera02CompleteQ;
trigger gt__0809Camera02LoopMouse;
trigger gt__0809Camera02StopMouse;
trigger gt_ObjectiveCamera02CreateQ;
trigger gt_ObjectiveCamera02Complete;
trigger gt_Camera01TIP;
trigger gt_Movement01;
trigger gt_Movement01Q;
trigger gt_Movement01CompleteQ;
trigger gt_LoopMouseButtonLeft01;
trigger gt__10Movement01StopMouse;
trigger gt_ObjectiveMovement01CreateQ;
trigger gt_ObjectiveMovement01Complete;
trigger gt_Movement02;
trigger gt_Movement02Q;
trigger gt_Movement02CompleteQ;
trigger gt__11Movement02LoopMouse;
trigger gt__11Movement02StopMouse;
trigger gt_ObjectiveMovement02CreateQ;
trigger gt_ObjectiveMovement02Complete;
trigger gt_Movement03;
trigger gt_Movement03Q;
trigger gt_Movement03CompleteQ;
trigger gt_ObjectiveMovement03CreateQ;
trigger gt_ObjectiveMovement03Complete;
trigger gt_Movement04;
trigger gt_Movement04Q;
trigger gt_Movement04CompleteQ;
trigger gt__12Movement04LoopMouse;
trigger gt__12Movement04StopMouse;
trigger gt_ObjectiveMovement04CreateQ;
trigger gt_ObjectiveMovement04Complete;
trigger gt_Movement05;
trigger gt_Movement05Q;
trigger gt_Movement05CompleteQ;
trigger gt__13Movement05LoopMouse;
trigger gt__13Movement05StopMouse;
trigger gt_Movement05MoveOrderCheck;
trigger gt_Movement05AttackMoveOrderCheck;
trigger gt_ObjectiveMovement05CreateQ;
trigger gt_ObjectiveMovement05Complete;
trigger gt_MovementTIP;
trigger gt_Combat01;
trigger gt_Combat01Q;
trigger gt_Combat01CompleteQ;
trigger gt__14Combat01LoopMouse;
trigger gt__14Combat01StopMouse;
trigger gt_Combat01AttackStarted;
trigger gt_ObjectiveCombat01CreateQ;
trigger gt_ObjectiveCombat01Failed;
trigger gt_ObjectiveCombat01Update;
trigger gt_ObjectiveCombat01Complete;
trigger gt_Combat02;
trigger gt_Combat02Q;
trigger gt_Combat02CompleteQ;
trigger gt__15Combat02LoopMouse;
trigger gt__15Combat02StopMouse;
trigger gt_Combat02AttackIssued;
trigger gt_ObjectiveCombat02CreateQ;
trigger gt_ObjectiveCombat02Failed;
trigger gt_ObjectiveCombat02Update;
trigger gt_ObjectiveCombat02Complete;
trigger gt_Combat03;
trigger gt_Combat03Q;
trigger gt_Combat03CompleteQ;
trigger gt__16Combat03LoopMouse;
trigger gt__16Combat03StopMouse;
trigger gt_Combat03AttackIssued;
trigger gt_ObjectiveCombat03CreateQ;
trigger gt_ObjectiveCombat03Failed;
trigger gt_ObjectiveCombat03Update;
trigger gt_ObjectiveCombat03Complete;
trigger gt_AttackTIP;
trigger gt_Construction01;
trigger gt_Construction01Q;
trigger gt_Construction01CompleteQ;
trigger gt__17Construction01LoopMouse;
trigger gt__17Construction01StopMouse;
trigger gt_ObjectiveConstruction01CreateQ;
trigger gt_ObjectiveConstruction01Complete;
trigger gt_Construction02;
trigger gt_Construction02Q;
trigger gt_Construction02MoreLines01Q;
trigger gt_Construction02MoreLines02Q;
trigger gt_Construction02CompleteQ;
trigger gt__18Construction02LoopMouse;
trigger gt__18Construction02StopMouse;
trigger gt_Construction02BuildStructurePressed;
trigger gt_Construction02CommandCenterStarted;
trigger gt_Construction02CommandCenterCancelled;
trigger gt_ObjectiveConstruction02CreateQ;
trigger gt_ObjectiveConstruction02Complete;
trigger gt_ConstructionTIP;
trigger gt_Collection01;
trigger gt_Collection01Q;
trigger gt_Collection01MoreLinesQ;
trigger gt_Collection01CompleteQ;
trigger gt__19Collection01LoopMouse;
trigger gt__19Collection01StopMouse;
trigger gt_Collection01HarvestedMineralCheck;
trigger gt_ObjectiveCollection01CreateQ;
trigger gt_ObjectiveCollection01Update;
trigger gt_ObjectiveCollection01Complete;
trigger gt_Collection02;
trigger gt_Collection02Q;
trigger gt_Collection02MoreLinesQ;
trigger gt_Collection02CompleteQ;
trigger gt__20Collection02LoopMouse;
trigger gt__20Collection02StopMouse;
trigger gt_Collection02BuildStructurePressed;
trigger gt_Collection02BuildRefineryPressed;
trigger gt_Collection02RefineryStarted;
trigger gt_Collection02RefineryCancelled;
trigger gt_ObjectiveCollection02CreateQ;
trigger gt_ObjectiveCollection02Complete;
trigger gt_Collection03;
trigger gt_Collection03Q;
trigger gt_Collection03MoreLines01Q;
trigger gt_Collection03MoreLines02Q;
trigger gt_Collection03CompleteQ;
trigger gt__21Collection03LoopMouse;
trigger gt__21Collection03StopMouse;
trigger gt__22Collection03LoopMouse;
trigger gt__22Collection03StopMouse;
trigger gt_Collection03SCVSelectCheck;
trigger gt_Collection03HarvestedGasCheck;
trigger gt_ObjectiveCollection03CreateQ;
trigger gt_ObjectiveCollection03Update;
trigger gt_ObjectiveCollection03Complete;
trigger gt_CollectionTIP;
trigger gt_Production01;
trigger gt_Production01Q;
trigger gt_Production01CompleteQ;
trigger gt__23Production01LoopMouse;
trigger gt__23Production01StopMouse;
trigger gt_ObjectiveProduction01CreateQ;
trigger gt_ObjectiveProduction01Complete;
trigger gt_Production02;
trigger gt_Production02Q;
trigger gt_Production02MoreLinesQ;
trigger gt_Production02CompleteQ;
trigger gt__24Production02LoopMouse;
trigger gt__24Production02StopMouse;
trigger gt_Production02TrainMarineCheck;
trigger gt_ObjectiveProduction02CreateQ;
trigger gt_ObjectiveProduction02Update;
trigger gt_ObjectiveProduction02Complete;
trigger gt_Production03;
trigger gt_Production03Q;
trigger gt_Production03MoreLinesQ;
trigger gt_Production03CompleteQ;
trigger gt__25Production03LoopMouse;
trigger gt__25Production03StopMouse;
trigger gt_Production03TechLabStarted;
trigger gt_Production03TechLabCancelled;
trigger gt_ObjectiveProduction03CreateQ;
trigger gt_ObjectiveProduction03Complete;
trigger gt_Production04;
trigger gt_Production04Q;
trigger gt_Production04MoreLinesQ;
trigger gt_Production04CompleteQ;
trigger gt__26Production04LoopMouse;
trigger gt__26Production04StopMouse;
trigger gt_Production04MarauderCheck;
trigger gt_ObjectiveProduction04CreateQ;
trigger gt_ObjectiveProduction04Complete;
trigger gt_ProductionTIP;
trigger gt_Supply01;
trigger gt_Supply01Q;
trigger gt_Supply01MoreLines01Q;
trigger gt__27Supply01MoreLines02Q;
trigger gt_Supply01CompleteQ;
trigger gt__28Supply01LoopMouse;
trigger gt__28Supply01StopMouse;
trigger gt_Supply01BuildStructurePressed;
trigger gt_Supply01BuildSupplyDepotPressed;
trigger gt_Supply01SupplyDepotStarted;
trigger gt_Supply01SupplyDepotCancelled;
trigger gt_ObjectiveSupply01CreateQ;
trigger gt_ObjectiveSupply01Complete;
trigger gt_SupplyTIP;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_IfConditionThenFormatButton (bool lp_condition, int lp_button, text lp_buttonText) {
    // Implementation
    if ((lp_condition == true)) {
        libNtve_gf_SetDialogItemText(lp_button, (StringExternal("Param/Value/FBD20468") + TextCase(lp_buttonText, true) + StringExternal("Param/Value/EB9676F2")), PlayerGroupAll());
    }
    else {
    }
}

void gf_FormatReplayTransmissionButton (int lp_screenButtonID) {
    // Implementation
    libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lp_screenButtonID), c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lp_screenButtonID), "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lp_screenButtonID), "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds", PlayerGroupAll());
    libNtve_gf_SetScreenButtonBorderImage(lp_screenButtonID, "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds", "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds", c_triggerImageTypeBorder);
    libNtve_gf_SetScreenButtonFlashingBorderImage(lp_screenButtonID, "Assets\\Textures\\ui_button_generic_anim_terran.dds", "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds", c_triggerImageTypeBorder);
    libNtve_gf_SetDialogItemStyle(libNtve_gf_ScreenButton(lp_screenButtonID), "TutorialReplyButtonText", PlayerGroupAll());
}

void gf_CreateMainMenuButton (int lp_width, int lp_height, int lp_x, int lp_y, text lp_buttonText) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_mainDialog, lp_width, lp_height, c_anchorTop, lp_x, lp_y, StringExternal("Param/Value/1B0FAE53"), TextCase(lp_buttonText, true), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_tutorial_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_button_tutorial_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialButtonText", PlayerGroupAll());
}

void gf_CreateInfoText (unit lp_chosenUnit) {
    string auto09FC0B32_val;

    // Implementation
    auto09FC0B32_val = UnitGetType(lp_chosenUnit);
    if (auto09FC0B32_val == "CommandCenter") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/344643FA"), StringExternal("Param/Value/13E4D7FD"), StringExternal("Param/Value/0340297A"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "Barracks") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/1CEAC6A5"), StringExternal("Param/Value/1CC5AE31"), StringExternal("Param/Value/8EBB31CD"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "SupplyDepot") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/78123F68"), StringExternal("Param/Value/34F98054"), StringExternal("Param/Value/06F04AF7"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "SupplyDepotLowered") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/AF64B2F8"), StringExternal("Param/Value/D347A620"), StringExternal("Param/Value/D528D550"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "Refinery") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/861D9105"), StringExternal("Param/Value/D83AE475"), StringExternal("Param/Value/DAF25D8E"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "BarracksTechLab") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/092CC9B3"), StringExternal("Param/Value/22BF0666"), StringExternal("Param/Value/B0950CDC"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "SCV") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/DCE98E09"), StringExternal("Param/Value/8ACEB03F"), StringExternal("Param/Value/108F40A2"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "Marine") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/A9B0E81F"), StringExternal("Param/Value/F881D6B8"), StringExternal("Param/Value/208BFA8C"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "Marauder") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/5CB34C6B"), StringExternal("Param/Value/C042B679"), StringExternal("Param/Value/253B6784"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "MineralField") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/F7375561"), StringExternal("Param/Value/25BB2047"), StringExternal("Param/Value/A7A2E342"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "VespeneGeyser") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/73453AE1"), StringExternal("Param/Value/E93181F5"), StringExternal("Param/Value/745F7A1E"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else if (auto09FC0B32_val == "Beacon_Terran") {
        UnitSetInfoText(lp_chosenUnit, StringExternal("Param/Value/081E2F7E"), StringExternal("Param/Value/786F4799"), StringExternal("Param/Value/56198F68"));
        UnitSetState(lp_chosenUnit, c_unitStateTooltipable, true);
    }
    else {
        UnitClearInfoText(lp_chosenUnit);
    }
}

void gf_ResetMap () {
    // Implementation
    gv_noReply = true;
    TimerPause(gv_timer_Legs, true);
    TimerPause(gv_timer_Opening, true);
    TriggerStop(gt_OpeningAdjutantQ);
    TriggerStop(gt_OpeningAdjutantQ2);
    TriggerStop(gt_OpeningAdjutantQ22);
    TriggerStop(gt_TutorialCompleteQ);
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
    PortraitSetVisible(gv_cinematicWindow, PlayerGroupAll(), false, false);
    gf_HideReplayTransmissionButtons();
    DialogSetVisible(gv_mainDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_tutorialDialog, PlayerGroupAll(), false);
    libNtve_gf_RemoveDeathModelsinRegion(RegionPlayableMap());
    PortraitSetModel(libNtve_gf_CinematicPortrait(4), "AdjutantPortrait_L", false);
    VisRevealerDestroy(gv_tutorial_Visibility);
    Wait(0.1, c_timeGame);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(gv_pathingBlockerGroup01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup04);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup05);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_ResetMapTech();
    gf_ResetMapResources();
    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
}

void gf_ResetMapTech () {
    // Implementation
    TechTreeUnitAllow(gv_p01_USER, "SCV", false);
    TechTreeUnitAllow(gv_p01_USER, "Marine", false);
    TechTreeUnitAllow(gv_p01_USER, "Marauder", false);
    TechTreeUnitAllow(gv_p01_USER, "Reaper", false);
    TechTreeUnitAllow(gv_p01_USER, "Ghost", false);
    TechTreeUnitAllow(gv_p01_USER, "CommandCenter", false);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", true);
    TechTreeUnitAllow(gv_p01_USER, "SupplyDepot", true);
    TechTreeUnitAllow(gv_p01_USER, "Barracks", false);
    TechTreeUnitAllow(gv_p01_USER, "TechLab", false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("attack", 0), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RallyCommand", 0), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterLiftOff", 0), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTransport", 4), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksLiftOff", 0), true);
}

void gf_ResetMapResources () {
    // Implementation
    gf_ResetMineralField(RegionFromId(1));
    gf_ResetMineralField(RegionFromId(2));
    gf_ResetMineralField(RegionFromId(3));
    gf_ResetMineralField(RegionFromId(18));
    gf_ResetMineralField(RegionFromId(20));
    gf_ResetMineralField(RegionFromId(22));
    gf_ResetMineralField(RegionFromId(31));
    gf_ResetMineralField(RegionFromId(32));
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, 2500.0);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

void gf_SilenceQ () {
    // Implementation
    TransmissionClearAll();
    TriggerStop(gt_ClickReplayTransmissionButton);
    TriggerQueueClear(c_triggerQueueRemove);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
}

void gf_SetInfantryArmorUpgrades (int lp_player, int lp_level) {
    // Implementation
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel1", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel1", 0);
    }
    if ((lp_level >= 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel2", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel2", 0);
    }
    if ((lp_level >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel3", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel3", 0);
    }
}

void gf_ResetMineralField (region lp_mineralFieldArea) {
    // Variable Declarations
    unit lv_mineralField;

    // Variable Initialization
    lv_mineralField = null;

    // Implementation
    lv_mineralField = UnitGroupRandomUnit(UnitGroup("MineralField", 0, lp_mineralFieldArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive);
    if ((lv_mineralField == null)) {
        UnitCreate(1, "MineralField", 0, 0, RegionGetCenter(lp_mineralFieldArea), 270.0);
    }
    else {
        UnitSetPropertyFixed(lv_mineralField, c_unitPropResources, 1500.0);
    }
}

void gf_CreateMainReplayTransmissionButton (trigger lp_repeatedintrotrigger) {
    // Implementation
    gv_replay_Transmission_Trigger = lp_repeatedintrotrigger;
    DialogSetVisible(gv_replay_Transmission_Dialog_Main, PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_replay_Transmission_ButtonID_Main, 4.0, ColorWithAlpha(100.00, 64.71, 29.02, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    DialogControlSetVisible(gv_replay_Transmission_Border_Main, PlayerGroupAll(), true);
}

void gf_CreateTutorialReplayTransmissionButton (trigger lp_repeatedtrigger) {
    // Implementation
    gv_replay_Transmission_Trigger = lp_repeatedtrigger;
    DialogSetVisible(gv_tutorialDialog, PlayerGroupAll(), true);
    DialogSetVisible(gv_replay_Transmission_Dialog_Tutorial, PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(gv_replay_Transmission_ButtonID_Tutorial, 4.0, ColorWithAlpha(100.00, 64.71, 29.02, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
    DialogControlSetVisible(gv_replay_Transmission_Border_Tutorial, PlayerGroupAll(), true);
}

void gf_HideReplayTransmissionButtons () {
    // Implementation
    DialogSetVisible(gv_replay_Transmission_Dialog_Tutorial, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_replay_Transmission_Border_Tutorial, PlayerGroupAll(), false);
    DialogSetVisible(gv_replay_Transmission_Dialog_Main, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_replay_Transmission_Border_Main, PlayerGroupAll(), false);
}

bool gf_TutorialCompleted (int lp_type) {
    int autoE2AA3A5C_val;

    // Implementation
    autoE2AA3A5C_val = lp_type;
    if (autoE2AA3A5C_val == 1) {
        return gv_tutorialComplete_Camera;
    }
    else if (autoE2AA3A5C_val == 5) {
        return gv_tutorialComplete_Collection;
    }
    else if (autoE2AA3A5C_val == 3) {
        return gv_tutorialComplete_Combat;
    }
    else if (autoE2AA3A5C_val == 4) {
        return gv_tutorialComplete_Construction;
    }
    else if (autoE2AA3A5C_val == 2) {
        return gv_tutorialComplete_Movement;
    }
    else if (autoE2AA3A5C_val == 6) {
        return gv_tutorialComplete_Production;
    }
    else if (autoE2AA3A5C_val == 7) {
        return gv_tutorialComplete_Supply;
    }
    else if (autoE2AA3A5C_val == 0) {
        return gv_tutorialComplete_UserInterface;
    }
    else {
    }
    return false;
}

void gf_SetTutorialCompleted (int lp_type, bool lp_completed, bool lp_save) {
    int auto672A15CA_val;

    // Implementation
    auto672A15CA_val = lp_type;
    if (auto672A15CA_val == 1) {
        gv_tutorialComplete_Camera = lp_completed;
    }
    else if (auto672A15CA_val == 5) {
        gv_tutorialComplete_Collection = lp_completed;
    }
    else if (auto672A15CA_val == 3) {
        gv_tutorialComplete_Combat = lp_completed;
    }
    else if (auto672A15CA_val == 4) {
        gv_tutorialComplete_Construction = lp_completed;
    }
    else if (auto672A15CA_val == 2) {
        gv_tutorialComplete_Movement = lp_completed;
    }
    else if (auto672A15CA_val == 6) {
        gv_tutorialComplete_Production = lp_completed;
    }
    else if (auto672A15CA_val == 7) {
        gv_tutorialComplete_Supply = lp_completed;
    }
    else if (auto672A15CA_val == 0) {
        gv_tutorialComplete_UserInterface = lp_completed;
    }
    else {
    }
    if ((lp_save == true)) {
        gf_SaveTutorialData();
    }
    else {
    }
}

void gf_LoadTutorialData () {
    // Variable Declarations
    const string lv_section = "Completion";

    // Variable Initialization

    // Implementation
    if ((BankExists(gv_tUTORIALBANKPATH, gv_p01_USER) == false)) {
        gf_SetTutorialCompleted(1, false, false);
        gf_SetTutorialCompleted(5, false, false);
        gf_SetTutorialCompleted(3, false, false);
        gf_SetTutorialCompleted(4, false, false);
        gf_SetTutorialCompleted(2, false, false);
        gf_SetTutorialCompleted(6, false, false);
        gf_SetTutorialCompleted(7, false, false);
        gf_SetTutorialCompleted(0, false, false);
        return ;
    }
    else {
    }
    BankLoad(gv_tUTORIALBANKPATH, gv_p01_USER);
    gf_SetTutorialCompleted(1, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((1))), false);
    gf_SetTutorialCompleted(5, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((5))), false);
    gf_SetTutorialCompleted(3, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((3))), false);
    gf_SetTutorialCompleted(4, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((4))), false);
    gf_SetTutorialCompleted(2, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((2))), false);
    gf_SetTutorialCompleted(6, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((6))), false);
    gf_SetTutorialCompleted(7, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((7))), false);
    gf_SetTutorialCompleted(0, BankValueGetAsFlag(BankLastCreated(), lv_section, IntToString((0))), false);
}

void gf_SaveTutorialData () {
    // Variable Declarations
    const string lv_section = "Completion";

    // Variable Initialization

    // Implementation
    BankLoad(gv_tUTORIALBANKPATH, gv_p01_USER);
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((1)), gf_TutorialCompleted(1));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((5)), gf_TutorialCompleted(5));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((3)), gf_TutorialCompleted(3));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((4)), gf_TutorialCompleted(4));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((2)), gf_TutorialCompleted(2));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((6)), gf_TutorialCompleted(6));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((7)), gf_TutorialCompleted(7));
    BankValueSetFromFlag(BankLastCreated(), lv_section, IntToString((0)), gf_TutorialCompleted(0));
    BankSave(BankLastCreated());
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_LoadTutorialData();
    TriggerExecute(gt_Init01Players, true, true);
    TriggerExecute(gt_Init02Units, true, true);
    TriggerExecute(gt_Init03Technology, true, true);
    TriggerExecute(gt_Init04UserInterface, true, true);
    TriggerExecute(gt_CreateAndDisplayMainMenu, true, false);
    TriggerExecute(gt_StartFootageRecording, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_SIMULATOR, 5);
    libNtve_gf_SetAlliance(gv_p02_SIMULATOR, gv_p03_SIMULATOR, 7);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_SIMULATOR, 8);
    PlayerSetAlliance(gv_p03_SIMULATOR, c_allianceIdPushable, gv_p01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(UnitFromId(18), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(18), c_unitStateSelectable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(18), true);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_pathingBlockerGroup01, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Blocker4x4", 0, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_pathingBlockerGroup02, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PathingBlocker2x2", 0, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_pathingBlockerGroup03, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Blocker4x4", 0, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_pathingBlockerGroup04, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PathingBlocker2x2", 0, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_pathingBlockerGroup05, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init03Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRestrictionsEnable(gv_p01_USER, true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 12), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 10), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 11), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Technology_Init () {
    gt_Init03Technology = TriggerCreate("gt_Init03Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 User Interface
//--------------------------------------------------------------------------------------------------
bool gt_Init04UserInterface_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    UIUnitColorStyleOverride(PlayerGroupActive(), c_unitColorStyleNormal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04UserInterface_Init () {
    gt_Init04UserInterface = TriggerCreate("gt_Init04UserInterface_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Re-Create Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ReCreateDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerRestart(gv_timer_Legs);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), false, false);
    gf_HideReplayTransmissionButtons();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != 0)) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraLockInput(gv_p01_USER, true);
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    TriggerQueueClear(c_triggerQueueRemove);
    libNtve_gf_SetAlliance(gv_p01_USER, gv_p03_SIMULATOR, 8);
    libNtve_gf_SetAlliance(gv_p03_SIMULATOR, gv_p01_USER, 8);
    TipAlertPanelClear(PlayerGroupAll());
    UIAlertClear(gv_p01_USER);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gv_pickedCamera = 0;
    gv_pickedCollection = 0;
    gv_pickedCombat = 0;
    gv_pickedConstruction = 0;
    gv_pickedMovement = 0;
    gv_pickedUserInterface = 0;
    gv_pickedProduction = 0;
    gv_pickedSupply = 0;
    TriggerExecute(gt_CreateAndDisplayMainMenu, true, false);
    TriggerExecute(gt_TutorialCompleteQ, true, false);
    TriggerExecute(gt_ResetObjectives, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReCreateDialog_Init () {
    gt_ReCreateDialog = TriggerCreate("gt_ReCreateDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create And Display Main Menu
//--------------------------------------------------------------------------------------------------
bool gt_CreateAndDisplayMainMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UnitGroupLoopBegin(gv_pathingBlockerGroup01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_GlobalCinematicSetting(true);
    if ((gv_startingSequenceStarted == false)) {
        TimerStart(gv_timer_Opening, 15.0, false, c_timeGame);
        TimerStart(gv_timer_Legs, 60.0, false, c_timeGame);
    }
    else {
    }
    gv_startingSequenceStarted = true;
    TriggerExecute(gt_OpeningAdjutantQ, true, false);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(182), 0.0, -1, 10, true);
    CameraLockInput(gv_p01_USER, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_CreateDialogs, true, false);
    gf_IfConditionThenFormatButton(gv_tutorialComplete_UserInterface, gv_mainButton01_UserInterface, StringExternal("Param/Value/8C7B6B78"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Camera, gv_mainButton02_Camera, StringExternal("Param/Value/4BB78B6E"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Movement, gv_mainButton03_Movement, StringExternal("Param/Value/23E8350C"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Combat, gv_mainButton04_Combat, StringExternal("Param/Value/816BB193"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Construction, gv_mainButton05_Construction, StringExternal("Param/Value/3E15B07A"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Collection, gv_mainButton06_Collection, StringExternal("Param/Value/1CC4375F"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Production, gv_mainButton07_Production, StringExternal("Param/Value/7F8F27D2"));
    gf_IfConditionThenFormatButton(gv_tutorialComplete_Supply, gv_mainButton08_Supply, StringExternal("Param/Value/0D7903CE"));
    PortraitSetModel(gv_cinematicWindow, "AdjutantPortrait_L", false);
    PortraitSetVisible(gv_cinematicWindow, PlayerGroupAll(), true, false);
    DialogSetVisible(gv_mainDialog, PlayerGroupAll(), true);
    DialogSetVisible(gv_tutorialDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateAndDisplayMainMenu_Init () {
    gt_CreateAndDisplayMainMenu = TriggerCreate("gt_CreateAndDisplayMainMenu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Dialogs
//--------------------------------------------------------------------------------------------------
bool gt_CreateDialogs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemWidth;
    int lv_itemHeight;
    int lv_itemPosX;
    int lv_itemPosY;
    int lv_itemPosInc;

    // Variable Initialization
    lv_itemWidth = 550;
    lv_itemHeight = 84;
    lv_itemPosX = 97;
    lv_itemPosY = 225;
    lv_itemPosInc = 65;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(210, 90, c_anchorLeft, 42, 160, true);
    gv_tutorialDialog = DialogLastCreated();
    DialogSetImageVisible(gv_tutorialDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 205, 88, c_anchorCenter, 0, 0, StringExternal("Param/Value/49DA1D63"), "Assets\\Textures\\ui_chat_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_replay_Transmission_Border_Tutorial = DialogControlLastCreated();
    DialogControlSetVisible(gv_replay_Transmission_Border_Tutorial, PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(gv_replay_Transmission_ButtonID_Tutorial, TextCase(StringExternal("Param/Value/B72655EF"), true), 180, 55, c_anchorLeft, 82, 125, gt_ClickReplayTransmissionButton);
    gv_replay_Transmission_Dialog_Tutorial = libNtve_gf_ScreenButtonDialog(gv_replay_Transmission_ButtonID_Tutorial);
    DialogSetPosition(libNtve_gf_ScreenButtonDialog(gv_replay_Transmission_ButtonID_Tutorial), c_anchorLeft, 55, 155);
    gf_FormatReplayTransmissionButton(gv_replay_Transmission_ButtonID_Tutorial);
    DialogSetVisible(gv_replay_Transmission_Dialog_Tutorial, PlayerGroupAll(), false);
    DialogCreate(1120, 1200, c_anchorCenter, 0, 0, true);
    gv_mainDialog = DialogLastCreated();
    DialogSetImageVisible(gv_mainDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1120, 1200, c_anchorCenter, 0, 0, StringExternal("Param/Value/3EAA3E58"), "Assets\\Textures\\ui_tutorial_frame.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 205, 88, c_anchorLeft, 125, 85, StringExternal("Param/Value/422E7F65"), "Assets\\Textures\\ui_chat_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_replay_Transmission_Border_Main = DialogControlLastCreated();
    DialogControlSetVisible(gv_replay_Transmission_Border_Main, PlayerGroupAll(), false);
    libNtve_gf_DisplayScreenButton(gv_replay_Transmission_ButtonID_Main, TextCase(StringExternal("Param/Value/15DA9B3E"), true), 180, 55, c_anchorLeft, 432, 150, gt_ClickReplayTransmissionButton);
    gv_replay_Transmission_Dialog_Main = libNtve_gf_ScreenButtonDialog(gv_replay_Transmission_ButtonID_Main);
    DialogSetPosition(libNtve_gf_ScreenButtonDialog(gv_replay_Transmission_ButtonID_Main), c_anchorCenter, -334, 80);
    gf_FormatReplayTransmissionButton(gv_replay_Transmission_ButtonID_Main);
    DialogSetVisible(gv_replay_Transmission_Dialog_Main, PlayerGroupAll(), false);
    PortraitCreate(-324, -131, c_anchorCenter, 260, 365, null, "", "", false, true);
    gv_cinematicWindow = PortraitLastCreated();
    PortraitSetBorderVisible(PortraitLastCreated(), false);
    PortraitSetModel(gv_cinematicWindow, "AdjutantPortrait_L", false);
    PortraitSetVisible(gv_cinematicWindow, PlayerGroupAll(), true, false);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialog, lv_itemWidth, lv_itemHeight, c_anchorTop, 88, 165, TextCase(StringExternal("Param/Value/E60F4B90"), true), Color(100,100,100), false, 2.0);
    gv_mainLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialMenuTitle", PlayerGroupAll());
    lv_itemPosY = (lv_itemPosY + lv_itemHeight);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/4CD62889"));
    gv_mainButton01_UserInterface = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/6F069F0C"));
    gv_mainButton02_Camera = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/6FB0E206"));
    gv_mainButton03_Movement = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/1AB80760"));
    gv_mainButton04_Combat = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/DF4BFB16"));
    gv_mainButton05_Construction = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/E803983E"));
    gv_mainButton06_Collection = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/EE18EA12"));
    gv_mainButton07_Production = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/E5EFE93D"));
    gv_mainButton08_Supply = DialogControlLastCreated();
    lv_itemPosY = (lv_itemPosY + lv_itemPosInc);
    lv_itemPosY = (lv_itemPosY + 70);
    gf_CreateMainMenuButton(lv_itemWidth, lv_itemHeight, lv_itemPosX, lv_itemPosY, StringExternal("Param/Value/AC9C928D"));
    gv_mainButton09_Quit = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateDialogs_Init () {
    gt_CreateDialogs = TriggerCreate("gt_CreateDialogs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Objectives
//--------------------------------------------------------------------------------------------------
bool gt_ResetObjectives_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroy(gv_objectiveUserInterface);
    TriggerEnable(gt_ObjectiveUserInterfaceCreateQ, true);
    ObjectiveDestroy(gv_objectiveCamera01);
    ObjectiveDestroy(gv_objectiveCamera02);
    TriggerEnable(gt_ObjectiveCamera01CreateQ, true);
    TriggerEnable(gt_ObjectiveCamera02CreateQ, true);
    ObjectiveDestroy(gv_objectiveMovement01);
    ObjectiveDestroy(gv_objectiveMovement02);
    ObjectiveDestroy(gv_objectiveMovement03);
    ObjectiveDestroy(gv_objectiveMovement04);
    ObjectiveDestroy(gv_objectiveMovement05);
    TriggerEnable(gt_ObjectiveMovement01CreateQ, true);
    TriggerEnable(gt_ObjectiveMovement02CreateQ, true);
    TriggerEnable(gt_ObjectiveMovement03CreateQ, true);
    TriggerEnable(gt_ObjectiveMovement04CreateQ, true);
    TriggerEnable(gt_ObjectiveMovement05CreateQ, true);
    ObjectiveDestroy(gv_objectiveCombat01);
    ObjectiveDestroy(gv_objectiveCombat02);
    ObjectiveDestroy(gv_objectiveCombat03);
    TriggerEnable(gt_ObjectiveCombat01CreateQ, true);
    TriggerEnable(gt_ObjectiveCombat02CreateQ, true);
    TriggerEnable(gt_ObjectiveCombat03CreateQ, true);
    ObjectiveDestroy(gv_objectiveConstruction01);
    ObjectiveDestroy(gv_objectiveConstruction02);
    TriggerEnable(gt_ObjectiveConstruction01CreateQ, true);
    TriggerEnable(gt_ObjectiveConstruction02CreateQ, true);
    ObjectiveDestroy(gv_objectiveCollection01);
    ObjectiveDestroy(gv_objectiveCollection02);
    ObjectiveDestroy(gv_objectiveCollection03);
    TriggerEnable(gt_ObjectiveCollection01CreateQ, true);
    TriggerEnable(gt_ObjectiveCollection02CreateQ, true);
    TriggerEnable(gt_ObjectiveCollection03CreateQ, true);
    ObjectiveDestroy(gv_objectiveProduction01);
    ObjectiveDestroy(gv_objectiveProduction02);
    ObjectiveDestroy(gv_objectiveProduction03);
    ObjectiveDestroy(gv_objectiveProduction04);
    TriggerEnable(gt_ObjectiveProduction01CreateQ, true);
    TriggerEnable(gt_ObjectiveProduction02CreateQ, true);
    TriggerEnable(gt_ObjectiveProduction03CreateQ, true);
    TriggerEnable(gt_ObjectiveProduction04CreateQ, true);
    ObjectiveDestroy(gv_objectiveSupply01);
    TriggerEnable(gt_ObjectiveSupply01CreateQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetObjectives_Init () {
    gt_ResetObjectives = TriggerCreate("gt_ResetObjectives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Tutorial
//--------------------------------------------------------------------------------------------------
bool gt_QuitTutorial_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton09_Quit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SaveTutorialData();
    GameOver(gv_p01_USER, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitTutorial_Init () {
    gt_QuitTutorial = TriggerCreate("gt_QuitTutorial_Func");
    TriggerAddEventDialogControl(gt_QuitTutorial, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Adjutant Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningAdjutantQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_timer_Opening, true);
    TimerPause(gv_timer_Legs, true);
    TriggerQueueEnter();
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    PortraitSetModel(gv_cinematicWindow, "AdjutantPortrait_L", false);
    PortraitSetVisible(gv_cinematicWindow, PlayerGroupAll(), true, false);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00060", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_cinematicWindow, SoundLink("TutorialAdjutant00060", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00068", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_cinematicWindow, SoundLink("TutorialAdjutant00068", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    PortraitSetVisible(gv_portrait_Adjutant, PlayerGroupAll(), true, false);
    TimerPause(gv_timer_Opening, false);
    TimerPause(gv_timer_Legs, false);
    gf_CreateMainReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningAdjutantQ_Init () {
    gt_OpeningAdjutantQ = TriggerCreate("gt_OpeningAdjutantQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Adjutant A01 Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningAdjutantQ2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
    }
    else {
    }
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00165", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_cinematicWindow, SoundLink("TutorialAdjutant00165", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateMainReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningAdjutantQ2_Init () {
    gt_OpeningAdjutantQ2 = TriggerCreate("gt_OpeningAdjutantQ2_Func");
    TriggerAddEventTimer(gt_OpeningAdjutantQ2, gv_timer_Opening);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Adjutant A02 Q
//--------------------------------------------------------------------------------------------------
bool gt_OpeningAdjutantQ22_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
    }
    else {
    }
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00166", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_cinematicWindow, SoundLink("TutorialAdjutant00166", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    if ((gv_noReply == false)) {
        DialogSetVisible(gv_replay_Transmission_Dialog_Main, PlayerGroupAll(), true);
        libNtve_gf_FlashScreenButton(gv_replay_Transmission_ButtonID_Main, 4.0, ColorWithAlpha(100.00, 64.71, 29.02, 0.00), ColorWithAlpha(0.00, 0.00, 0.00, 0.00));
        DialogControlSetVisible(gv_replay_Transmission_Border_Main, PlayerGroupAll(), true);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningAdjutantQ22_Init () {
    gt_OpeningAdjutantQ22 = TriggerCreate("gt_OpeningAdjutantQ22_Func");
    TriggerAddEventTimer(gt_OpeningAdjutantQ22, gv_timer_Legs);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TutorialCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }

        if (!((gv_tutorialComplete_UserInterface == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Camera == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Movement == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Combat == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Construction == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Collection == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Production == true))) {
            return false;
        }

        if (!((gv_tutorialComplete_Supply == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/343397AB"));
    Wait(2.0, c_timeGame);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00092", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), gv_cinematicWindow, SoundLink("TutorialAdjutant00092", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    CampaignProgressSetTutorialFinished(PlayerGroupAll(), "WingsOfLiberty", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialCompleteQ_Init () {
    gt_TutorialCompleteQ = TriggerCreate("gt_TutorialCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Replay Transmission Button
//--------------------------------------------------------------------------------------------------
bool gt_ClickReplayTransmissionButton_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    SoundPlay(SoundLink("UI_ScrollButtonSelect", -1), PlayerGroupAll(), 200.0, 0.0);
    gv_replay_Transmission_Is_Playing = true;
    TriggerExecute(gv_replay_Transmission_Trigger, false, true);
    gv_replay_Transmission_Is_Playing = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClickReplayTransmissionButton_Init () {
    gt_ClickReplayTransmissionButton = TriggerCreate("gt_ClickReplayTransmissionButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Footage Recording
//--------------------------------------------------------------------------------------------------
bool gt_StartFootageRecording_Func (bool testConds, bool runActions) {
    int auto3C0E21C3_n;
    int auto3C0E21C3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == true)) {
        Wait(3.0, c_timeGame);
        DialogSetVisible(gv_mainDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_tutorialDialog, PlayerGroupAll(), false);
        PortraitSetVisible(gv_portrait_Adjutant, PlayerGroupAll(), false, false);
        auto3C0E21C3_n = 4;
        auto3C0E21C3_i = 1;
        while (auto3C0E21C3_i <= auto3C0E21C3_n) {
            TransmissionClearAll();
            Wait(0.1, c_timeGame);
            auto3C0E21C3_i = auto3C0E21C3_i + 1;
        }
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_UserInterface01, false, false);
        Wait(0.1, c_timeGame);
        MovieStartRecording("Video_Tutorial_Overview");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartFootageRecording_Init () {
    gt_StartFootageRecording = TriggerCreate("gt_StartFootageRecording_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Footage Recording
//--------------------------------------------------------------------------------------------------
bool gt_StopFootageRecording_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == true)) {
        MovieStopRecording();
        Wait(0.5, c_timeGame);
        ConsoleCommand("exit", true, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopFootageRecording_Init () {
    gt_StopFootageRecording = TriggerCreate("gt_StopFootageRecording_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UserInterface01
//--------------------------------------------------------------------------------------------------
bool gt_UserInterface01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton01_UserInterface))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    TechTreeUnitAllow(gv_p01_USER, "SCV", false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterLiftOff", 0), false);
    gv_pickedUserInterface = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(207), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_p01_USER, RegionGetCenter(RegionFromId(13)));
    gv_uI_CommandCenter01 = UnitLastCreated();
    gf_CreateInfoText(gv_uI_CommandCenter01);
    UnitSelect(gv_uI_CommandCenter01, gv_p01_USER, true);
    VisRevealerCreate(gv_p01_USER, RegionFromId(10));
    gv_tutorial_Visibility = VisRevealerLastCreated();
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(207)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ObjectiveUserInterfaceCreateQ, true, true);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_UserInterface01Q, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UserInterface01_Init () {
    gt_UserInterface01 = TriggerCreate("gt_UserInterface01_Func");
    TriggerAddEventDialogControl(gt_UserInterface01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: (01-03)UserInterface01 Q
//--------------------------------------------------------------------------------------------------
bool gt_UserInterface01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionObjectiveUI;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00001", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00001");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00001", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00067", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00067");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00067", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00072", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00072");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00072", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialmissionobjectiveshighlight.dds", c_triggerBlendModeAdd, 400, 90, c_anchorTopLeft, 0, 55);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    Wait(1.0, c_timeGame);
    // Transmission - SoundLink("TutorialAdjutant00002", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00002");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00002", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialminimaphighlight.dds", c_triggerBlendModeAdd, 404, 372, c_anchorBottomLeft, 0, 0);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", 0, gv_p01_USER, RegionGetCenter(RegionFromId(14)));
    gv_uI_MissleTurret02 = UnitLastCreated();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(14)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", 0, gv_p01_USER, RegionGetCenter(RegionFromId(15)));
    gv_uI_MissleTurret03 = UnitLastCreated();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(15)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", 0, gv_p01_USER, RegionGetCenter(RegionFromId(16)));
    gv_uI_MissleTurret04 = UnitLastCreated();
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(16)), 2.0, Color(0.00, 100.00, 0.00));
    Wait(0.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    UnitRemove(gv_uI_MissleTurret02);
    UnitRemove(gv_uI_MissleTurret03);
    UnitRemove(gv_uI_MissleTurret04);
    Wait(1.0, c_timeReal);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    // Transmission - SoundLink("TutorialAdjutant00004", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00004");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00004", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialinfolefthighlight.dds", c_triggerBlendModeAdd, 313, 246, c_anchorBottomLeft, 390, 0);
    libNtve_gf_DisplayScreenImage(2, "Assets\\Textures\\tutorialinforighthighlight.dds", c_triggerBlendModeAdd, 313, 246, c_anchorBottomRight, 590, 0);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    libNtve_gf_PulseScreenImage(2, 1.75, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_StopPulsingScreenImage(2);
    libNtve_gf_HideScreenImage(false, 1);
    libNtve_gf_HideScreenImage(false, 2);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TutorialAdjutant00003", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00003");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00003", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TutorialAdjutant00005", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00005");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00005", -1), 0.0, c_transmissionDurationAdd, false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/32C54194"), 0), StringExternal("Param/Value/7BA2B87F"), StringExternal("Param/Value/BB3BD1D4"), "Assets\\Textures\\ui_icon_attention.dds");
    Wait(6.0, c_timeGame);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialmenuhighlight.dds", c_triggerBlendModeAdd, 282, 34, c_anchorTopLeft, 535, 2);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TutorialAdjutant00069", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00069");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00069", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 180, 50, c_anchorTopRight, 309, 2);
    libNtve_gf_DisplayScreenImage(2, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 180, 50, c_anchorTopRight, 165, 2);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    libNtve_gf_PulseScreenImage(2, 1.75, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TutorialAdjutant00070", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00070");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00070", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(3.5, c_timeGame);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_StopPulsingScreenImage(2);
    libNtve_gf_HideScreenImage(false, 1);
    libNtve_gf_HideScreenImage(false, 2);
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 180, 50, c_anchorTopRight, 11, 2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    Wait(1.0, c_timeReal);
    // Transmission - SoundLink("TutorialAdjutant00071", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00071");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00071", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialmenuhighlight.dds", c_triggerBlendModeAdd, 282, 34, c_anchorTopLeft, -6, 2);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveUserInterfaceComplete, true, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UserInterface01Q_Init () {
    gt_UserInterface01Q = TriggerCreate("gt_UserInterface01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UserInterface Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_UserInterfaceCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedUserInterface == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00167", -1)
    libNtve_gf_MovieDynamicSubtitlesandDuration("TutorialAdjutant00167");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00167", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UserInterfaceCompleteQ_Init () {
    gt_UserInterfaceCompleteQ = TriggerCreate("gt_UserInterfaceCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {UserInterface} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUserInterfaceCreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedUserInterface == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/E4F8D808"), StringExternal("Param/Value/87E9DD21"), c_objectiveStateActive, true);
    gv_objectiveUserInterface = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUserInterfaceCreateQ_Init () {
    gt_ObjectiveUserInterfaceCreateQ = TriggerCreate("gt_ObjectiveUserInterfaceCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {UserInterface} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUserInterfaceComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedUserInterface == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealerDestroy(gv_tutorial_Visibility);
    TriggerStop(gt_UserInterface01Q);
    gf_SetTutorialCompleted(0, true, true);
    gf_SilenceQ();
    TipAlertPanelClear(PlayerGroupAll());
    TriggerExecute(gt_ObjectiveUserInterfaceCreateQ, true, false);
    ObjectiveSetState(gv_objectiveUserInterface, c_objectiveStateCompleted);
    TriggerExecute(gt_UserInterfaceCompleteQ, true, true);
    Wait(0.5, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_StopFootageRecording, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUserInterfaceComplete_Init () {
    gt_ObjectiveUserInterfaceComplete = TriggerCreate("gt_ObjectiveUserInterfaceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera01
//--------------------------------------------------------------------------------------------------
bool gt_Camera01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton02_Camera))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    gv_pickedCamera = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(211), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(17), true);
    TriggerEnable(gt__0407Camera01LoopArrows, true);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(211)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gv_priorCameraLoc = CameraGetTarget(gv_p01_USER);
    TriggerEnable(gt_ObjectiveCamera01Update, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveCamera01CreateQ, true, true);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Camera01Q, true, false);
    Wait(0.5, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera01_Init () {
    gt_Camera01 = TriggerCreate("gt_Camera01_Func");
    TriggerAddEventDialogControl(gt_Camera01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Camera01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCamera01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00006", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00006", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__0407Camera01LoopArrows, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_Camera01TIP, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera01Q_Init () {
    gt_Camera01Q = TriggerCreate("gt_Camera01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Camera01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera01CompleteQ_Init () {
    gt_Camera01CompleteQ = TriggerCreate("gt_Camera01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (04-07)Camera01 Loop Arrows
//--------------------------------------------------------------------------------------------------
bool gt__0407Camera01LoopArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrowRight;
    int lv_arrowDown;
    int lv_arrowLeft;
    int lv_arrowUp;

    // Variable Initialization
    lv_arrowRight = c_invalidDialogControlId;
    lv_arrowDown = c_invalidDialogControlId;
    lv_arrowLeft = c_invalidDialogControlId;
    lv_arrowUp = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_scrolledRIGHT == false)) {
        libNtve_gf_DisplayScreenImage(4, "Assets\\Textures\\tutorialarrow04.dds", c_triggerBlendModeAdd, 128, 128, c_anchorRight, 0, 0);
    }
    else {
    }
    if ((gv_scrolledDOWN == false)) {
        libNtve_gf_DisplayScreenImage(5, "Assets\\Textures\\tutorialarrow04.dds", c_triggerBlendModeAdd, 128, 128, c_anchorBottom, 0, 0);
    }
    else {
    }
    if ((gv_scrolledLEFT == false)) {
        libNtve_gf_DisplayScreenImage(6, "Assets\\Textures\\tutorialarrow04.dds", c_triggerBlendModeAdd, 128, 128, c_anchorLeft, 0, 0);
    }
    else {
    }
    if ((gv_scrolledUP == false)) {
        libNtve_gf_DisplayScreenImage(7, "Assets\\Textures\\tutorialarrow04.dds", c_triggerBlendModeAdd, 128, 128, c_anchorTop, 0, 0);
    }
    else {
    }
    lv_arrowRight = libNtve_gf_ScreenImageDialogItem(4);
    lv_arrowDown = libNtve_gf_ScreenImageDialogItem(5);
    lv_arrowLeft = libNtve_gf_ScreenImageDialogItem(6);
    lv_arrowUp = libNtve_gf_ScreenImageDialogItem(7);
    libNtve_gf_SetDialogItemRotation(lv_arrowRight, 0, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowDown, 90, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowLeft, 180, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowUp, 270, PlayerGroupAll());
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__0407Camera01LoopArrows_Init () {
    gt__0407Camera01LoopArrows = TriggerCreate("gt__0407Camera01LoopArrows_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (04-07)Camera01 Stop Arrows
//--------------------------------------------------------------------------------------------------
bool gt__0407Camera01StopArrows_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__0407Camera01LoopArrows);
    libNtve_gf_HideScreenImage(false, 4);
    libNtve_gf_HideScreenImage(false, 5);
    libNtve_gf_HideScreenImage(false, 6);
    libNtve_gf_HideScreenImage(false, 7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__0407Camera01StopArrows_Init () {
    gt__0407Camera01StopArrows = TriggerCreate("gt__0407Camera01StopArrows_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Camera01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCamera01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate((StringExternal("Param/Value/6D7774ED") + gv_tEXTUP + gv_tEXTDOWN + gv_tEXTLEFT + gv_tEXTRIGHT), StringExternal("Param/Value/5EB2ED6A"), c_objectiveStateActive, true);
    gv_objectiveCamera01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCamera01CreateQ_Init () {
    gt_ObjectiveCamera01CreateQ = TriggerCreate("gt_ObjectiveCamera01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Camera01} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCamera01Update_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_currentCameraLoc;

    // Variable Initialization
    lv_currentCameraLoc = null;

    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentCameraLoc = CameraGetTarget(gv_p01_USER);
    if ((PointGetY(lv_currentCameraLoc) > (PointGetY(gv_priorCameraLoc) + gv_threshold))) {
        gv_scrolledUP = true;
        gv_tEXTUP = StringExternal("Param/Value/4946BD30");
        libNtve_gf_HideScreenImage(false, 7);
    }
    else {
    }
    if ((PointGetY(lv_currentCameraLoc) < (PointGetY(gv_priorCameraLoc) - gv_threshold))) {
        gv_scrolledDOWN = true;
        gv_tEXTDOWN = StringExternal("Param/Value/F552FB25");
        libNtve_gf_HideScreenImage(false, 5);
    }
    else {
    }
    if ((PointGetX(lv_currentCameraLoc) < (PointGetX(gv_priorCameraLoc) - gv_threshold))) {
        gv_scrolledLEFT = true;
        gv_tEXTLEFT = StringExternal("Param/Value/373F4DCC");
        libNtve_gf_HideScreenImage(false, 6);
    }
    else {
    }
    if ((PointGetX(lv_currentCameraLoc) > (PointGetX(gv_priorCameraLoc) + gv_threshold))) {
        gv_scrolledRIGHT = true;
        gv_tEXTRIGHT = StringExternal("Param/Value/195F1DF9");
        libNtve_gf_HideScreenImage(false, 4);
    }
    else {
    }
    ObjectiveSetName(gv_objectiveCamera01, (StringExternal("Param/Value/DF96EF8F") + gv_tEXTUP + gv_tEXTDOWN + gv_tEXTLEFT + gv_tEXTRIGHT + StringExternal("Param/Value/C64884E2")));
    gv_priorCameraLoc = lv_currentCameraLoc;
    if ((gv_scrolledDOWN == true) && (gv_scrolledUP == true) && (gv_scrolledLEFT == true) && (gv_scrolledRIGHT == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveCamera01Complete, true, false);
        gv_tEXTUP = StringExternal("Param/Value/A3C7575B");
        gv_tEXTDOWN = StringExternal("Param/Value/4CC23319");
        gv_tEXTLEFT = StringExternal("Param/Value/3F1E8548");
        gv_tEXTRIGHT = StringExternal("Param/Value/981E6AA0");
        ObjectiveSetName(gv_objectiveCamera01, (StringExternal("Param/Value/004B6BB5") + gv_tEXTUP + gv_tEXTDOWN + gv_tEXTLEFT + gv_tEXTRIGHT + StringExternal("Param/Value/39DF7EEC")));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCamera01Update_Init () {
    gt_ObjectiveCamera01Update = TriggerCreate("gt_ObjectiveCamera01Update_Func");
    TriggerEnable(gt_ObjectiveCamera01Update, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveCamera01Update, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Camera01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCamera01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__0407Camera01StopArrows, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Camera01Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveCamera01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCamera01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Camera01CompleteQ, true, true);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Camera02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCamera01Complete_Init () {
    gt_ObjectiveCamera01Complete = TriggerCreate("gt_ObjectiveCamera01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera02
//--------------------------------------------------------------------------------------------------
bool gt_Camera02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, gv_p01_USER, RegionGetCenter(RegionFromId(27)));
    gv_cam_Beacon = UnitLastCreated();
    gf_CreateInfoText(UnitLastCreated());
    UnitSetState(gv_cam_Beacon, c_unitStateSelectable, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(27)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_cam_Ping = PingLastCreated();
    PingSetTooltip(gv_cam_Ping, StringExternal("Param/Value/0BC1BBEE"));
    TriggerEnable(gt_ObjectiveCamera02Complete, true);
    TriggerEnable(gt__0809Camera02LoopMouse, true);
    TriggerExecute(gt_ObjectiveCamera02CreateQ, true, true);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Camera02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera02_Init () {
    gt_Camera02 = TriggerCreate("gt_Camera02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Camera02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCamera02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00007", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00007", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__0809Camera02LoopMouse, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera02Q_Init () {
    gt_Camera02Q = TriggerCreate("gt_Camera02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Camera02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00074", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00074", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera02CompleteQ_Init () {
    gt_Camera02CompleteQ = TriggerCreate("gt_Camera02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (08-09)Camera02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__0809Camera02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(8, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(8);
    libNtve_gf_DisplayScreenImage(9, "Assets\\Textures\\tutorialminimaphighlight.dds", c_triggerBlendModeAdd, 404, 372, c_anchorBottomLeft, 5, 0);
    libNtve_gf_PulseScreenImage(9, 1.75, 100.0, 0.0);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__0809Camera02LoopMouse_Init () {
    gt__0809Camera02LoopMouse = TriggerCreate("gt__0809Camera02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (08-09)Camera02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__0809Camera02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__0809Camera02LoopMouse);
    libNtve_gf_HideScreenImage(false, 8);
    libNtve_gf_StopPulsingScreenImage(9);
    libNtve_gf_HideScreenImage(false, 9);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__0809Camera02StopMouse_Init () {
    gt__0809Camera02StopMouse = TriggerCreate("gt__0809Camera02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Camera02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCamera02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/0F5AAC03"), StringExternal("Param/Value/E74D0D6B"), c_objectiveStateActive, true);
    gv_objectiveCamera02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCamera02CreateQ_Init () {
    gt_ObjectiveCamera02CreateQ = TriggerCreate("gt_ObjectiveCamera02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Camera02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCamera02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((EventPlayer() == gv_p01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.1, c_timeGame);
    if ((RegionContainsPoint(RegionFromId(30), CameraGetTarget(gv_p01_USER)) == true)) {
        TriggerExecute(gt__0809Camera02StopMouse, true, false);
        gf_HideReplayTransmissionButtons();
        TriggerStop(gt_Camera02Q);
        gf_SetTutorialCompleted(1, true, true);
        gf_SilenceQ();
        libNtve_gf_StopPulsingScreenImage(16);
        libNtve_gf_HideScreenImage(false, 16);
        UnitKill(gv_cam_Beacon);
        PingDestroy(gv_cam_Ping);
        TriggerExecute(gt_ObjectiveCamera02CreateQ, true, false);
        ObjectiveSetState(gv_objectiveCamera02, c_objectiveStateCompleted);
        Wait(0.5, c_timeGame);
        TriggerExecute(gt_Camera02CompleteQ, true, true);
        VisRevealerDestroy(gv_tutorial_Visibility);
        CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        gv_scrolledUP = false;
        gv_scrolledDOWN = false;
        gv_scrolledLEFT = false;
        gv_scrolledRIGHT = false;
        gv_priorCameraLoc = null;
        TriggerExecute(gt_ReCreateDialog, true, false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCamera02Complete_Init () {
    gt_ObjectiveCamera02Complete = TriggerCreate("gt_ObjectiveCamera02Complete_Func");
    TriggerEnable(gt_ObjectiveCamera02Complete, false);
    TriggerAddEventCameraMove(gt_ObjectiveCamera02Complete, gv_p01_USER, c_cameraMoveReasonMinimap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera01 TIP
//--------------------------------------------------------------------------------------------------
bool gt_Camera01TIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCamera == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/7C0933F7"), 0), StringExternal("Param/Value/CFFCD42F"), StringExternal("Param/Value/6B82A1F8"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Camera01TIP_Init () {
    gt_Camera01TIP = TriggerCreate("gt_Camera01TIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement01
//--------------------------------------------------------------------------------------------------
bool gt_Movement01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton03_Movement))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    TriggerEnable(gt_LoopMouseButtonLeft01, true);
    TriggerEnable(gt__11Movement02LoopMouse, true);
    TriggerEnable(gt_ObjectiveMovement01Complete, true);
    TriggerEnable(gt_ObjectiveMovement02Complete, true);
    gv_pickedMovement = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(250), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(25), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointFromId(249));
    gv_mov_Marine01 = UnitLastCreated();
    gf_CreateInfoText(UnitLastCreated());
    UnitSetTeamColorIndex(gv_mov_Marine01, 2);
    UnitGroupLoopBegin(gv_pathingBlockerGroup01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(250)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveMovement01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement01_Init () {
    gt_Movement01 = TriggerCreate("gt_Movement01_Func");
    TriggerAddEventDialogControl(gt_Movement01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveMovement01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00009", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00009", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_LoopMouseButtonLeft01, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement01Q_Init () {
    gt_Movement01Q = TriggerCreate("gt_Movement01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__10Movement01StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement01CompleteQ_Init () {
    gt_Movement01CompleteQ = TriggerCreate("gt_Movement01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (10)Movement01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt_LoopMouseButtonLeft01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(10, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(10);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoopMouseButtonLeft01_Init () {
    gt_LoopMouseButtonLeft01 = TriggerCreate("gt_LoopMouseButtonLeft01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (10)Movement01 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__10Movement01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_LoopMouseButtonLeft01);
    libNtve_gf_HideScreenImage(false, 10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__10Movement01StopMouse_Init () {
    gt__10Movement01StopMouse = TriggerCreate("gt__10Movement01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/D51180E1"), StringExternal("Param/Value/50430381"), c_objectiveStateActive, true);
    gv_objectiveMovement01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement01CreateQ_Init () {
    gt_ObjectiveMovement01CreateQ = TriggerCreate("gt_ObjectiveMovement01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Movement01Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveMovement01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveMovement01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement01CompleteQ, true, true);
    TriggerExecute(gt_Movement02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement01Complete_Init () {
    gt_ObjectiveMovement01Complete = TriggerCreate("gt_ObjectiveMovement01Complete_Func");
    TriggerEnable(gt_ObjectiveMovement01Complete, false);
    TriggerAddEventUnitSelected(gt_ObjectiveMovement01Complete, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement02
//--------------------------------------------------------------------------------------------------
bool gt_Movement02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveMovement02) != c_objectiveStateCompleted)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, gv_p01_USER, RegionGetCenter(RegionFromId(9)));
        gv_mov_Beacon01 = UnitLastCreated();
        UnitSetState(gv_mov_Beacon01, c_unitStateSelectable, false);
        gf_CreateInfoText(UnitLastCreated());
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(9)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_mov_Ping = PingLastCreated();
        PingSetTooltip(gv_mov_Ping, StringExternal("Param/Value/32A4202F"));
    }
    else {
    }
    TriggerExecute(gt_ObjectiveMovement02CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement02Q, true, false);
    UnitClearSelection(gv_p01_USER);
    UnitSelect(gv_mov_Marine01, gv_p01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement02_Init () {
    gt_Movement02 = TriggerCreate("gt_Movement02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveMovement02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00168", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00168", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__11Movement02LoopMouse, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement02Q_Init () {
    gt_Movement02Q = TriggerCreate("gt_Movement02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00075", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00075", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement02CompleteQ_Init () {
    gt_Movement02CompleteQ = TriggerCreate("gt_Movement02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (11)Movement02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__11Movement02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(11, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(11);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__11Movement02LoopMouse_Init () {
    gt__11Movement02LoopMouse = TriggerCreate("gt__11Movement02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (11)Movement02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__11Movement02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__11Movement02LoopMouse);
    libNtve_gf_HideScreenImage(false, 11);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__11Movement02StopMouse_Init () {
    gt__11Movement02StopMouse = TriggerCreate("gt__11Movement02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/E019520B"), StringExternal("Param/Value/A292FE8B"), c_objectiveStateActive, true);
    gv_objectiveMovement02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement02CreateQ_Init () {
    gt_ObjectiveMovement02CreateQ = TriggerCreate("gt_ObjectiveMovement02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_pathingBlockerGroup01);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt__11Movement02StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Movement02Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveMovement02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveMovement02, c_objectiveStateCompleted);
    UnitKill(gv_mov_Beacon01);
    PingDestroy(gv_mov_Ping);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement02CompleteQ, true, true);
    TriggerExecute(gt_Movement03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement02Complete_Init () {
    gt_ObjectiveMovement02Complete = TriggerCreate("gt_ObjectiveMovement02Complete_Func");
    TriggerEnable(gt_ObjectiveMovement02Complete, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMovement02Complete, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement03
//--------------------------------------------------------------------------------------------------
bool gt_Movement03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_tutorial_Visibility);
    Wait(0.2, c_timeGame);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(21), true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(346), 1.5, 0, 20, true);
    CameraLockInput(gv_p01_USER, true);
    Wait(1.5, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    TriggerEnable(gt_ObjectiveMovement03Complete, true);
    UnitGroupLoopBegin(gv_pathingBlockerGroup02);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup04);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ObjectiveMovement03CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement03Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement03_Init () {
    gt_Movement03 = TriggerCreate("gt_Movement03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement03 Q 
//--------------------------------------------------------------------------------------------------
bool gt_Movement03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00169", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00169", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00171", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00171", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement03Q_Init () {
    gt_Movement03Q = TriggerCreate("gt_Movement03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement03 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement03CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00092", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00092", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement03CompleteQ_Init () {
    gt_Movement03CompleteQ = TriggerCreate("gt_Movement03CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement03} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement03CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/1C04A952"), StringExternal("Param/Value/D2EEC3FE"), c_objectiveStateActive, true);
    gv_objectiveMovement03 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, gv_p01_USER, RegionGetCenter(RegionFromId(27)));
    gv_mov_Beacon02 = UnitLastCreated();
    gf_CreateInfoText(UnitLastCreated());
    UnitSetState(gv_mov_Beacon02, c_unitStateSelectable, false);
    VisRevealerCreate(gv_p01_USER, RegionFromId(28));
    gv_mov_VisibilityFOW = VisRevealerLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(27)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_mov_Ping = PingLastCreated();
    PingSetTooltip(gv_mov_Ping, StringExternal("Param/Value/AAC7E7EF"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement03CreateQ_Init () {
    gt_ObjectiveMovement03CreateQ = TriggerCreate("gt_ObjectiveMovement03CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement03} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement03Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Movement03Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveMovement03CreateQ, true, false);
    ObjectiveSetState(gv_objectiveMovement03, c_objectiveStateCompleted);
    UnitKill(gv_mov_Beacon02);
    PingDestroy(gv_mov_Ping);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement03CompleteQ, true, true);
    VisRevealerDestroy(gv_mov_VisibilityFOW);
    TriggerExecute(gt_Movement04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement03Complete_Init () {
    gt_ObjectiveMovement03Complete = TriggerCreate("gt_ObjectiveMovement03Complete_Func");
    TriggerEnable(gt_ObjectiveMovement03Complete, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMovement03Complete, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement04
//--------------------------------------------------------------------------------------------------
bool gt_Movement04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(gv_mov_Marine01);
    TriggerEnable(gt__12Movement04LoopMouse, true);
    TriggerEnable(gt_ObjectiveMovement04Complete, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(202));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(203));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(204));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(205));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(206));
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraSetBounds(PlayerGroupAll(), RegionFromId(11), true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(398), 1.5, 0, 20, true);
    CameraLockInput(gv_p01_USER, true);
    Wait(1.5, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    UnitGroupLoopBegin(gv_pathingBlockerGroup03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pathingBlockerGroup04);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveMovement04CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement04Q, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MovementTIP, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement04_Init () {
    gt_Movement04 = TriggerCreate("gt_Movement04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement04 Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement04Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveMovement04) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00079", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00079", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt__12Movement04LoopMouse, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement04Q_Init () {
    gt_Movement04Q = TriggerCreate("gt_Movement04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement04 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement04CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__12Movement04StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00090", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement04CompleteQ_Init () {
    gt_Movement04CompleteQ = TriggerCreate("gt_Movement04CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (12)Movement04 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__12Movement04LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(12, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(12);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(4.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__12Movement04LoopMouse_Init () {
    gt__12Movement04LoopMouse = TriggerCreate("gt__12Movement04LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (12)Movement04 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__12Movement04StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__12Movement04LoopMouse);
    libNtve_gf_HideScreenImage(false, 12);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__12Movement04StopMouse_Init () {
    gt__12Movement04StopMouse = TriggerCreate("gt__12Movement04StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement04} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement04CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/16B2218B"), StringExternal("Param/Value/0E0A5E06"), c_objectiveStateActive, true);
    gv_objectiveMovement04 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement04CreateQ_Init () {
    gt_ObjectiveMovement04CreateQ = TriggerCreate("gt_ObjectiveMovement04CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement04} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement04Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupSelected(gv_p01_USER), c_unitCountAlive) >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Movement04Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveMovement04CreateQ, true, false);
    ObjectiveSetState(gv_objectiveMovement04, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement04CompleteQ, true, true);
    TriggerExecute(gt_Movement05, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement04Complete_Init () {
    gt_ObjectiveMovement04Complete = TriggerCreate("gt_ObjectiveMovement04Complete_Func");
    TriggerEnable(gt_ObjectiveMovement04Complete, false);
    TriggerAddEventUnitSelected(gt_ObjectiveMovement04Complete, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement05
//--------------------------------------------------------------------------------------------------
bool gt_Movement05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetBounds(PlayerGroupAll(), RegionFromId(58), true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(200), 1.5, 0, 20, true);
    CameraLockInput(gv_p01_USER, true);
    Wait(1.5, c_timeGame);
    CameraLockInput(gv_p01_USER, false);
    gv_mov_RightClickedMulti = false;
    TriggerEnable(gt__13Movement05LoopMouse, true);
    TriggerEnable(gt_Movement05MoveOrderCheck, true);
    TriggerEnable(gt_Movement05AttackMoveOrderCheck, true);
    TriggerEnable(gt_ObjectiveMovement05Complete, true);
    TriggerExecute(gt_ObjectiveMovement05CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement05Q, true, false);
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement05_Init () {
    gt_Movement05 = TriggerCreate("gt_Movement05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement05 Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement05Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveMovement05) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00170", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00170", -1), 0.0, c_transmissionDurationAdd, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
        TriggerExecute(gt__13Movement05LoopMouse, true, false);
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement05Q_Init () {
    gt_Movement05Q = TriggerCreate("gt_Movement05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement05 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Movement05CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00081", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00081", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement05CompleteQ_Init () {
    gt_Movement05CompleteQ = TriggerCreate("gt_Movement05CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (13)Movement05 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__13Movement05LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((gv_mov_RightClickedMulti == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(13, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(13);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__13Movement05LoopMouse_Init () {
    gt__13Movement05LoopMouse = TriggerCreate("gt__13Movement05LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (13)Movement05 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__13Movement05StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__13Movement05LoopMouse);
    libNtve_gf_HideScreenImage(false, 13);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__13Movement05StopMouse_Init () {
    gt__13Movement05StopMouse = TriggerCreate("gt__13Movement05StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement05 Move Order Check
//--------------------------------------------------------------------------------------------------
bool gt_Movement05MoveOrderCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((gv_mov_RightClickedMulti == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mov_RightClickedMulti = true;
    TriggerExecute(gt__13Movement05StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement05MoveOrderCheck_Init () {
    gt_Movement05MoveOrderCheck = TriggerCreate("gt_Movement05MoveOrderCheck_Func");
    TriggerEnable(gt_Movement05MoveOrderCheck, false);
    TriggerAddEventUnitOrder(gt_Movement05MoveOrderCheck, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_Movement05MoveOrderCheck, null, AbilityCommand("", 0));
    TriggerAddEventUnitOrder(gt_Movement05MoveOrderCheck, null, AbilityCommand("move", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement05 Attack-Move Order Check
//--------------------------------------------------------------------------------------------------
bool gt_Movement05AttackMoveOrderCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((gv_mov_RightClickedMulti == false))) {
            return false;
        }

        if (!((OrderGetTargetPoint(EventUnitOrder()) != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mov_RightClickedMulti = true;
    TriggerExecute(gt__13Movement05StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement05AttackMoveOrderCheck_Init () {
    gt_Movement05AttackMoveOrderCheck = TriggerCreate("gt_Movement05AttackMoveOrderCheck_Func");
    TriggerEnable(gt_Movement05AttackMoveOrderCheck, false);
    TriggerAddEventUnitOrder(gt_Movement05AttackMoveOrderCheck, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement05} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement05CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/925E3AAF"), StringExternal("Param/Value/AB5D89E3"), c_objectiveStateActive, true);
    gv_objectiveMovement05 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, gv_p01_USER, RegionGetCenter(RegionFromId(59)));
    gv_mov_Beacon03 = UnitLastCreated();
    gf_CreateInfoText(UnitLastCreated());
    UnitSetState(gv_mov_Beacon03, c_unitStateSelectable, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(59)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_mov_Ping = PingLastCreated();
    PingSetTooltip(gv_mov_Ping, StringExternal("Param/Value/ECD7EC7B"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement05CreateQ_Init () {
    gt_ObjectiveMovement05CreateQ = TriggerCreate("gt_ObjectiveMovement05CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Movement05} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMovement05Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_p01_USER, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mov_RightClickedMulti = true;
    TriggerExecute(gt__13Movement05StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Movement05MoveOrderCheck, false);
    TriggerEnable(gt_Movement05AttackMoveOrderCheck, false);
    TriggerStop(gt_Movement05Q);
    gf_SetTutorialCompleted(2, true, true);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveMovement05CreateQ, true, false);
    ObjectiveSetState(gv_objectiveMovement05, c_objectiveStateCompleted);
    UnitKill(gv_mov_Beacon03);
    PingDestroy(gv_mov_Ping);
    gv_mov_RightClickedMulti = false;
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Movement05CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(gv_pathingBlockerGroup03);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMovement05Complete_Init () {
    gt_ObjectiveMovement05Complete = TriggerCreate("gt_ObjectiveMovement05Complete_Func");
    TriggerEnable(gt_ObjectiveMovement05Complete, false);
    TriggerAddEventUnitRegion(gt_ObjectiveMovement05Complete, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement TIP
//--------------------------------------------------------------------------------------------------
bool gt_MovementTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedMovement == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2E7757E2"), 0), StringExternal("Param/Value/F25B7ABC"), StringExternal("Param/Value/2B0F35E5"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MovementTIP_Init () {
    gt_MovementTIP = TriggerCreate("gt_MovementTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat01
//--------------------------------------------------------------------------------------------------
bool gt_Combat01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton04_Combat))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    gv_pickedCombat = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(184), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(8), true);
    CameraLockInput(gv_p01_USER, false);
    TriggerEnable(gt__14Combat01LoopMouse, true);
    TriggerEnable(gt_ObjectiveCombat01Failed, true);
    TriggerEnable(gt_ObjectiveCombat01Update, true);
    gv_com_AttackStarted01 = false;
    UnitGroupLoopBegin(gv_pathingBlockerGroup05);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(187));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(189));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(190));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(191));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(192));
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(193));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(195));
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_SIMULATOR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_com_RedMarines, UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_SetInfantryArmorUpgrades(gv_p01_USER, 3);
    gf_SetInfantryArmorUpgrades(gv_p02_SIMULATOR, 3);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(184)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveCombat01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat01_Init () {
    gt_Combat01 = TriggerCreate("gt_Combat01_Func");
    TriggerAddEventDialogControl(gt_Combat01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Combat01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCombat01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00172", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00172", -1), 0.0, c_transmissionDurationAdd, false);
    TriggerEnable(gt_Combat01AttackStarted, true);
    Wait(0.5, c_timeGame);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        UnitGroupLoopBegin(UnitGroup("Marine", gv_p02_SIMULATOR, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            TriggerExecute(gt__14Combat01LoopMouse, true, false);
            libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "BriefingUnitSelectRed", "Center");
            gv_com_Actor = libNtve_gf_ActorLastCreated();
            ActorSend(gv_com_Actor, "SetScale 0.600000");
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PingCreate(PlayerGroupAll(), "PingWarning", PointFromId(463), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        gv_com_Ping = PingLastCreated();
        PingSetTooltip(gv_com_Ping, StringExternal("Param/Value/7BC834F7"));
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    // Transmission - SoundLink("TutorialAdjutant00173", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00173", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00174", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00174", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat01Q_Init () {
    gt_Combat01Q = TriggerCreate("gt_Combat01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Combat01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00082", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00082", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat01CompleteQ_Init () {
    gt_Combat01CompleteQ = TriggerCreate("gt_Combat01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (14)Combat01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__14Combat01LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_com_AttackStarted01 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(14, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(14);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__14Combat01LoopMouse_Init () {
    gt__14Combat01LoopMouse = TriggerCreate("gt__14Combat01LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (14)Combat01 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__14Combat01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__14Combat01LoopMouse);
    libNtve_gf_HideScreenImage(false, 14);
    UnitGroupLoopBegin(UnitGroup("Marine", gv_p02_SIMULATOR, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(UnitGroupLoopCurrent()), "ModelHosted"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__14Combat01StopMouse_Init () {
    gt__14Combat01StopMouse = TriggerCreate("gt__14Combat01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat01 Attack Started
//--------------------------------------------------------------------------------------------------
bool gt_Combat01AttackStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((gv_com_AttackStarted01 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_com_AttackStarted01 = true;
    TriggerExecute(gt__14Combat01StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat01AttackStarted_Init () {
    gt_Combat01AttackStarted = TriggerCreate("gt_Combat01AttackStarted_Func");
    TriggerEnable(gt_Combat01AttackStarted, false);
    TriggerAddEventUnitAttacked(gt_Combat01AttackStarted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/31DEF9EE"), StringExternal("Param/Value/018284E3"), c_objectiveStateActive, true);
    gv_objectiveCombat01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat01CreateQ_Init () {
    gt_ObjectiveCombat01CreateQ = TriggerCreate("gt_ObjectiveCombat01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat01} Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat01Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup("Marine", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveCombat01Update, false);
    gv_objectiveCombat01Number = 0;
    TriggerExecute(gt_Combat01AttackStarted, false, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat01Q);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat01, c_objectiveStateFailed);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_objectiveCombat01);
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_ObjectiveCombat01CreateQ, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_SIMULATOR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Combat01, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat01Failed_Init () {
    gt_ObjectiveCombat01Failed = TriggerCreate("gt_ObjectiveCombat01Failed_Func");
    TriggerEnable(gt_ObjectiveCombat01Failed, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat01Failed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat01} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat01Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_SIMULATOR))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCombat01CreateQ, true, false);
    gv_objectiveCombat01Number=gv_objectiveCombat01Number + 1;
    ObjectiveSetName(gv_objectiveCombat01, (StringExternal("Param/Value/F62182D4") + IntToText(gv_objectiveCombat01Number) + StringExternal("Param/Value/0E48D09A") + (IntToText(gv_objectiveCombat01Total)) + StringExternal("Param/Value/0F6A8A8A")));
    if ((gv_objectiveCombat01Number == gv_objectiveCombat01Total)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ObjectiveCombat01Failed, false);
        TriggerExecute(gt_ObjectiveCombat01Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat01Update_Init () {
    gt_ObjectiveCombat01Update = TriggerCreate("gt_ObjectiveCombat01Update_Func");
    TriggerEnable(gt_ObjectiveCombat01Update, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat01Update, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ObjectiveCombat01Failed, false);
    gv_objectiveCombat01Number = 0;
    TriggerExecute(gt__14Combat01StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat01Q);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat01CompleteQ, true, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_Combat02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat01Complete_Init () {
    gt_ObjectiveCombat01Complete = TriggerCreate("gt_ObjectiveCombat01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat02
//--------------------------------------------------------------------------------------------------
bool gt_Combat02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_RemoveDeathModelsinRegion(RegionPlayableMap());
    CameraSetBounds(PlayerGroupAll(), RegionFromId(8), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(187));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(189));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(190));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(191));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(192));
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(197));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(198));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(430));
    gv_com_AttackStarted02 = false;
    gv_com02_AllowMoreLines = false;
    TriggerEnable(gt__15Combat02LoopMouse, true);
    TriggerEnable(gt_Combat02AttackIssued, true);
    TriggerEnable(gt_ObjectiveCombat02CreateQ, true);
    TriggerEnable(gt_ObjectiveCombat02Update, true);
    TriggerEnable(gt_ObjectiveCombat02Failed, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(184), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingCreate(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(59)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_com_Ping = PingLastCreated();
    PingSetTooltip(gv_com_Ping, StringExternal("Param/Value/EEE7AB66"));
    TriggerExecute(gt_ObjectiveCombat02CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat02_Init () {
    gt_Combat02 = TriggerCreate("gt_Combat02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat02 Q 
//--------------------------------------------------------------------------------------------------
bool gt_Combat02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCombat02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    if ((gv_replay_Transmission_Is_Playing == false)) {
        TriggerExecute(gt__15Combat02LoopMouse, true, false);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("attack", 0), true);
    }
    else {
    }
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00175", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00175", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00083", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00083", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat02Q_Init () {
    gt_Combat02Q = TriggerCreate("gt_Combat02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Combat02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00092", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00092", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat02CompleteQ_Init () {
    gt_Combat02CompleteQ = TriggerCreate("gt_Combat02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (15)Combat02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__15Combat02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_com_AttackStarted02 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(15, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(15);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__15Combat02LoopMouse_Init () {
    gt__15Combat02LoopMouse = TriggerCreate("gt__15Combat02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (15)Combat02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__15Combat02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__15Combat02LoopMouse);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("attack", 0), false);
    libNtve_gf_HideScreenImage(false, 15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__15Combat02StopMouse_Init () {
    gt__15Combat02StopMouse = TriggerCreate("gt__15Combat02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat02 Attack Issued
//--------------------------------------------------------------------------------------------------
bool gt_Combat02AttackIssued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_com_AttackStarted02 = true;
    TriggerExecute(gt__15Combat02StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat02AttackIssued_Init () {
    gt_Combat02AttackIssued = TriggerCreate("gt_Combat02AttackIssued_Func");
    TriggerEnable(gt_Combat02AttackIssued, false);
    TriggerAddEventButtonPressed(gt_Combat02AttackIssued, c_playerAny, "Attack");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/EEAB7369"), StringExternal("Param/Value/A8D72A25"), c_objectiveStateActive, true);
    gv_objectiveCombat02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat02CreateQ_Init () {
    gt_ObjectiveCombat02CreateQ = TriggerCreate("gt_ObjectiveCombat02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat02} Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat02Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup("Marine", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveCombat02Update, false);
    gv_objectiveCombat02Number = 0;
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat02Q);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat02, c_objectiveStateFailed);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_objectiveCombat02);
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_ObjectiveCombat02CreateQ, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_SIMULATOR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Combat02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat02Failed_Init () {
    gt_ObjectiveCombat02Failed = TriggerCreate("gt_ObjectiveCombat02Failed_Func");
    TriggerEnable(gt_ObjectiveCombat02Failed, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat02Failed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat02} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat02Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_SIMULATOR))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCombat02CreateQ, true, false);
    gv_objectiveCombat02Number=gv_objectiveCombat02Number + 1;
    ObjectiveSetName(gv_objectiveCombat02, (StringExternal("Param/Value/D891D9BE") + IntToText(gv_objectiveCombat02Number) + StringExternal("Param/Value/9149B4EF") + (IntToText(gv_objectiveCombat02Total)) + StringExternal("Param/Value/0E3D90C8")));
    if ((gv_objectiveCombat02Number == gv_objectiveCombat02Total)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ObjectiveCombat02Failed, false);
        TriggerExecute(gt__15Combat02StopMouse, true, false);
        TriggerExecute(gt_ObjectiveCombat02Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat02Update_Init () {
    gt_ObjectiveCombat02Update = TriggerCreate("gt_ObjectiveCombat02Update_Func");
    TriggerEnable(gt_ObjectiveCombat02Update, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat02Update, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ObjectiveCombat02Failed, false);
    gv_objectiveCombat02Number = 0;
    TriggerExecute(gt_Combat02AttackIssued, false, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat02Q);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat02, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat02CompleteQ, true, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_Combat03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat02Complete_Init () {
    gt_ObjectiveCombat02Complete = TriggerCreate("gt_ObjectiveCombat02Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat03
//--------------------------------------------------------------------------------------------------
bool gt_Combat03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_RemoveDeathModelsinRegion(RegionPlayableMap());
    CameraSetBounds(PlayerGroupAll(), RegionFromId(8), true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(187));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(189));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(190));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(191));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p01_USER, PointFromId(192));
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(161));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(305));
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_SIMULATOR, PointFromId(399));
    gv_com_AttackStarted03 = false;
    gv_com03_AllowMoreLines = false;
    TriggerEnable(gt__16Combat03LoopMouse, true);
    TriggerEnable(gt_Combat03AttackIssued, true);
    TriggerEnable(gt_ObjectiveCombat03CreateQ, true);
    TriggerEnable(gt_ObjectiveCombat03Update, true);
    TriggerEnable(gt_ObjectiveCombat03Failed, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(184), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PingCreate(PlayerGroupAll(), "MinimapPing", RegionGetCenter(RegionFromId(59)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_com_Ping = PingLastCreated();
    PingSetTooltip(gv_com_Ping, StringExternal("Param/Value/F2BBD437"));
    TriggerExecute(gt_ObjectiveCombat03CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat03Q, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_AttackTIP, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat03_Init () {
    gt_Combat03 = TriggerCreate("gt_Combat03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat03 Q
//--------------------------------------------------------------------------------------------------
bool gt_Combat03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCombat03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    if ((gv_replay_Transmission_Is_Playing == false)) {
        TriggerExecute(gt__16Combat03LoopMouse, true, false);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("attack", 0), true);
    }
    else {
    }
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00175", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00175", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00083", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00083", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat03Q_Init () {
    gt_Combat03Q = TriggerCreate("gt_Combat03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat03 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Combat03CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00085", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00085", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat03CompleteQ_Init () {
    gt_Combat03CompleteQ = TriggerCreate("gt_Combat03CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (16)Combat03 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__16Combat03LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_com_AttackStarted03 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(16, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(16);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__16Combat03LoopMouse_Init () {
    gt__16Combat03LoopMouse = TriggerCreate("gt__16Combat03LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (16)Combat03 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__16Combat03StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__16Combat03LoopMouse);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("attack", 0), false);
    libNtve_gf_HideScreenImage(false, 16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__16Combat03StopMouse_Init () {
    gt__16Combat03StopMouse = TriggerCreate("gt__16Combat03StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat03 Attack Issued
//--------------------------------------------------------------------------------------------------
bool gt_Combat03AttackIssued_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_com_AttackStarted03 = false;
    TriggerExecute(gt__16Combat03StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combat03AttackIssued_Init () {
    gt_Combat03AttackIssued = TriggerCreate("gt_Combat03AttackIssued_Func");
    TriggerEnable(gt_Combat03AttackIssued, false);
    TriggerAddEventButtonPressed(gt_Combat03AttackIssued, c_playerAny, "Attack");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat03} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat03CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/E0655C30"), StringExternal("Param/Value/106BB856"), c_objectiveStateActive, true);
    gv_objectiveCombat03 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat03CreateQ_Init () {
    gt_ObjectiveCombat03CreateQ = TriggerCreate("gt_ObjectiveCombat03CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat03} Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat03Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup("Marine", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveCombat03Update, false);
    gv_objectiveCombat03Number = 0;
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat03Q);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat03CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat03, c_objectiveStateFailed);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_objectiveCombat03);
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_ObjectiveCombat03CreateQ, true);
    TriggerEnable(gt_ObjectiveCombat03CreateQ, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_SIMULATOR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Combat03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat03Failed_Init () {
    gt_ObjectiveCombat03Failed = TriggerCreate("gt_ObjectiveCombat03Failed_Func");
    TriggerEnable(gt_ObjectiveCombat03Failed, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat03Failed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat03} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat03Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_SIMULATOR))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCombat03CreateQ, true, false);
    gv_objectiveCombat03Number=gv_objectiveCombat03Number + 1;
    ObjectiveSetName(gv_objectiveCombat03, (StringExternal("Param/Value/BAE65611") + IntToText(gv_objectiveCombat03Number) + StringExternal("Param/Value/512059DD") + (IntToText(gv_objectiveCombat03Total)) + StringExternal("Param/Value/9EE8AC86")));
    if ((gv_objectiveCombat03Number == gv_objectiveCombat03Total)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ObjectiveCombat03Failed, false);
        TriggerExecute(gt__16Combat03StopMouse, true, false);
        TriggerExecute(gt_ObjectiveCombat03Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat03Update_Init () {
    gt_ObjectiveCombat03Update = TriggerCreate("gt_ObjectiveCombat03Update_Func");
    TriggerEnable(gt_ObjectiveCombat03Update, false);
    TriggerAddEventUnitDied(gt_ObjectiveCombat03Update, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Combat03} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCombat03Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ObjectiveCombat03Failed, false);
    gv_objectiveCombat03Number = 0;
    TriggerExecute(gt_Combat03AttackIssued, false, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Combat03Q);
    gf_SetTutorialCompleted(3, true, true);
    gf_SilenceQ();
    PingDestroy(gv_com_Ping);
    TriggerExecute(gt_ObjectiveCombat03CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCombat03, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Combat03CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(gv_pathingBlockerGroup05);
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_SetInfantryArmorUpgrades(gv_p01_USER, 0);
    gf_SetInfantryArmorUpgrades(gv_p02_SIMULATOR, 0);
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCombat03Complete_Init () {
    gt_ObjectiveCombat03Complete = TriggerCreate("gt_ObjectiveCombat03Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack TIP
//--------------------------------------------------------------------------------------------------
bool gt_AttackTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCombat == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D4DC0A28"), 0), StringExternal("Param/Value/3F56CB4F"), StringExternal("Param/Value/2B3ABFB0"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackTIP_Init () {
    gt_AttackTIP = TriggerCreate("gt_AttackTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction01
//--------------------------------------------------------------------------------------------------
bool gt_Construction01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton05_Construction))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    TriggerEnable(gt__17Construction01LoopMouse, true);
    TriggerEnable(gt_ObjectiveConstruction01Complete, true);
    gv_con02_AllowMoreLines01 = false;
    TriggerEnable(gt_Construction02BuildStructurePressed, true);
    gv_pickedConstruction = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(183), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(23), true);
    TechTreeUnitAllow(gv_p01_USER, "Barracks", false);
    TechTreeUnitAllow(gv_p01_USER, "CommandCenter", true);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", false);
    TechTreeUnitAllow(gv_p01_USER, "SupplyDepot", false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p01_USER, PointFromId(179));
    gv_con_SCV = UnitLastCreated();
    gf_CreateInfoText(gv_con_SCV);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(183)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveConstruction01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Construction01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction01_Init () {
    gt_Construction01 = TriggerCreate("gt_Construction01_Func");
    TriggerAddEventDialogControl(gt_Construction01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Construction01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveConstruction01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00015", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00015", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        TriggerExecute(gt__17Construction01LoopMouse, true, false);
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "BriefingUnitSelect", "Center");
            gv_con_Actor01 = libNtve_gf_ActorLastCreated();
            ActorSend(gv_con_Actor01, "SetScale 0.600000");
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction01Q_Init () {
    gt_Construction01Q = TriggerCreate("gt_Construction01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Construction01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction01CompleteQ_Init () {
    gt_Construction01CompleteQ = TriggerCreate("gt_Construction01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (17)Construction01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__17Construction01LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(17, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(17);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__17Construction01LoopMouse_Init () {
    gt__17Construction01LoopMouse = TriggerCreate("gt__17Construction01LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (17)Construction01 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__17Construction01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__17Construction01LoopMouse);
    libNtve_gf_HideScreenImage(false, 17);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__17Construction01StopMouse_Init () {
    gt__17Construction01StopMouse = TriggerCreate("gt__17Construction01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Construction01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveConstruction01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/D6AB69EB"), StringExternal("Param/Value/7443B020"), c_objectiveStateActive, true);
    gv_objectiveConstruction01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveConstruction01CreateQ_Init () {
    gt_ObjectiveConstruction01CreateQ = TriggerCreate("gt_ObjectiveConstruction01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Construction01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveConstruction01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_con_Actor01);
    TriggerExecute(gt__17Construction01StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerStop(gt_Construction01Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveConstruction01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveConstruction01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Construction01CompleteQ, true, true);
    TriggerExecute(gt_Construction02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveConstruction01Complete_Init () {
    gt_ObjectiveConstruction01Complete = TriggerCreate("gt_ObjectiveConstruction01Complete_Func");
    TriggerEnable(gt_ObjectiveConstruction01Complete, false);
    TriggerAddEventUnitSelected(gt_ObjectiveConstruction01Complete, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02
//--------------------------------------------------------------------------------------------------
bool gt_Construction02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_commandCenter;

    // Variable Initialization
    lv_commandCenter = null;

    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_con02_AllowMoreLines02 = false;
    TriggerEnable(gt_Construction02CommandCenterStarted, true);
    TriggerEnable(gt_ObjectiveConstruction02Complete, true);
    TriggerEnable(gt_Construction02MoreLines02Q, true);
    TriggerEnable(gt__18Construction02LoopMouse, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerExecute(gt_ObjectiveConstruction02CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Construction02Q, true, false);
    gv_con02_AllowMoreLines01 = true;
    if ((UnitGroupHasUnit(UnitGroupSelected(gv_p01_USER), gv_con_SCV) == false)) {
        UnitClearSelection(gv_p01_USER);
        UnitSelect(gv_con_SCV, gv_p01_USER, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02_Init () {
    gt_Construction02 = TriggerCreate("gt_Construction02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Construction02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveConstruction02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    if ((gv_replay_Transmission_Is_Playing == false) && (gv_con_CommandCenterStarted == false)) {
        TriggerExecute(gt__18Construction02LoopMouse, true, false);
    }
    else {
    }
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00016", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00016", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02Q_Init () {
    gt_Construction02Q = TriggerCreate("gt_Construction02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 More Lines01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Construction02MoreLines01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveConstruction02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_con02_AllowMoreLines01 == true))) {
        Wait(0.1, c_timeGame);
    }
    gv_con02_AllowMoreLines02 = true;
    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00176", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00176", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00018", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00018", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02MoreLines01Q_Init () {
    gt_Construction02MoreLines01Q = TriggerCreate("gt_Construction02MoreLines01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 More Lines02 Q 
//--------------------------------------------------------------------------------------------------
bool gt_Construction02MoreLines02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_commandCenter;

    // Variable Initialization
    lv_commandCenter = null;

    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveConstruction02) != c_objectiveStateCompleted))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_con02_AllowMoreLines02 == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerExecute(gt_ConstructionTIP, true, false);
    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00087", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00087", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02MoreLines02Q_Init () {
    gt_Construction02MoreLines02Q = TriggerCreate("gt_Construction02MoreLines02Q_Func");
    TriggerEnable(gt_Construction02MoreLines02Q, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Construction02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00088", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00088", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02CompleteQ_Init () {
    gt_Construction02CompleteQ = TriggerCreate("gt_Construction02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (18)Construction02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__18Construction02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((gv_con_CommandCenterStarted == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(18, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(18);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 0), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__18Construction02LoopMouse_Init () {
    gt__18Construction02LoopMouse = TriggerCreate("gt__18Construction02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (18)Construction02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__18Construction02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__18Construction02LoopMouse);
    libNtve_gf_HideScreenImage(false, 18);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__18Construction02StopMouse_Init () {
    gt__18Construction02StopMouse = TriggerCreate("gt__18Construction02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 Build Structure Pressed
//--------------------------------------------------------------------------------------------------
bool gt_Construction02BuildStructurePressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Construction02MoreLines01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02BuildStructurePressed_Init () {
    gt_Construction02BuildStructurePressed = TriggerCreate("gt_Construction02BuildStructurePressed_Func");
    TriggerEnable(gt_Construction02BuildStructurePressed, false);
    TriggerAddEventButtonPressed(gt_Construction02BuildStructurePressed, c_playerAny, "TerranBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 Command Center Started
//--------------------------------------------------------------------------------------------------
bool gt_Construction02CommandCenterStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "CommandCenter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_con_CommandCenterStarted = true;
    TriggerExecute(gt__18Construction02StopMouse, true, false);
    TriggerExecute(gt_Construction02MoreLines02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02CommandCenterStarted_Init () {
    gt_Construction02CommandCenterStarted = TriggerCreate("gt_Construction02CommandCenterStarted_Func");
    TriggerEnable(gt_Construction02CommandCenterStarted, false);
    TriggerAddEventUnitConstructProgress(gt_Construction02CommandCenterStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction02 Command Center Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_Construction02CommandCenterCancelled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "CommandCenter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 0), true);
    TriggerEnable(gt_Construction02CommandCenterStarted, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Construction02CommandCenterCancelled_Init () {
    gt_Construction02CommandCenterCancelled = TriggerCreate("gt_Construction02CommandCenterCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_Construction02CommandCenterCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Construction02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveConstruction02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/24134034"), StringExternal("Param/Value/554F55DA"), c_objectiveStateActive, true);
    gv_objectiveConstruction02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveConstruction02CreateQ_Init () {
    gt_ObjectiveConstruction02CreateQ = TriggerCreate("gt_ObjectiveConstruction02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Construction02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveConstruction02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "CommandCenter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateInfoText(EventUnitProgressUnit());
    gv_con_CommandCenterStarted = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Construction02MoreLines02Q, false);
    TriggerEnable(gt_Construction02BuildStructurePressed, false);
    TriggerEnable(gt_Construction02CommandCenterStarted, false);
    TriggerStop(gt_Construction02Q);
    TriggerStop(gt_Construction02MoreLines01Q);
    TriggerStop(gt_Construction02MoreLines02Q);
    gf_SetTutorialCompleted(4, true, true);
    gf_SilenceQ();
    libNtve_gf_StopPulsingScreenImage(28);
    libNtve_gf_HideScreenImage(false, 28);
    TriggerExecute(gt__18Construction02StopMouse, true, false);
    TriggerExecute(gt_ObjectiveConstruction02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveConstruction02, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Construction02CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveConstruction02Complete_Init () {
    gt_ObjectiveConstruction02Complete = TriggerCreate("gt_ObjectiveConstruction02Complete_Func");
    TriggerEnable(gt_ObjectiveConstruction02Complete, false);
    TriggerAddEventUnitConstructProgress(gt_ObjectiveConstruction02Complete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construction TIP
//--------------------------------------------------------------------------------------------------
bool gt_ConstructionTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedConstruction == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/988567B7"), 0), StringExternal("Param/Value/5E95162A"), StringExternal("Param/Value/6CAFE8CA"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConstructionTIP_Init () {
    gt_ConstructionTIP = TriggerCreate("gt_ConstructionTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection01
//--------------------------------------------------------------------------------------------------
bool gt_Collection01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton06_Collection))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    gv_pickedCollection = 1;
    gv_col_HarvestedMineral = false;
    gv_col01_AllowMoreLines = false;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(74), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(23), true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TechTreeUnitAllow(gv_p01_USER, "Barracks", false);
    TechTreeUnitAllow(gv_p01_USER, "CommandCenter", false);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", false);
    TechTreeUnitAllow(gv_p01_USER, "SupplyDepot", false);
    TechTreeUnitAllow(gv_p01_USER, "SCV", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterLiftOff", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTransport", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RallyCommand", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("attack", 0), false);
    TriggerEnable(gt__19Collection01LoopMouse, true);
    TriggerEnable(gt_Collection01HarvestedMineralCheck, true);
    TriggerEnable(gt_ObjectiveCollection01Update, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_p01_USER, RegionGetCenter(RegionFromId(6)));
    gv_col_CommandCenter = UnitLastCreated();
    gf_CreateInfoText(gv_col_CommandCenter);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(32));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(163));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(165));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(171));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(173));
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(178));
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        gf_CreateInfoText(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(74)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveCollection01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Collection01Q, true, false);
    gv_col01_AllowMoreLines = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection01_Init () {
    gt_Collection01 = TriggerCreate("gt_Collection01_Func");
    TriggerAddEventDialogControl(gt_Collection01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00019", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00019", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(4.5, c_timeGame);
    if ((gv_replay_Transmission_Is_Playing == false) && (gv_col_HarvestedMineral == false) && (ObjectiveGetState(gv_objectiveCollection01) != c_objectiveStateCompleted)) {
        TriggerExecute(gt__19Collection01LoopMouse, true, false);
        UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "BriefingUnitSelect", "Origin");
            gv_con_Actor01 = libNtve_gf_ActorLastCreated();
            ActorSend(gv_con_Actor01, "SetScale 0.600000");
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection01Q_Init () {
    gt_Collection01Q = TriggerCreate("gt_Collection01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection01 More Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection01MoreLinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_col01_AllowMoreLines == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00020", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00020", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00021", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00021", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00022", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00022", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection01MoreLinesQ_Init () {
    gt_Collection01MoreLinesQ = TriggerCreate("gt_Collection01MoreLinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00023", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00023", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection01CompleteQ_Init () {
    gt_Collection01CompleteQ = TriggerCreate("gt_Collection01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (19)Collection01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__19Collection01LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_col_HarvestedMineral == false))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(19, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(19);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__19Collection01LoopMouse_Init () {
    gt__19Collection01LoopMouse = TriggerCreate("gt__19Collection01LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (19)Collection01 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__19Collection01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__19Collection01LoopMouse);
    libNtve_gf_HideScreenImage(false, 19);
    UnitGroupLoopBegin(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(UnitGroupLoopCurrent()), "ModelHosted"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__19Collection01StopMouse_Init () {
    gt__19Collection01StopMouse = TriggerCreate("gt__19Collection01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection01 Harvested Mineral Check
//--------------------------------------------------------------------------------------------------
bool gt_Collection01HarvestedMineralCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_col_HarvestedMineral = true;
    TriggerExecute(gt__19Collection01StopMouse, true, false);
    TriggerExecute(gt_Collection01MoreLinesQ, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_CollectionTIP, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection01HarvestedMineralCheck_Init () {
    gt_Collection01HarvestedMineralCheck = TriggerCreate("gt_Collection01HarvestedMineralCheck_Func");
    TriggerEnable(gt_Collection01HarvestedMineralCheck, false);
    TriggerAddEventUnitAbility(gt_Collection01HarvestedMineralCheck, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/5A2FBD99"), StringExternal("Param/Value/5749E6B2"), c_objectiveStateActive, true);
    gv_objectiveCollection01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection01CreateQ_Init () {
    gt_ObjectiveCollection01CreateQ = TriggerCreate("gt_ObjectiveCollection01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection01} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection01Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollection01CreateQ, true, false);
    gv_objectiveCollection01Number = PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals);
    ObjectiveSetName(gv_objectiveCollection01, (StringExternal("Param/Value/5EAC454D") + IntToText(gv_objectiveCollection01Number) + StringExternal("Param/Value/CB43F05C") + (IntToText(gv_objectiveCollection01Total)) + StringExternal("Param/Value/C982D8F6")));
    if ((gv_objectiveCollection01Number >= 150)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 150);
        gv_objectiveCollection01Number = PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals);
        ObjectiveSetName(gv_objectiveCollection01, (StringExternal("Param/Value/3027800F") + IntToText(gv_objectiveCollection01Number) + StringExternal("Param/Value/3DE9CA26") + (IntToText(gv_objectiveCollection01Total)) + StringExternal("Param/Value/F43C1E41")));
        TriggerExecute(gt_ObjectiveCollection01Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection01Update_Init () {
    gt_ObjectiveCollection01Update = TriggerCreate("gt_ObjectiveCollection01Update_Func");
    TriggerEnable(gt_ObjectiveCollection01Update, false);
    TriggerAddEventPlayerPropChange(gt_ObjectiveCollection01Update, gv_p01_USER, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection01Complete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveCollection01Number = 0;
    gv_col_HarvestedMineral = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Collection01HarvestedMineralCheck, false);
    TriggerStop(gt_Collection01Q);
    TriggerStop(gt_Collection01MoreLinesQ);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveCollection01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCollection01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__19Collection01StopMouse, true, false);
    TriggerExecute(gt_Collection01CompleteQ, true, true);
    TriggerExecute(gt_Collection02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection01Complete_Init () {
    gt_ObjectiveCollection01Complete = TriggerCreate("gt_ObjectiveCollection01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02
//--------------------------------------------------------------------------------------------------
bool gt_Collection02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_col_Refinery;

    // Variable Initialization
    lv_col_Refinery = null;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 75);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTrain", 0), false);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_col_CommandCenter, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    gv_col02_AllowMoreLines = false;
    TriggerEnable(gt__20Collection02LoopMouse, true);
    TriggerEnable(gt_Collection02BuildStructurePressed, true);
    TriggerEnable(gt_Collection02BuildRefineryPressed, true);
    TriggerEnable(gt_Collection02RefineryStarted, true);
    TriggerEnable(gt_ObjectiveCollection02Complete, true);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", 0, 0, RegionGetCenter(RegionFromId(61)));
    gv_col_Geyser = UnitLastCreated();
    gf_CreateInfoText(gv_col_Geyser);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(173));
    gv_col_SCV = UnitLastCreated();
    gf_CreateInfoText(gv_col_SCV);
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ObjectiveCollection02CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Collection02Q, true, false);
    gv_col02_AllowMoreLines = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02_Init () {
    gt_Collection02 = TriggerCreate("gt_Collection02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00177", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00177", -1), 0.0, c_transmissionDurationAdd, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(3.0, c_timeGame);
        TriggerExecute(gt__20Collection02LoopMouse, true, false);
        if ((gv_col_RefineryStarted == false)) {
            UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), "BriefingUnitSelect", "Origin");
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02Q_Init () {
    gt_Collection02Q = TriggerCreate("gt_Collection02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 More Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection02MoreLinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_col02_AllowMoreLines == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00091", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00091", -1), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("TutorialAdjutant00094", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00094", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02MoreLinesQ_Init () {
    gt_Collection02MoreLinesQ = TriggerCreate("gt_Collection02MoreLinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02CompleteQ_Init () {
    gt_Collection02CompleteQ = TriggerCreate("gt_Collection02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (20)Collection02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__20Collection02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_col_RefineryStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(20, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(20);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__20Collection02LoopMouse_Init () {
    gt__20Collection02LoopMouse = TriggerCreate("gt__20Collection02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (20)Collection02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__20Collection02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__20Collection02LoopMouse);
    libNtve_gf_HideScreenImage(false, 20);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), false);
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(UnitGroupLoopCurrent()), "ModelHosted"));
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__20Collection02StopMouse_Init () {
    gt__20Collection02StopMouse = TriggerCreate("gt__20Collection02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Build Structure Pressed
//--------------------------------------------------------------------------------------------------
bool gt_Collection02BuildStructurePressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02BuildStructurePressed_Init () {
    gt_Collection02BuildStructurePressed = TriggerCreate("gt_Collection02BuildStructurePressed_Func");
    TriggerEnable(gt_Collection02BuildStructurePressed, false);
    TriggerAddEventButtonPressed(gt_Collection02BuildStructurePressed, c_playerAny, "TerranBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Build Refinery Pressed
//--------------------------------------------------------------------------------------------------
bool gt_Collection02BuildRefineryPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Collection02MoreLinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02BuildRefineryPressed_Init () {
    gt_Collection02BuildRefineryPressed = TriggerCreate("gt_Collection02BuildRefineryPressed_Func");
    TriggerEnable(gt_Collection02BuildRefineryPressed, false);
    TriggerAddEventButtonPressed(gt_Collection02BuildRefineryPressed, c_playerAny, "Refinery");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Refinery Started
//--------------------------------------------------------------------------------------------------
bool gt_Collection02RefineryStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Refinery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_col_RefineryStarted = true;
    TriggerExecute(gt__20Collection02StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02RefineryStarted_Init () {
    gt_Collection02RefineryStarted = TriggerCreate("gt_Collection02RefineryStarted_Func");
    TriggerEnable(gt_Collection02RefineryStarted, false);
    TriggerAddEventUnitConstructProgress(gt_Collection02RefineryStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection02 Refinery Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_Collection02RefineryCancelled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Refinery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 2), true);
    TriggerEnable(gt_Collection02RefineryStarted, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 75);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection02RefineryCancelled_Init () {
    gt_Collection02RefineryCancelled = TriggerCreate("gt_Collection02RefineryCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_Collection02RefineryCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/5AD92B50"), StringExternal("Param/Value/46F66BE1"), c_objectiveStateActive, true);
    gv_objectiveCollection02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection02CreateQ_Init () {
    gt_ObjectiveCollection02CreateQ = TriggerCreate("gt_ObjectiveCollection02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Refinery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateInfoText(EventUnitProgressUnit());
    gv_col_RefineryStarted = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Collection02BuildStructurePressed, false);
    TriggerEnable(gt_Collection02BuildRefineryPressed, false);
    TriggerEnable(gt_Collection02RefineryStarted, false);
    TriggerStop(gt_Collection02Q);
    TriggerStop(gt_Collection02MoreLinesQ);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveCollection02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCollection02, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Collection02CompleteQ, true, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_Collection03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection02Complete_Init () {
    gt_ObjectiveCollection02Complete = TriggerCreate("gt_ObjectiveCollection02Complete_Func");
    TriggerEnable(gt_ObjectiveCollection02Complete, false);
    TriggerAddEventUnitConstructProgress(gt_ObjectiveCollection02Complete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03
//--------------------------------------------------------------------------------------------------
bool gt_Collection03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTrain", 0), false);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(171));
    gf_CreateInfoText(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(173));
    gf_CreateInfoText(UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(178));
    gf_CreateInfoText(UnitLastCreated());
    TriggerEnable(gt__21Collection03LoopMouse, true);
    TriggerEnable(gt__22Collection03LoopMouse, true);
    TriggerEnable(gt_Collection03SCVSelectCheck, true);
    TriggerEnable(gt_Collection03HarvestedGasCheck, true);
    TriggerEnable(gt_ObjectiveCollection03Update, true);
    TriggerExecute(gt_ObjectiveCollection03CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Collection03Q, true, false);
    while (!((gv_col_HarvestedGas == true))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_Collection03MoreLines01Q, true, true);
    TriggerExecute(gt_Collection03MoreLines02Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03_Init () {
    gt_Collection03 = TriggerCreate("gt_Collection03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00093", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00093", -1), 0.0, c_transmissionDurationAdd, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(3.0, c_timeGame);
        TriggerExecute(gt__21Collection03LoopMouse, true, false);
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03Q_Init () {
    gt_Collection03Q = TriggerCreate("gt_Collection03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 More Lines01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection03MoreLines01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00095", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00095", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03MoreLines01Q_Init () {
    gt_Collection03MoreLines01Q = TriggerCreate("gt_Collection03MoreLines01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 More Lines02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection03MoreLines02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveCollection03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00096", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00096", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03MoreLines02Q_Init () {
    gt_Collection03MoreLines02Q = TriggerCreate("gt_Collection03MoreLines02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Collection03CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00097", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00097", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03CompleteQ_Init () {
    gt_Collection03CompleteQ = TriggerCreate("gt_Collection03CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (21)Collection03 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__21Collection03LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_col_HarvestedGas == false))) {
            return false;
        }

        if (!((gv_col_SCVSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(21, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(21);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__21Collection03LoopMouse_Init () {
    gt__21Collection03LoopMouse = TriggerCreate("gt__21Collection03LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (21)Collection03 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__21Collection03StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__21Collection03LoopMouse);
    libNtve_gf_HideScreenImage(false, 21);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__21Collection03StopMouse_Init () {
    gt__21Collection03StopMouse = TriggerCreate("gt__21Collection03StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (22)Collection03 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__22Collection03LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_col_HarvestedGas == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(22, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(22);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__22Collection03LoopMouse_Init () {
    gt__22Collection03LoopMouse = TriggerCreate("gt__22Collection03LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (22)Collection03 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__22Collection03StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__22Collection03LoopMouse);
    libNtve_gf_HideScreenImage(false, 22);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__22Collection03StopMouse_Init () {
    gt__22Collection03StopMouse = TriggerCreate("gt__22Collection03StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 SCV Select Check
//--------------------------------------------------------------------------------------------------
bool gt_Collection03SCVSelectCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_col_SCVSelected = true;
    TriggerExecute(gt__21Collection03StopMouse, true, false);
    TriggerExecute(gt__22Collection03LoopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03SCVSelectCheck_Init () {
    gt_Collection03SCVSelectCheck = TriggerCreate("gt_Collection03SCVSelectCheck_Func");
    TriggerEnable(gt_Collection03SCVSelectCheck, false);
    TriggerAddEventUnitSelected(gt_Collection03SCVSelectCheck, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection03 Harvested Gas Check
//--------------------------------------------------------------------------------------------------
bool gt_Collection03HarvestedGasCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_col_HarvestedGas = true;
    TriggerExecute(gt__22Collection03StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Collection03HarvestedGasCheck_Init () {
    gt_Collection03HarvestedGasCheck = TriggerCreate("gt_Collection03HarvestedGasCheck_Func");
    TriggerEnable(gt_Collection03HarvestedGasCheck, false);
    TriggerAddEventUnitAbility(gt_Collection03HarvestedGasCheck, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection03} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection03CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/4492AA5D"), StringExternal("Param/Value/AB1A3E37"), c_objectiveStateActive, true);
    gv_objectiveCollection03 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection03CreateQ_Init () {
    gt_ObjectiveCollection03CreateQ = TriggerCreate("gt_ObjectiveCollection03CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection03} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection03Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__22Collection03StopMouse, true, false);
    TriggerExecute(gt_ObjectiveCollection03CreateQ, true, false);
    gv_objectiveCollection03Number = PlayerGetPropertyInt(gv_p01_USER, c_playerPropVespene);
    ObjectiveSetName(gv_objectiveCollection03, (StringExternal("Param/Value/23DF8C4F") + IntToText(gv_objectiveCollection03Number) + StringExternal("Param/Value/D25D336F") + (IntToText(gv_objectiveCollection03Total)) + StringExternal("Param/Value/981FB8B2")));
    if ((gv_objectiveCollection03Number >= 40)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 40);
        gv_objectiveCollection03Number = PlayerGetPropertyInt(gv_p01_USER, c_playerPropVespene);
        ObjectiveSetName(gv_objectiveCollection03, (StringExternal("Param/Value/C64891F2") + IntToText(gv_objectiveCollection03Number) + StringExternal("Param/Value/2EA0CF57") + (IntToText(gv_objectiveCollection03Total)) + StringExternal("Param/Value/35DD131B")));
        TriggerExecute(gt_ObjectiveCollection03Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection03Update_Init () {
    gt_ObjectiveCollection03Update = TriggerCreate("gt_ObjectiveCollection03Update_Func");
    TriggerEnable(gt_ObjectiveCollection03Update, false);
    TriggerAddEventPlayerPropChange(gt_ObjectiveCollection03Update, gv_p01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Collection03} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollection03Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveCollection03Number = 0;
    gv_col_HarvestedGas = false;
    gv_col_SCVSelected = false;
    TriggerExecute(gt__21Collection03StopMouse, true, false);
    TriggerExecute(gt__22Collection03StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Collection03SCVSelectCheck, false);
    TriggerEnable(gt_Collection03HarvestedGasCheck, false);
    TriggerStop(gt_Collection03Q);
    TriggerStop(gt_Collection03MoreLines01Q);
    TriggerStop(gt_Collection03MoreLines02Q);
    TriggerStop(gt_Collection03);
    gf_SetTutorialCompleted(5, true, true);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveCollection03CreateQ, true, false);
    ObjectiveSetState(gv_objectiveCollection03, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Collection03CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitRemove(gv_col_Geyser);
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollection03Complete_Init () {
    gt_ObjectiveCollection03Complete = TriggerCreate("gt_ObjectiveCollection03Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection TIP
//--------------------------------------------------------------------------------------------------
bool gt_CollectionTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedCollection == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/9C4D3794"), 0), StringExternal("Param/Value/05EFAF32"), StringExternal("Param/Value/C4C7C132"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectionTIP_Init () {
    gt_CollectionTIP = TriggerCreate("gt_CollectionTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production01
//--------------------------------------------------------------------------------------------------
bool gt_Production01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton07_Production))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    gv_pickedProduction = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(130), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(24), true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TechTreeUnitAllow(gv_p01_USER, "Marine", true);
    TechTreeUnitAllow(gv_p01_USER, "Marauder", true);
    TechTreeUnitAllow(gv_p01_USER, "Reaper", true);
    TechTreeUnitAllow(gv_p01_USER, "Ghost", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksLiftOff", 0), false);
    TriggerEnable(gt__23Production01LoopMouse, true);
    TriggerEnable(gt_ObjectiveProduction01Complete, true);
    TriggerEnable(gt_Production02TrainMarineCheck, true);
    TriggerEnable(gt_ObjectiveProduction02Update, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_p01_USER, RegionGetCenter(RegionFromId(5)));
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_p01_USER, RegionGetCenter(RegionFromId(4)));
    gv_pro_Barracks = UnitLastCreated();
    gf_CreateInfoText(gv_pro_Barracks);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(130)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveProduction01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Production01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production01_Init () {
    gt_Production01 = TriggerCreate("gt_Production01_Func");
    TriggerAddEventDialogControl(gt_Production01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Production01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00178", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00178", -1), 0.0, c_transmissionDurationAdd, false);
    Wait(1.5, c_timeGame);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        TriggerExecute(gt__23Production01LoopMouse, true, false);
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production01Q_Init () {
    gt_Production01Q = TriggerCreate("gt_Production01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Production01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production01CompleteQ_Init () {
    gt_Production01CompleteQ = TriggerCreate("gt_Production01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (23)Production01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__23Production01LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(23, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(23);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__23Production01LoopMouse_Init () {
    gt__23Production01LoopMouse = TriggerCreate("gt__23Production01LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (23)Production01Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__23Production01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__23Production01LoopMouse);
    libNtve_gf_HideScreenImage(false, 23);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__23Production01StopMouse_Init () {
    gt__23Production01StopMouse = TriggerCreate("gt__23Production01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/7302A78D"), StringExternal("Param/Value/8D548C8F"), c_objectiveStateActive, true);
    gv_objectiveProduction01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction01CreateQ_Init () {
    gt_ObjectiveProduction01CreateQ = TriggerCreate("gt_ObjectiveProduction01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HideReplayTransmissionButtons();
    TriggerExecute(gt__23Production01StopMouse, true, false);
    TriggerStop(gt_Production01Q);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveProduction01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveProduction01, c_objectiveStateCompleted);
    TriggerExecute(gt_Production01CompleteQ, true, true);
    TriggerExecute(gt_Production02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction01Complete_Init () {
    gt_ObjectiveProduction01Complete = TriggerCreate("gt_ObjectiveProduction01Complete_Func");
    TriggerEnable(gt_ObjectiveProduction01Complete, false);
    TriggerAddEventUnitSelected(gt_ObjectiveProduction01Complete, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production02
//--------------------------------------------------------------------------------------------------
bool gt_Production02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(gv_pro_Barracks, c_unitStateTargetable, false);
    TechTreeUnitAllow(gv_p01_USER, "Marine", true);
    TechTreeUnitAllow(gv_p01_USER, "Marauder", true);
    TechTreeUnitAllow(gv_p01_USER, "Reaper", true);
    TechTreeUnitAllow(gv_p01_USER, "Ghost", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksLiftOff", 0), false);
    TriggerEnable(gt__24Production02LoopMouse, true);
    TriggerExecute(gt_ObjectiveProduction02CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Production02Q, true, false);
    while (!((gv_pro_TrainedMarine == true))) {
        Wait(0.25, c_timeGame);
    }
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_Production02MoreLinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production02_Init () {
    gt_Production02 = TriggerCreate("gt_Production02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production02 Q
//--------------------------------------------------------------------------------------------------
bool gt_Production02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00025", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00025", -1), 0.0, c_transmissionDurationAdd, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
        TriggerExecute(gt__24Production02LoopMouse, true, false);
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production02Q_Init () {
    gt_Production02Q = TriggerCreate("gt_Production02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production02 More Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_Production02MoreLinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction02) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00026", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00026", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production02MoreLinesQ_Init () {
    gt_Production02MoreLinesQ = TriggerCreate("gt_Production02MoreLinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production02 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Production02CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production02CompleteQ_Init () {
    gt_Production02CompleteQ = TriggerCreate("gt_Production02CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (24)Production02 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__24Production02LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((gv_pro_TrainedMarine == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(24, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(24);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 0), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__24Production02LoopMouse_Init () {
    gt__24Production02LoopMouse = TriggerCreate("gt__24Production02LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (24)Production02 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__24Production02StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__24Production02LoopMouse);
    libNtve_gf_HideScreenImage(false, 24);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__24Production02StopMouse_Init () {
    gt__24Production02StopMouse = TriggerCreate("gt__24Production02StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production02 Train Marine Check
//--------------------------------------------------------------------------------------------------
bool gt_Production02TrainMarineCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnitProgressObjectType() == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_pro_TrainedMarine = true;
    TriggerExecute(gt__24Production02StopMouse, true, false);
    gf_HideReplayTransmissionButtons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production02TrainMarineCheck_Init () {
    gt_Production02TrainMarineCheck = TriggerCreate("gt_Production02TrainMarineCheck_Func");
    TriggerEnable(gt_Production02TrainMarineCheck, false);
    TriggerAddEventUnitTrainProgress(gt_Production02TrainMarineCheck, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production02} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction02CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/07BBF25B"), StringExternal("Param/Value/1FC1B446"), c_objectiveStateActive, true);
    gv_objectiveProduction02 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction02CreateQ_Init () {
    gt_ObjectiveProduction02CreateQ = TriggerCreate("gt_ObjectiveProduction02CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production02} Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction02Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitProgressUnit());
    TriggerExecute(gt_ObjectiveProduction02CreateQ, true, false);
    gv_objectiveProduction02Number=gv_objectiveProduction02Number + 1;
    ObjectiveSetName(gv_objectiveProduction02, (StringExternal("Param/Value/50D703FF") + IntToText(gv_objectiveProduction02Number) + StringExternal("Param/Value/B510ADFC") + (IntToText(gv_objectiveProduction02Total)) + StringExternal("Param/Value/9CB05C7B")));
    if ((gv_objectiveProduction02Number == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveProduction02Complete, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction02Update_Init () {
    gt_ObjectiveProduction02Update = TriggerCreate("gt_ObjectiveProduction02Update_Func");
    TriggerEnable(gt_ObjectiveProduction02Update, false);
    TriggerAddEventUnitTrainProgress(gt_ObjectiveProduction02Update, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production02} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction02Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveProduction02Number = 0;
    gv_pro_TrainedMarine = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Production02TrainMarineCheck, false);
    TriggerStop(gt_Production02Q);
    TriggerStop(gt_Production02MoreLinesQ);
    TriggerStop(gt_Production02);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveProduction02CreateQ, true, false);
    ObjectiveSetState(gv_objectiveProduction02, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_Production02CompleteQ, true, true);
    TriggerExecute(gt_Production03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction02Complete_Init () {
    gt_ObjectiveProduction02Complete = TriggerCreate("gt_ObjectiveProduction02Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03
//--------------------------------------------------------------------------------------------------
bool gt_Production03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitClearSelection(gv_p01_USER);
    UnitSelect(gv_pro_Barracks, gv_p01_USER, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 25);
    TechTreeUnitAllow(gv_p01_USER, "TechLab", true);
    TechTreeUnitAllow(gv_p01_USER, "Marine", false);
    TechTreeUnitAllow(gv_p01_USER, "Marauder", true);
    TechTreeUnitAllow(gv_p01_USER, "Reaper", true);
    TechTreeUnitAllow(gv_p01_USER, "Ghost", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksLiftOff", 0), false);
    UnitIssueOrder(gv_pro_Barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_pro_Barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_pro_Barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_pro_Barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_pro_Barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    gv_pro03_AllowMoreLines = false;
    TriggerEnable(gt_Production03MoreLinesQ, true);
    TriggerEnable(gt__25Production03LoopMouse, true);
    TriggerEnable(gt_Production03TechLabStarted, true);
    TriggerEnable(gt_ObjectiveProduction03Complete, true);
    TriggerExecute(gt_ObjectiveProduction03CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Production03Q, true, false);
    gv_pro03_AllowMoreLines = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03_Init () {
    gt_Production03 = TriggerCreate("gt_Production03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03 Q
//--------------------------------------------------------------------------------------------------
bool gt_Production03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    TriggerExecute(gt__25Production03LoopMouse, true, false);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00098", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00098", -1), 0.0, c_transmissionDurationAdd, true);
    TriggerExecute(gt_ProductionTIP, true, false);
    // Transmission - SoundLink("TutorialAdjutant00099", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00099", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03Q_Init () {
    gt_Production03Q = TriggerCreate("gt_Production03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03 More Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_Production03MoreLinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "BarracksTechLab"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction03) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_pro03_AllowMoreLines == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00100", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00100", -1), 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03MoreLinesQ_Init () {
    gt_Production03MoreLinesQ = TriggerCreate("gt_Production03MoreLinesQ_Func");
    TriggerEnable(gt_Production03MoreLinesQ, false);
    TriggerAddEventUnitConstructProgress(gt_Production03MoreLinesQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Production03CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00073", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00073", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03CompleteQ_Init () {
    gt_Production03CompleteQ = TriggerCreate("gt_Production03CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (25)Production03 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__25Production03LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_pro_TechLabConstructed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(25, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(25);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksAddOns", 0), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__25Production03LoopMouse_Init () {
    gt__25Production03LoopMouse = TriggerCreate("gt__25Production03LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (25)Production03 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__25Production03StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__25Production03LoopMouse);
    libNtve_gf_HideScreenImage(false, 25);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksAddOns", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__25Production03StopMouse_Init () {
    gt__25Production03StopMouse = TriggerCreate("gt__25Production03StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03 Tech Lab Started
//--------------------------------------------------------------------------------------------------
bool gt_Production03TechLabStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((EventUnitProgressObjectType() == "BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_pro_TechLabConstructed = true;
    TriggerExecute(gt__25Production03StopMouse, true, false);
    UnitSetState(EventUnitProgressUnit(), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03TechLabStarted_Init () {
    gt_Production03TechLabStarted = TriggerCreate("gt_Production03TechLabStarted_Func");
    TriggerEnable(gt_Production03TechLabStarted, false);
    TriggerAddEventUnitConstructProgress(gt_Production03TechLabStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production03 Tech Lab Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_Production03TechLabCancelled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksAddOns", 0), true);
    TriggerEnable(gt_Production03TechLabStarted, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production03TechLabCancelled_Init () {
    gt_Production03TechLabCancelled = TriggerCreate("gt_Production03TechLabCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_Production03TechLabCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production03} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction03CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/222C9452"), StringExternal("Param/Value/1E6CEB3F"), c_objectiveStateActive, true);
    gv_objectiveProduction03 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction03CreateQ_Init () {
    gt_ObjectiveProduction03CreateQ = TriggerCreate("gt_ObjectiveProduction03CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production03} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction03Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateInfoText(EventUnitProgressUnit());
    gv_pro_TechLabConstructed = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Production03MoreLinesQ, false);
    TriggerEnable(gt_Production03TechLabStarted, false);
    TriggerStop(gt_Production03Q);
    TriggerStop(gt_Production03MoreLinesQ);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveProduction03CreateQ, true, false);
    ObjectiveSetState(gv_objectiveProduction03, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Production03CompleteQ, true, true);
    TriggerExecute(gt_Production04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction03Complete_Init () {
    gt_ObjectiveProduction03Complete = TriggerCreate("gt_ObjectiveProduction03Complete_Func");
    TriggerEnable(gt_ObjectiveProduction03Complete, false);
    TriggerAddEventUnitConstructProgress(gt_ObjectiveProduction03Complete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production04
//--------------------------------------------------------------------------------------------------
bool gt_Production04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(gv_p01_USER);
    UnitSelect(gv_pro_Barracks, gv_p01_USER, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 25);
    TechTreeUnitAllow(gv_p01_USER, "TechLab", true);
    TechTreeUnitAllow(gv_p01_USER, "Marine", false);
    TechTreeUnitAllow(gv_p01_USER, "Marauder", true);
    TechTreeUnitAllow(gv_p01_USER, "Ghost", true);
    gv_pro04_AllowMoreLines = false;
    TriggerEnable(gt_Production04MoreLinesQ, true);
    TriggerEnable(gt__26Production04LoopMouse, true);
    TriggerEnable(gt_Production04MarauderCheck, true);
    TriggerEnable(gt_ObjectiveProduction04Complete, true);
    TriggerExecute(gt_ObjectiveProduction04CreateQ, true, false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Production04Q, true, false);
    gv_pro04_AllowMoreLines = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production04_Init () {
    gt_Production04 = TriggerCreate("gt_Production04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production04 Q
//--------------------------------------------------------------------------------------------------
bool gt_Production04Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction04) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00102", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00102", -1), 0.0, c_transmissionDurationAdd, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        Wait(1.5, c_timeGame);
        TriggerExecute(gt__26Production04LoopMouse, true, false);
    }
    else {
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production04Q_Init () {
    gt_Production04Q = TriggerCreate("gt_Production04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production04 More Lines Q
//--------------------------------------------------------------------------------------------------
bool gt_Production04MoreLinesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((EventUnitProgressObjectType() == "Marauder"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveProduction04) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_pro04_AllowMoreLines == true))) {
        Wait(0.1, c_timeGame);
    }
    gf_CreateInfoText(EventUnit());
    TriggerQueueEnter();
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00103", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00103", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production04MoreLinesQ_Init () {
    gt_Production04MoreLinesQ = TriggerCreate("gt_Production04MoreLinesQ_Func");
    TriggerEnable(gt_Production04MoreLinesQ, false);
    TriggerAddEventUnitTrainProgress(gt_Production04MoreLinesQ, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production04 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Production04CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00104", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00104", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production04CompleteQ_Init () {
    gt_Production04CompleteQ = TriggerCreate("gt_Production04CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (26)Production04 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__26Production04LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_pro_TrainedMaruader == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(26, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(26);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 3), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__26Production04LoopMouse_Init () {
    gt__26Production04LoopMouse = TriggerCreate("gt__26Production04LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (26)Production04 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__26Production04StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__26Production04LoopMouse);
    libNtve_gf_HideScreenImage(false, 26);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("BarracksTrain", 3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__26Production04StopMouse_Init () {
    gt__26Production04StopMouse = TriggerCreate("gt__26Production04StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production04 Marauder Check
//--------------------------------------------------------------------------------------------------
bool gt_Production04MarauderCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((EventUnitProgressObjectType() == "Marauder"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_pro_TrainedMaruader = true;
    TriggerExecute(gt__26Production04StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Production04MarauderCheck_Init () {
    gt_Production04MarauderCheck = TriggerCreate("gt_Production04MarauderCheck_Func");
    TriggerEnable(gt_Production04MarauderCheck, false);
    TriggerAddEventUnitTrainProgress(gt_Production04MarauderCheck, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production04} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction04CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/7B986EDF"), StringExternal("Param/Value/FE76C46D"), c_objectiveStateActive, true);
    gv_objectiveProduction04 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction04CreateQ_Init () {
    gt_ObjectiveProduction04CreateQ = TriggerCreate("gt_ObjectiveProduction04CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Production04} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProduction04Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Marauder"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateInfoText(EventUnitProgressUnit());
    gv_objectiveProduction04Number = 0;
    gv_pro_TrainedMaruader = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt_Production04MoreLinesQ, false);
    TriggerEnable(gt_Production04MarauderCheck, false);
    TriggerStop(gt_Production04Q);
    TriggerStop(gt_Production04MoreLinesQ);
    gf_SetTutorialCompleted(6, true, true);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveProduction04CreateQ, true, false);
    ObjectiveSetState(gv_objectiveProduction04, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Production04CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProduction04Complete_Init () {
    gt_ObjectiveProduction04Complete = TriggerCreate("gt_ObjectiveProduction04Complete_Func");
    TriggerEnable(gt_ObjectiveProduction04Complete, false);
    TriggerAddEventUnitTrainProgress(gt_ObjectiveProduction04Complete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Production TIP
//--------------------------------------------------------------------------------------------------
bool gt_ProductionTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedProduction == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/204E58DF"), 0), StringExternal("Param/Value/D8402356"), StringExternal("Param/Value/2E8FB36E"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProductionTIP_Init () {
    gt_ProductionTIP = TriggerCreate("gt_ProductionTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01
//--------------------------------------------------------------------------------------------------
bool gt_Supply01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_mainButton08_Supply))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetMap();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    gv_pickedSupply = 1;
    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(10), 0.0, -1, 10, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(26), true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TechTreeUnitAllow(gv_p01_USER, "CommandCenter", false);
    TechTreeUnitAllow(gv_p01_USER, "Refinery", false);
    TechTreeUnitAllow(gv_p01_USER, "Barracks", false);
    TechTreeUnitAllow(gv_p01_USER, "SupplyDepot", true);
    gv_supply01_AllowMoreLines01 = false;
    gv_supply01_AllowMoreLines02 = false;
    TriggerEnable(gt__27Supply01MoreLines02Q, true);
    TriggerEnable(gt__28Supply01LoopMouse, true);
    TriggerEnable(gt_Supply01BuildStructurePressed, true);
    TriggerEnable(gt_Supply01BuildSupplyDepotPressed, true);
    TriggerEnable(gt_Supply01SupplyDepotStarted, true);
    TriggerEnable(gt_ObjectiveSupply01Complete, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", 0, gv_p01_USER, PointFromId(25));
    gv_supply_SCV = UnitLastCreated();
    gf_CreateInfoText(gv_supply_SCV);
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(10)), 1.5);
    CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    VisRevealerCreate(gv_p01_USER, RegionEntireMap());
    gv_tutorial_Visibility = VisRevealerLastCreated();
    TriggerExecute(gt_ObjectiveSupply01CreateQ, true, false);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(4), PlayerGroupAll(), true, false);
    if ((gv_replay_Transmission_Is_Playing == false)) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Supply01Q, true, false);
    gv_supply01_AllowMoreLines01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01_Init () {
    gt_Supply01 = TriggerCreate("gt_Supply01_Func");
    TriggerAddEventDialogControl(gt_Supply01, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Supply01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveSupply01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Tutorial);
    libNtve_gf_StopFlashingScreenButton(gv_replay_Transmission_ButtonID_Main);
    gf_HideReplayTransmissionButtons();
    Wait(0.5, c_timeGame);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00179", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00179", -1), 0.0, c_transmissionDurationAdd, true);
    TriggerExecute(gt__28Supply01LoopMouse, true, false);
    // Transmission - SoundLink("TutorialAdjutant00180", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00180", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01Q_Init () {
    gt_Supply01Q = TriggerCreate("gt_Supply01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 More Lines 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_Supply01MoreLines01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveSupply01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_supply01_AllowMoreLines01 == true))) {
        Wait(0.1, c_timeGame);
    }
    gv_supply01_AllowMoreLines02 = true;
    TriggerQueueEnter();
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    TriggerExecute(gt_SupplyTIP, true, false);
    // Transmission - SoundLink("TutorialAdjutant00207", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00207", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01MoreLines01Q_Init () {
    gt_Supply01MoreLines01Q = TriggerCreate("gt_Supply01MoreLines01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (27)Supply01 More Lines 02 Q
//--------------------------------------------------------------------------------------------------
bool gt__27Supply01MoreLines02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveSupply01) != c_objectiveStateCompleted))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_supply01_AllowMoreLines02 == true))) {
        Wait(0.1, c_timeGame);
    }
    TriggerQueueEnter();
    gf_HideReplayTransmissionButtons();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00029", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00029", -1), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_DisplayScreenImage(27, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 180, 50, c_anchorTopRight, 9, 2);
    libNtve_gf_PulseScreenImage(27, 1.75, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    libNtve_gf_StopPulsingScreenImage(27);
    libNtve_gf_HideScreenImage(false, 27);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    gf_CreateTutorialReplayTransmissionButton(TriggerGetCurrent());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__27Supply01MoreLines02Q_Init () {
    gt__27Supply01MoreLines02Q = TriggerCreate("gt__27Supply01MoreLines02Q_Func");
    TriggerEnable(gt__27Supply01MoreLines02Q, false);
    TriggerAddEventUnitConstructProgress(gt__27Supply01MoreLines02Q, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_Supply01CompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideReplayTransmissionButtons();
    TriggerQueueEnter();
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(1, PlayerGroupAll());
    // Transmission - SoundLink("TutorialAdjutant00105", -1)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(4), SoundLink("TutorialAdjutant00105", -1), 0.0, c_transmissionDurationAdd, true);
    libLbty_gf_SetAllSoundChannelVolumesStandardTiming(2, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01CompleteQ_Init () {
    gt_Supply01CompleteQ = TriggerCreate("gt_Supply01CompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (28)Supply01 Loop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__28Supply01LoopMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leftClick;

    // Variable Initialization
    lv_leftClick = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((gv_supply_SupplyDepotStarted == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenImage(28, "Assets\\Textures\\tutorialmouse.dds", c_triggerBlendModeAdd, 128, 256, c_anchorRight, 40, -55);
    lv_leftClick = libNtve_gf_ScreenImageDialogItem(28);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), true);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouse.dds", PlayerGroupAll());
        Wait(0.75, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_leftClick, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__28Supply01LoopMouse_Init () {
    gt__28Supply01LoopMouse = TriggerCreate("gt__28Supply01LoopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (28)Supply01 Stop Mouse
//--------------------------------------------------------------------------------------------------
bool gt__28Supply01StopMouse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt__28Supply01LoopMouse);
    libNtve_gf_HideScreenImage(false, 28);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__28Supply01StopMouse_Init () {
    gt__28Supply01StopMouse = TriggerCreate("gt__28Supply01StopMouse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Build Structure Pressed
//--------------------------------------------------------------------------------------------------
bool gt_Supply01BuildStructurePressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01BuildStructurePressed_Init () {
    gt_Supply01BuildStructurePressed = TriggerCreate("gt_Supply01BuildStructurePressed_Func");
    TriggerEnable(gt_Supply01BuildStructurePressed, false);
    TriggerAddEventButtonPressed(gt_Supply01BuildStructurePressed, c_playerAny, "TerranBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Build Supply Depot Pressed
//--------------------------------------------------------------------------------------------------
bool gt_Supply01BuildSupplyDepotPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Supply01MoreLines01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01BuildSupplyDepotPressed_Init () {
    gt_Supply01BuildSupplyDepotPressed = TriggerCreate("gt_Supply01BuildSupplyDepotPressed_Func");
    TriggerEnable(gt_Supply01BuildSupplyDepotPressed, false);
    TriggerAddEventButtonPressed(gt_Supply01BuildSupplyDepotPressed, c_playerAny, "SupplyDepot");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Supply Depot Started
//--------------------------------------------------------------------------------------------------
bool gt_Supply01SupplyDepotStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_supply_SupplyDepotStarted = true;
    TriggerExecute(gt__28Supply01StopMouse, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01SupplyDepotStarted_Init () {
    gt_Supply01SupplyDepotStarted = TriggerCreate("gt_Supply01SupplyDepotStarted_Func");
    TriggerEnable(gt_Supply01SupplyDepotStarted, false);
    TriggerAddEventUnitConstructProgress(gt_Supply01SupplyDepotStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply01 Supply Depot Cancelled
//--------------------------------------------------------------------------------------------------
bool gt_Supply01SupplyDepotCancelled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("TerranBuild", 1), true);
    TriggerEnable(gt_Supply01SupplyDepotStarted, true);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Supply01SupplyDepotCancelled_Init () {
    gt_Supply01SupplyDepotCancelled = TriggerCreate("gt_Supply01SupplyDepotCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_Supply01SupplyDepotCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Supply01} Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSupply01CreateQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    ObjectiveCreate(StringExternal("Param/Value/9466BCE1"), StringExternal("Param/Value/6B6BCAAD"), c_objectiveStateActive, true);
    gv_objectiveSupply01 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSupply01CreateQ_Init () {
    gt_ObjectiveSupply01CreateQ = TriggerCreate("gt_ObjectiveSupply01CreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective {Supply01} Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSupply01Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateInfoText(EventUnitProgressUnit());
    gv_supply_SupplyDepotStarted = false;
    gf_HideReplayTransmissionButtons();
    TriggerEnable(gt__27Supply01MoreLines02Q, false);
    TriggerEnable(gt_Supply01BuildStructurePressed, false);
    TriggerEnable(gt_Supply01BuildSupplyDepotPressed, false);
    TriggerEnable(gt_Supply01SupplyDepotStarted, false);
    TriggerStop(gt_Supply01Q);
    TriggerStop(gt_Supply01MoreLines01Q);
    TriggerStop(gt__27Supply01MoreLines02Q);
    libNtve_gf_StopPulsingScreenImage(27);
    libNtve_gf_HideScreenImage(false, 27);
    gf_SetTutorialCompleted(7, true, true);
    gf_SilenceQ();
    TriggerExecute(gt_ObjectiveSupply01CreateQ, true, false);
    ObjectiveSetState(gv_objectiveSupply01, c_objectiveStateCompleted);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_Supply01CompleteQ, true, true);
    VisRevealerDestroy(gv_tutorial_Visibility);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ReCreateDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSupply01Complete_Init () {
    gt_ObjectiveSupply01Complete = TriggerCreate("gt_ObjectiveSupply01Complete_Func");
    TriggerEnable(gt_ObjectiveSupply01Complete, false);
    TriggerAddEventUnitConstructProgress(gt_ObjectiveSupply01Complete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply TIP
//--------------------------------------------------------------------------------------------------
bool gt_SupplyTIP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_pickedSupply == 1))) {
            return false;
        }

        if (!((gv_replay_Transmission_Is_Playing == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/7A155F2A"), 0), StringExternal("Param/Value/599EEA23"), StringExternal("Param/Value/F6B8188C"), "Assets\\Textures\\ui_icon_attention.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyTIP_Init () {
    gt_SupplyTIP = TriggerCreate("gt_SupplyTIP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init02Units_Init();
    gt_Init03Technology_Init();
    gt_Init04UserInterface_Init();
    gt_ReCreateDialog_Init();
    gt_CreateAndDisplayMainMenu_Init();
    gt_CreateDialogs_Init();
    gt_ResetObjectives_Init();
    gt_QuitTutorial_Init();
    gt_OpeningAdjutantQ_Init();
    gt_OpeningAdjutantQ2_Init();
    gt_OpeningAdjutantQ22_Init();
    gt_TutorialCompleteQ_Init();
    gt_ClickReplayTransmissionButton_Init();
    gt_StartFootageRecording_Init();
    gt_StopFootageRecording_Init();
    gt_UserInterface01_Init();
    gt_UserInterface01Q_Init();
    gt_UserInterfaceCompleteQ_Init();
    gt_ObjectiveUserInterfaceCreateQ_Init();
    gt_ObjectiveUserInterfaceComplete_Init();
    gt_Camera01_Init();
    gt_Camera01Q_Init();
    gt_Camera01CompleteQ_Init();
    gt__0407Camera01LoopArrows_Init();
    gt__0407Camera01StopArrows_Init();
    gt_ObjectiveCamera01CreateQ_Init();
    gt_ObjectiveCamera01Update_Init();
    gt_ObjectiveCamera01Complete_Init();
    gt_Camera02_Init();
    gt_Camera02Q_Init();
    gt_Camera02CompleteQ_Init();
    gt__0809Camera02LoopMouse_Init();
    gt__0809Camera02StopMouse_Init();
    gt_ObjectiveCamera02CreateQ_Init();
    gt_ObjectiveCamera02Complete_Init();
    gt_Camera01TIP_Init();
    gt_Movement01_Init();
    gt_Movement01Q_Init();
    gt_Movement01CompleteQ_Init();
    gt_LoopMouseButtonLeft01_Init();
    gt__10Movement01StopMouse_Init();
    gt_ObjectiveMovement01CreateQ_Init();
    gt_ObjectiveMovement01Complete_Init();
    gt_Movement02_Init();
    gt_Movement02Q_Init();
    gt_Movement02CompleteQ_Init();
    gt__11Movement02LoopMouse_Init();
    gt__11Movement02StopMouse_Init();
    gt_ObjectiveMovement02CreateQ_Init();
    gt_ObjectiveMovement02Complete_Init();
    gt_Movement03_Init();
    gt_Movement03Q_Init();
    gt_Movement03CompleteQ_Init();
    gt_ObjectiveMovement03CreateQ_Init();
    gt_ObjectiveMovement03Complete_Init();
    gt_Movement04_Init();
    gt_Movement04Q_Init();
    gt_Movement04CompleteQ_Init();
    gt__12Movement04LoopMouse_Init();
    gt__12Movement04StopMouse_Init();
    gt_ObjectiveMovement04CreateQ_Init();
    gt_ObjectiveMovement04Complete_Init();
    gt_Movement05_Init();
    gt_Movement05Q_Init();
    gt_Movement05CompleteQ_Init();
    gt__13Movement05LoopMouse_Init();
    gt__13Movement05StopMouse_Init();
    gt_Movement05MoveOrderCheck_Init();
    gt_Movement05AttackMoveOrderCheck_Init();
    gt_ObjectiveMovement05CreateQ_Init();
    gt_ObjectiveMovement05Complete_Init();
    gt_MovementTIP_Init();
    gt_Combat01_Init();
    gt_Combat01Q_Init();
    gt_Combat01CompleteQ_Init();
    gt__14Combat01LoopMouse_Init();
    gt__14Combat01StopMouse_Init();
    gt_Combat01AttackStarted_Init();
    gt_ObjectiveCombat01CreateQ_Init();
    gt_ObjectiveCombat01Failed_Init();
    gt_ObjectiveCombat01Update_Init();
    gt_ObjectiveCombat01Complete_Init();
    gt_Combat02_Init();
    gt_Combat02Q_Init();
    gt_Combat02CompleteQ_Init();
    gt__15Combat02LoopMouse_Init();
    gt__15Combat02StopMouse_Init();
    gt_Combat02AttackIssued_Init();
    gt_ObjectiveCombat02CreateQ_Init();
    gt_ObjectiveCombat02Failed_Init();
    gt_ObjectiveCombat02Update_Init();
    gt_ObjectiveCombat02Complete_Init();
    gt_Combat03_Init();
    gt_Combat03Q_Init();
    gt_Combat03CompleteQ_Init();
    gt__16Combat03LoopMouse_Init();
    gt__16Combat03StopMouse_Init();
    gt_Combat03AttackIssued_Init();
    gt_ObjectiveCombat03CreateQ_Init();
    gt_ObjectiveCombat03Failed_Init();
    gt_ObjectiveCombat03Update_Init();
    gt_ObjectiveCombat03Complete_Init();
    gt_AttackTIP_Init();
    gt_Construction01_Init();
    gt_Construction01Q_Init();
    gt_Construction01CompleteQ_Init();
    gt__17Construction01LoopMouse_Init();
    gt__17Construction01StopMouse_Init();
    gt_ObjectiveConstruction01CreateQ_Init();
    gt_ObjectiveConstruction01Complete_Init();
    gt_Construction02_Init();
    gt_Construction02Q_Init();
    gt_Construction02MoreLines01Q_Init();
    gt_Construction02MoreLines02Q_Init();
    gt_Construction02CompleteQ_Init();
    gt__18Construction02LoopMouse_Init();
    gt__18Construction02StopMouse_Init();
    gt_Construction02BuildStructurePressed_Init();
    gt_Construction02CommandCenterStarted_Init();
    gt_Construction02CommandCenterCancelled_Init();
    gt_ObjectiveConstruction02CreateQ_Init();
    gt_ObjectiveConstruction02Complete_Init();
    gt_ConstructionTIP_Init();
    gt_Collection01_Init();
    gt_Collection01Q_Init();
    gt_Collection01MoreLinesQ_Init();
    gt_Collection01CompleteQ_Init();
    gt__19Collection01LoopMouse_Init();
    gt__19Collection01StopMouse_Init();
    gt_Collection01HarvestedMineralCheck_Init();
    gt_ObjectiveCollection01CreateQ_Init();
    gt_ObjectiveCollection01Update_Init();
    gt_ObjectiveCollection01Complete_Init();
    gt_Collection02_Init();
    gt_Collection02Q_Init();
    gt_Collection02MoreLinesQ_Init();
    gt_Collection02CompleteQ_Init();
    gt__20Collection02LoopMouse_Init();
    gt__20Collection02StopMouse_Init();
    gt_Collection02BuildStructurePressed_Init();
    gt_Collection02BuildRefineryPressed_Init();
    gt_Collection02RefineryStarted_Init();
    gt_Collection02RefineryCancelled_Init();
    gt_ObjectiveCollection02CreateQ_Init();
    gt_ObjectiveCollection02Complete_Init();
    gt_Collection03_Init();
    gt_Collection03Q_Init();
    gt_Collection03MoreLines01Q_Init();
    gt_Collection03MoreLines02Q_Init();
    gt_Collection03CompleteQ_Init();
    gt__21Collection03LoopMouse_Init();
    gt__21Collection03StopMouse_Init();
    gt__22Collection03LoopMouse_Init();
    gt__22Collection03StopMouse_Init();
    gt_Collection03SCVSelectCheck_Init();
    gt_Collection03HarvestedGasCheck_Init();
    gt_ObjectiveCollection03CreateQ_Init();
    gt_ObjectiveCollection03Update_Init();
    gt_ObjectiveCollection03Complete_Init();
    gt_CollectionTIP_Init();
    gt_Production01_Init();
    gt_Production01Q_Init();
    gt_Production01CompleteQ_Init();
    gt__23Production01LoopMouse_Init();
    gt__23Production01StopMouse_Init();
    gt_ObjectiveProduction01CreateQ_Init();
    gt_ObjectiveProduction01Complete_Init();
    gt_Production02_Init();
    gt_Production02Q_Init();
    gt_Production02MoreLinesQ_Init();
    gt_Production02CompleteQ_Init();
    gt__24Production02LoopMouse_Init();
    gt__24Production02StopMouse_Init();
    gt_Production02TrainMarineCheck_Init();
    gt_ObjectiveProduction02CreateQ_Init();
    gt_ObjectiveProduction02Update_Init();
    gt_ObjectiveProduction02Complete_Init();
    gt_Production03_Init();
    gt_Production03Q_Init();
    gt_Production03MoreLinesQ_Init();
    gt_Production03CompleteQ_Init();
    gt__25Production03LoopMouse_Init();
    gt__25Production03StopMouse_Init();
    gt_Production03TechLabStarted_Init();
    gt_Production03TechLabCancelled_Init();
    gt_ObjectiveProduction03CreateQ_Init();
    gt_ObjectiveProduction03Complete_Init();
    gt_Production04_Init();
    gt_Production04Q_Init();
    gt_Production04MoreLinesQ_Init();
    gt_Production04CompleteQ_Init();
    gt__26Production04LoopMouse_Init();
    gt__26Production04StopMouse_Init();
    gt_Production04MarauderCheck_Init();
    gt_ObjectiveProduction04CreateQ_Init();
    gt_ObjectiveProduction04Complete_Init();
    gt_ProductionTIP_Init();
    gt_Supply01_Init();
    gt_Supply01Q_Init();
    gt_Supply01MoreLines01Q_Init();
    gt__27Supply01MoreLines02Q_Init();
    gt_Supply01CompleteQ_Init();
    gt__28Supply01LoopMouse_Init();
    gt__28Supply01StopMouse_Init();
    gt_Supply01BuildStructurePressed_Init();
    gt_Supply01BuildSupplyDepotPressed_Init();
    gt_Supply01SupplyDepotStarted_Init();
    gt_Supply01SupplyDepotCancelled_Init();
    gt_ObjectiveSupply01CreateQ_Init();
    gt_ObjectiveSupply01Complete_Init();
    gt_SupplyTIP_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
